
Laser-Distance-Medidas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000250c  0800ca50  0800ca50  0001ca50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef5c  0800ef5c  000204bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef5c  0800ef5c  0001ef5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef64  0800ef64  000204bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef64  0800ef64  0001ef64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef68  0800ef68  0001ef68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004bc  20000000  0800ef6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000868  200004bc  0800f428  000204bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d24  0800f428  00020d24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016833  00000000  00000000  000204ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a4a  00000000  00000000  00036d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00039770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  0003a7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bb9  00000000  00000000  0003b748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014714  00000000  00000000  00054301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000905bd  00000000  00000000  00068a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8fd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b0  00000000  00000000  000f9024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004bc 	.word	0x200004bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ca34 	.word	0x0800ca34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004c0 	.word	0x200004c0
 80001dc:	0800ca34 	.word	0x0800ca34

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8000eca:	6839      	ldr	r1, [r7, #0]
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f001 fcb2 	bl	8002836 <VL53L0X_get_offset_calibration_data_micro_meter>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b096      	sub	sp, #88	; 0x58
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8000ef2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d107      	bne.n	8000f0a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2188      	movs	r1, #136	; 0x88
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f004 ff50 	bl	8005da4 <VL53L0X_WrByte>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f18:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000f22:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a9e      	ldr	r2, [pc, #632]	; (80011a4 <VL53L0X_DataInit+0x2c0>)
 8000f2a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a9d      	ldr	r2, [pc, #628]	; (80011a8 <VL53L0X_DataInit+0x2c4>)
 8000f32:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	4619      	mov	r1, r3
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 fac2 	bl	80014cc <VL53L0X_GetDeviceParameters>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8000f4e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d112      	bne.n	8000f7c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8000f56:	2300      	movs	r3, #0
 8000f58:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f103 0410 	add.w	r4, r3, #16
 8000f64:	f107 0510 	add.w	r5, r7, #16
 8000f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2264      	movs	r2, #100	; 0x64
 8000f80:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000f8a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f94:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8000f9e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f004 fef8 	bl	8005da4 <VL53L0X_WrByte>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	21ff      	movs	r1, #255	; 0xff
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f004 feec 	bl	8005da4 <VL53L0X_WrByte>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461a      	mov	r2, r3
 8000fd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f004 fee0 	bl	8005da4 <VL53L0X_WrByte>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000fec:	4313      	orrs	r3, r2
 8000fee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8000ff2:	f107 030f 	add.w	r3, r7, #15
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2191      	movs	r1, #145	; 0x91
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f004 ff54 	bl	8005ea8 <VL53L0X_RdByte>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001008:	4313      	orrs	r3, r2
 800100a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001016:	2201      	movs	r2, #1
 8001018:	2100      	movs	r1, #0
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f004 fec2 	bl	8005da4 <VL53L0X_WrByte>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001028:	4313      	orrs	r3, r2
 800102a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800102e:	2200      	movs	r2, #0
 8001030:	21ff      	movs	r1, #255	; 0xff
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f004 feb6 	bl	8005da4 <VL53L0X_WrByte>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001040:	4313      	orrs	r3, r2
 8001042:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001046:	2200      	movs	r2, #0
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f004 feaa 	bl	8005da4 <VL53L0X_WrByte>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001058:	4313      	orrs	r3, r2
 800105a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800105e:	2300      	movs	r3, #0
 8001060:	653b      	str	r3, [r7, #80]	; 0x50
 8001062:	e014      	b.n	800108e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8001064:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001068:	2b00      	cmp	r3, #0
 800106a:	d114      	bne.n	8001096 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800106c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800106e:	b29b      	uxth	r3, r3
 8001070:	2201      	movs	r2, #1
 8001072:	4619      	mov	r1, r3
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 fd35 	bl	8001ae4 <VL53L0X_SetLimitCheckEnable>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001082:	4313      	orrs	r3, r2
 8001084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800108a:	3301      	adds	r3, #1
 800108c:	653b      	str	r3, [r7, #80]	; 0x50
 800108e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001090:	2b05      	cmp	r3, #5
 8001092:	dde7      	ble.n	8001064 <VL53L0X_DataInit+0x180>
 8001094:	e000      	b.n	8001098 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8001096:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8001098:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800109c:	2b00      	cmp	r3, #0
 800109e:	d107      	bne.n	80010b0 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80010a0:	2200      	movs	r2, #0
 80010a2:	2102      	movs	r1, #2
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 fd1d 	bl	8001ae4 <VL53L0X_SetLimitCheckEnable>
 80010aa:	4603      	mov	r3, r0
 80010ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80010b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d107      	bne.n	80010c8 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80010b8:	2200      	movs	r2, #0
 80010ba:	2103      	movs	r1, #3
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 fd11 	bl	8001ae4 <VL53L0X_SetLimitCheckEnable>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80010c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d107      	bne.n	80010e0 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80010d0:	2200      	movs	r2, #0
 80010d2:	2104      	movs	r1, #4
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 fd05 	bl	8001ae4 <VL53L0X_SetLimitCheckEnable>
 80010da:	4603      	mov	r3, r0
 80010dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80010e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d107      	bne.n	80010f8 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80010e8:	2200      	movs	r2, #0
 80010ea:	2105      	movs	r1, #5
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 fcf9 	bl	8001ae4 <VL53L0X_SetLimitCheckEnable>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80010f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d108      	bne.n	8001112 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001100:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8001104:	2100      	movs	r1, #0
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 fd9c 	bl	8001c44 <VL53L0X_SetLimitCheckValue>
 800110c:	4603      	mov	r3, r0
 800110e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001112:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001116:	2b00      	cmp	r3, #0
 8001118:	d108      	bne.n	800112c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800111a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111e:	2101      	movs	r1, #1
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 fd8f 	bl	8001c44 <VL53L0X_SetLimitCheckValue>
 8001126:	4603      	mov	r3, r0
 8001128:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800112c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001130:	2b00      	cmp	r3, #0
 8001132:	d108      	bne.n	8001146 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001134:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8001138:	2102      	movs	r1, #2
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 fd82 	bl	8001c44 <VL53L0X_SetLimitCheckValue>
 8001140:	4603      	mov	r3, r0
 8001142:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001146:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800114a:	2b00      	cmp	r3, #0
 800114c:	d107      	bne.n	800115e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800114e:	2200      	movs	r2, #0
 8001150:	2103      	movs	r1, #3
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 fd76 	bl	8001c44 <VL53L0X_SetLimitCheckValue>
 8001158:	4603      	mov	r3, r0
 800115a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800115e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001162:	2b00      	cmp	r3, #0
 8001164:	d10f      	bne.n	8001186 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	22ff      	movs	r2, #255	; 0xff
 800116a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800116e:	22ff      	movs	r2, #255	; 0xff
 8001170:	2101      	movs	r1, #1
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f004 fe16 	bl	8005da4 <VL53L0X_WrByte>
 8001178:	4603      	mov	r3, r0
 800117a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8001186:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8001196:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800119a:	4618      	mov	r0, r3
 800119c:	3758      	adds	r7, #88	; 0x58
 800119e:	46bd      	mov	sp, r7
 80011a0:	bdb0      	pop	{r4, r5, r7, pc}
 80011a2:	bf00      	nop
 80011a4:	00016b85 	.word	0x00016b85
 80011a8:	000970a4 	.word	0x000970a4

080011ac <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b09e      	sub	sp, #120	; 0x78
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f008 fcf6 	bl	8009bb4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80011e8:	2101      	movs	r1, #1
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f002 fa79 	bl	80036e2 <VL53L0X_get_info_from_device>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80011fc:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8001208:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800120c:	2b01      	cmp	r3, #1
 800120e:	d80d      	bhi.n	800122c <VL53L0X_StaticInit+0x80>
 8001210:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001214:	2b01      	cmp	r3, #1
 8001216:	d102      	bne.n	800121e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8001218:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800121a:	2b20      	cmp	r3, #32
 800121c:	d806      	bhi.n	800122c <VL53L0X_StaticInit+0x80>
 800121e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10e      	bne.n	8001244 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8001226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001228:	2b0c      	cmp	r3, #12
 800122a:	d90b      	bls.n	8001244 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800122c:	f107 0218 	add.w	r2, r7, #24
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f001 fcf8 	bl	8002c2c <VL53L0X_perform_ref_spad_management>
 800123c:	4603      	mov	r3, r0
 800123e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001242:	e009      	b.n	8001258 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8001244:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001248:	461a      	mov	r2, r3
 800124a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f001 fef9 	bl	8003044 <VL53L0X_set_reference_spads>
 8001252:	4603      	mov	r3, r0
 8001254:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8001258:	4b94      	ldr	r3, [pc, #592]	; (80014ac <VL53L0X_StaticInit+0x300>)
 800125a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800125c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10f      	bne.n	8001284 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800126a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800126e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001272:	2b00      	cmp	r3, #0
 8001274:	d104      	bne.n	8001280 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800127c:	66bb      	str	r3, [r7, #104]	; 0x68
 800127e:	e001      	b.n	8001284 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8001280:	4b8a      	ldr	r3, [pc, #552]	; (80014ac <VL53L0X_StaticInit+0x300>)
 8001282:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8001284:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001288:	2b00      	cmp	r3, #0
 800128a:	d106      	bne.n	800129a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800128c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f003 fdcc 	bl	8004e2c <VL53L0X_load_tuning_settings>
 8001294:	4603      	mov	r3, r0
 8001296:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800129a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10a      	bne.n	80012b8 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80012a2:	2300      	movs	r3, #0
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2304      	movs	r3, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f001 f8f1 	bl	8002494 <VL53L0X_SetGpioConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80012b8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d121      	bne.n	8001304 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80012c0:	2201      	movs	r2, #1
 80012c2:	21ff      	movs	r1, #255	; 0xff
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f004 fd6d 	bl	8005da4 <VL53L0X_WrByte>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80012d0:	f107 031a 	add.w	r3, r7, #26
 80012d4:	461a      	mov	r2, r3
 80012d6:	2184      	movs	r1, #132	; 0x84
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f004 fe0f 	bl	8005efc <VL53L0X_RdWord>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012e6:	4313      	orrs	r3, r2
 80012e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80012ec:	2200      	movs	r2, #0
 80012ee:	21ff      	movs	r1, #255	; 0xff
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f004 fd57 	bl	8005da4 <VL53L0X_WrByte>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012fe:	4313      	orrs	r3, r2
 8001300:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001304:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001308:	2b00      	cmp	r3, #0
 800130a:	d105      	bne.n	8001318 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800130c:	8b7b      	ldrh	r3, [r7, #26]
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	461a      	mov	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8001318:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800131c:	2b00      	cmp	r3, #0
 800131e:	d108      	bne.n	8001332 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f8d0 	bl	80014cc <VL53L0X_GetDeviceParameters>
 800132c:	4603      	mov	r3, r0
 800132e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8001332:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001336:	2b00      	cmp	r3, #0
 8001338:	d110      	bne.n	800135c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800133a:	f107 0319 	add.w	r3, r7, #25
 800133e:	4619      	mov	r1, r3
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f992 	bl	800166a <VL53L0X_GetFractionEnable>
 8001346:	4603      	mov	r3, r0
 8001348:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800134c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001350:	2b00      	cmp	r3, #0
 8001352:	d103      	bne.n	800135c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8001354:	7e7a      	ldrb	r2, [r7, #25]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800135c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10e      	bne.n	8001382 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f103 0410 	add.w	r4, r3, #16
 800136a:	f107 051c 	add.w	r5, r7, #28
 800136e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800137e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8001382:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001386:	2b00      	cmp	r3, #0
 8001388:	d111      	bne.n	80013ae <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800138a:	f107 0319 	add.w	r3, r7, #25
 800138e:	461a      	mov	r2, r3
 8001390:	2101      	movs	r1, #1
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f004 fd88 	bl	8005ea8 <VL53L0X_RdByte>
 8001398:	4603      	mov	r3, r0
 800139a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800139e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d103      	bne.n	80013ae <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80013a6:	7e7a      	ldrb	r2, [r7, #25]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80013ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d107      	bne.n	80013c6 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f9ca 	bl	8001754 <VL53L0X_SetSequenceStepEnable>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80013c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d107      	bne.n	80013de <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80013ce:	2200      	movs	r2, #0
 80013d0:	2102      	movs	r1, #2
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f9be 	bl	8001754 <VL53L0X_SetSequenceStepEnable>
 80013d8:	4603      	mov	r3, r0
 80013da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80013de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d103      	bne.n	80013ee <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2203      	movs	r2, #3
 80013ea:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80013ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d109      	bne.n	800140a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80013f6:	f107 0313 	add.w	r3, r7, #19
 80013fa:	461a      	mov	r2, r3
 80013fc:	2100      	movs	r1, #0
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f990 	bl	8001724 <VL53L0X_GetVcselPulsePeriod>
 8001404:	4603      	mov	r3, r0
 8001406:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800140a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800140e:	2b00      	cmp	r3, #0
 8001410:	d103      	bne.n	800141a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001412:	7cfa      	ldrb	r2, [r7, #19]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800141a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800141e:	2b00      	cmp	r3, #0
 8001420:	d109      	bne.n	8001436 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8001422:	f107 0313 	add.w	r3, r7, #19
 8001426:	461a      	mov	r2, r3
 8001428:	2101      	movs	r1, #1
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f97a 	bl	8001724 <VL53L0X_GetVcselPulsePeriod>
 8001430:	4603      	mov	r3, r0
 8001432:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001436:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800143a:	2b00      	cmp	r3, #0
 800143c:	d103      	bne.n	8001446 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800143e:	7cfa      	ldrb	r2, [r7, #19]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8001446:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800144a:	2b00      	cmp	r3, #0
 800144c:	d109      	bne.n	8001462 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	461a      	mov	r2, r3
 8001454:	2103      	movs	r1, #3
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f002 fec4 	bl	80041e4 <get_sequence_step_timeout>
 800145c:	4603      	mov	r3, r0
 800145e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001462:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001466:	2b00      	cmp	r3, #0
 8001468:	d103      	bne.n	8001472 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8001472:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	461a      	mov	r2, r3
 8001480:	2104      	movs	r1, #4
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f002 feae 	bl	80041e4 <get_sequence_step_timeout>
 8001488:	4603      	mov	r3, r0
 800148a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800148e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001492:	2b00      	cmp	r3, #0
 8001494:	d103      	bne.n	800149e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800149e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3770      	adds	r7, #112	; 0x70
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bdb0      	pop	{r4, r5, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000000 	.word	0x20000000

080014b0 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80014b8:	239d      	movs	r3, #157	; 0x9d
 80014ba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80014bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f8b0 	bl	8001644 <VL53L0X_GetDeviceMode>
 80014e4:	4603      	mov	r3, r0
 80014e6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80014e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d107      	bne.n	8001500 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	3308      	adds	r3, #8
 80014f4:	4619      	mov	r1, r3
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fa78 	bl	80019ec <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80014fc:	4603      	mov	r3, r0
 80014fe:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8001500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	2200      	movs	r2, #0
 800150c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d107      	bne.n	8001526 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	3310      	adds	r3, #16
 800151a:	4619      	mov	r1, r3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 faae 	bl	8001a7e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8001522:	4603      	mov	r3, r0
 8001524:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8001526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d107      	bne.n	800153e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	3314      	adds	r3, #20
 8001532:	4619      	mov	r1, r3
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fcc1 	bl	8000ebc <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800153a:	4603      	mov	r3, r0
 800153c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800153e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d134      	bne.n	80015b0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	e02a      	b.n	80015a2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800154c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d12a      	bne.n	80015aa <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	b299      	uxth	r1, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	3308      	adds	r3, #8
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	4413      	add	r3, r2
 8001562:	3304      	adds	r3, #4
 8001564:	461a      	mov	r2, r3
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 fbce 	bl	8001d08 <VL53L0X_GetLimitCheckValue>
 800156c:	4603      	mov	r3, r0
 800156e:	461a      	mov	r2, r3
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	4313      	orrs	r3, r2
 8001574:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d117      	bne.n	80015ae <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	b299      	uxth	r1, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	3318      	adds	r3, #24
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	4413      	add	r3, r2
 800158a:	461a      	mov	r2, r3
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 fb35 	bl	8001bfc <VL53L0X_GetLimitCheckEnable>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	4313      	orrs	r3, r2
 800159a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	3301      	adds	r3, #1
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	ddd1      	ble.n	800154c <VL53L0X_GetDeviceParameters+0x80>
 80015a8:	e002      	b.n	80015b0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80015aa:	bf00      	nop
 80015ac:	e000      	b.n	80015b0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80015ae:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80015b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d107      	bne.n	80015c8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	333c      	adds	r3, #60	; 0x3c
 80015bc:	4619      	mov	r1, r3
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fc30 	bl	8001e24 <VL53L0X_GetWrapAroundCheckEnable>
 80015c4:	4603      	mov	r3, r0
 80015c6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80015c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d107      	bne.n	80015e0 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	3304      	adds	r3, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f879 	bl	80016ce <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80015dc:	4603      	mov	r3, r0
 80015de:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80015e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	2b15      	cmp	r3, #21
 8001600:	bf8c      	ite	hi
 8001602:	2201      	movhi	r2, #1
 8001604:	2200      	movls	r2, #0
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	2a00      	cmp	r2, #0
 800160a:	d10e      	bne.n	800162a <VL53L0X_SetDeviceMode+0x3e>
 800160c:	2201      	movs	r2, #1
 800160e:	409a      	lsls	r2, r3
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <VL53L0X_SetDeviceMode+0x54>)
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	bf14      	ite	ne
 8001618:	2301      	movne	r3, #1
 800161a:	2300      	moveq	r3, #0
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	78fa      	ldrb	r2, [r7, #3]
 8001626:	741a      	strb	r2, [r3, #16]
		break;
 8001628:	e001      	b.n	800162e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800162a:	23f8      	movs	r3, #248	; 0xf8
 800162c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800162e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	0030000b 	.word	0x0030000b

08001644 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7c1a      	ldrb	r2, [r3, #16]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	2109      	movs	r1, #9
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f004 fc13 	bl	8005ea8 <VL53L0X_RdByte>
 8001682:	4603      	mov	r3, r0
 8001684:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d106      	bne.n	800169c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	b2da      	uxtb	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800169c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80016b6:	6839      	ldr	r1, [r7, #0]
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f003 fa26 	bl	8004b0a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80016be:	4603      	mov	r3, r0
 80016c0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b084      	sub	sp, #16
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80016dc:	6839      	ldr	r1, [r7, #0]
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f003 faf3 	bl	8004cca <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80016e4:	4603      	mov	r3, r0
 80016e6:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80016e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	70fb      	strb	r3, [r7, #3]
 8001700:	4613      	mov	r3, r2
 8001702:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8001708:	78ba      	ldrb	r2, [r7, #2]
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f002 ff3b 	bl	800458a <VL53L0X_set_vcsel_pulse_period>
 8001714:	4603      	mov	r3, r0
 8001716:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8001718:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	460b      	mov	r3, r1
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8001736:	7afb      	ldrb	r3, [r7, #11]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4619      	mov	r1, r3
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f003 f9ad 	bl	8004a9c <VL53L0X_get_vcsel_pulse_period>
 8001742:	4603      	mov	r3, r0
 8001744:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8001746:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	70fb      	strb	r3, [r7, #3]
 8001760:	4613      	mov	r3, r2
 8001762:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001764:	2300      	movs	r3, #0
 8001766:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001770:	f107 030f 	add.w	r3, r7, #15
 8001774:	461a      	mov	r2, r3
 8001776:	2101      	movs	r1, #1
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f004 fb95 	bl	8005ea8 <VL53L0X_RdByte>
 800177e:	4603      	mov	r3, r0
 8001780:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8001786:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d15a      	bne.n	8001844 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800178e:	78bb      	ldrb	r3, [r7, #2]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d12b      	bne.n	80017ec <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	2b04      	cmp	r3, #4
 8001798:	d825      	bhi.n	80017e6 <VL53L0X_SetSequenceStepEnable+0x92>
 800179a:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	080017b5 	.word	0x080017b5
 80017a4:	080017bf 	.word	0x080017bf
 80017a8:	080017c9 	.word	0x080017c9
 80017ac:	080017d3 	.word	0x080017d3
 80017b0:	080017dd 	.word	0x080017dd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80017b4:	7dbb      	ldrb	r3, [r7, #22]
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	75bb      	strb	r3, [r7, #22]
				break;
 80017bc:	e043      	b.n	8001846 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80017be:	7dbb      	ldrb	r3, [r7, #22]
 80017c0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80017c4:	75bb      	strb	r3, [r7, #22]
				break;
 80017c6:	e03e      	b.n	8001846 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80017c8:	7dbb      	ldrb	r3, [r7, #22]
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	75bb      	strb	r3, [r7, #22]
				break;
 80017d0:	e039      	b.n	8001846 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80017d2:	7dbb      	ldrb	r3, [r7, #22]
 80017d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017d8:	75bb      	strb	r3, [r7, #22]
				break;
 80017da:	e034      	b.n	8001846 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80017dc:	7dbb      	ldrb	r3, [r7, #22]
 80017de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017e2:	75bb      	strb	r3, [r7, #22]
				break;
 80017e4:	e02f      	b.n	8001846 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80017e6:	23fc      	movs	r3, #252	; 0xfc
 80017e8:	75fb      	strb	r3, [r7, #23]
 80017ea:	e02c      	b.n	8001846 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d825      	bhi.n	800183e <VL53L0X_SetSequenceStepEnable+0xea>
 80017f2:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	0800180d 	.word	0x0800180d
 80017fc:	08001817 	.word	0x08001817
 8001800:	08001821 	.word	0x08001821
 8001804:	0800182b 	.word	0x0800182b
 8001808:	08001835 	.word	0x08001835
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800180c:	7dbb      	ldrb	r3, [r7, #22]
 800180e:	f023 0310 	bic.w	r3, r3, #16
 8001812:	75bb      	strb	r3, [r7, #22]
				break;
 8001814:	e017      	b.n	8001846 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8001816:	7dbb      	ldrb	r3, [r7, #22]
 8001818:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800181c:	75bb      	strb	r3, [r7, #22]
				break;
 800181e:	e012      	b.n	8001846 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8001820:	7dbb      	ldrb	r3, [r7, #22]
 8001822:	f023 0304 	bic.w	r3, r3, #4
 8001826:	75bb      	strb	r3, [r7, #22]
				break;
 8001828:	e00d      	b.n	8001846 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800182a:	7dbb      	ldrb	r3, [r7, #22]
 800182c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001830:	75bb      	strb	r3, [r7, #22]
				break;
 8001832:	e008      	b.n	8001846 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8001834:	7dbb      	ldrb	r3, [r7, #22]
 8001836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800183a:	75bb      	strb	r3, [r7, #22]
				break;
 800183c:	e003      	b.n	8001846 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800183e:	23fc      	movs	r3, #252	; 0xfc
 8001840:	75fb      	strb	r3, [r7, #23]
 8001842:	e000      	b.n	8001846 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8001844:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	7dba      	ldrb	r2, [r7, #22]
 800184a:	429a      	cmp	r2, r3
 800184c:	d01e      	beq.n	800188c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800184e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d107      	bne.n	8001866 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8001856:	7dbb      	ldrb	r3, [r7, #22]
 8001858:	461a      	mov	r2, r3
 800185a:	2101      	movs	r1, #1
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f004 faa1 	bl	8005da4 <VL53L0X_WrByte>
 8001862:	4603      	mov	r3, r0
 8001864:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8001866:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d103      	bne.n	8001876 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	7dba      	ldrb	r2, [r7, #22]
 8001872:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8001876:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001884:	6939      	ldr	r1, [r7, #16]
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ff0e 	bl	80016a8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800188c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	72fb      	strb	r3, [r7, #11]
 80018a6:	4613      	mov	r3, r2
 80018a8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80018b4:	7afb      	ldrb	r3, [r7, #11]
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d836      	bhi.n	8001928 <sequence_step_enabled+0x90>
 80018ba:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <sequence_step_enabled+0x28>)
 80018bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c0:	080018d5 	.word	0x080018d5
 80018c4:	080018e7 	.word	0x080018e7
 80018c8:	080018f9 	.word	0x080018f9
 80018cc:	0800190b 	.word	0x0800190b
 80018d0:	0800191d 	.word	0x0800191d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80018d4:	7abb      	ldrb	r3, [r7, #10]
 80018d6:	111b      	asrs	r3, r3, #4
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	701a      	strb	r2, [r3, #0]
		break;
 80018e4:	e022      	b.n	800192c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80018e6:	7abb      	ldrb	r3, [r7, #10]
 80018e8:	10db      	asrs	r3, r3, #3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	701a      	strb	r2, [r3, #0]
		break;
 80018f6:	e019      	b.n	800192c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80018f8:	7abb      	ldrb	r3, [r7, #10]
 80018fa:	109b      	asrs	r3, r3, #2
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	701a      	strb	r2, [r3, #0]
		break;
 8001908:	e010      	b.n	800192c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800190a:	7abb      	ldrb	r3, [r7, #10]
 800190c:	119b      	asrs	r3, r3, #6
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	b2da      	uxtb	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	701a      	strb	r2, [r3, #0]
		break;
 800191a:	e007      	b.n	800192c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800191c:	7abb      	ldrb	r3, [r7, #10]
 800191e:	09db      	lsrs	r3, r3, #7
 8001920:	b2da      	uxtb	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	701a      	strb	r2, [r3, #0]
		break;
 8001926:	e001      	b.n	800192c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001928:	23fc      	movs	r3, #252	; 0xfc
 800192a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800192c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001930:	4618      	mov	r0, r3
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001946:	2300      	movs	r3, #0
 8001948:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800194e:	f107 030e 	add.w	r3, r7, #14
 8001952:	461a      	mov	r2, r3
 8001954:	2101      	movs	r1, #1
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f004 faa6 	bl	8005ea8 <VL53L0X_RdByte>
 800195c:	4603      	mov	r3, r0
 800195e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8001960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d107      	bne.n	8001978 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8001968:	7bba      	ldrb	r2, [r7, #14]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2100      	movs	r1, #0
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ff92 	bl	8001898 <sequence_step_enabled>
 8001974:	4603      	mov	r3, r0
 8001976:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d108      	bne.n	8001992 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8001980:	7bba      	ldrb	r2, [r7, #14]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	3302      	adds	r3, #2
 8001986:	2101      	movs	r1, #1
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff85 	bl	8001898 <sequence_step_enabled>
 800198e:	4603      	mov	r3, r0
 8001990:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d108      	bne.n	80019ac <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800199a:	7bba      	ldrb	r2, [r7, #14]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	2102      	movs	r1, #2
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff78 	bl	8001898 <sequence_step_enabled>
 80019a8:	4603      	mov	r3, r0
 80019aa:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80019ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d108      	bne.n	80019c6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80019b4:	7bba      	ldrb	r2, [r7, #14]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	3303      	adds	r3, #3
 80019ba:	2103      	movs	r1, #3
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff6b 	bl	8001898 <sequence_step_enabled>
 80019c2:	4603      	mov	r3, r0
 80019c4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d108      	bne.n	80019e0 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80019ce:	7bba      	ldrb	r2, [r7, #14]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	3304      	adds	r3, #4
 80019d4:	2104      	movs	r1, #4
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ff5e 	bl	8001898 <sequence_step_enabled>
 80019dc:	4603      	mov	r3, r0
 80019de:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80019e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	461a      	mov	r2, r3
 8001a00:	21f8      	movs	r1, #248	; 0xf8
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f004 fa7a 	bl	8005efc <VL53L0X_RdWord>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8001a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d108      	bne.n	8001a26 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f004 faa5 	bl	8005f6c <VL53L0X_RdDWord>
 8001a22:	4603      	mov	r3, r0
 8001a24:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10c      	bne.n	8001a48 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8001a2e:	89bb      	ldrh	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	89ba      	ldrh	r2, [r7, #12]
 8001a38:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7f1b      	ldrb	r3, [r3, #28]
 8001a66:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	7bba      	ldrb	r2, [r7, #14]
 8001a6c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8001a8c:	f107 030e 	add.w	r3, r7, #14
 8001a90:	461a      	mov	r2, r3
 8001a92:	2120      	movs	r1, #32
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f004 fa31 	bl	8005efc <VL53L0X_RdWord>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8001a9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d118      	bne.n	8001ad8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8001aa6:	89fb      	ldrh	r3, [r7, #14]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	771a      	strb	r2, [r3, #28]
 8001abe:	e00b      	b.n	8001ad8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8001ac0:	89fb      	ldrh	r3, [r7, #14]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001ad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
 8001af0:	4613      	mov	r3, r2
 8001af2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001b04:	887b      	ldrh	r3, [r7, #2]
 8001b06:	2b05      	cmp	r3, #5
 8001b08:	d902      	bls.n	8001b10 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001b0a:	23fc      	movs	r3, #252	; 0xfc
 8001b0c:	75fb      	strb	r3, [r7, #23]
 8001b0e:	e05b      	b.n	8001bc8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8001b10:	787b      	ldrb	r3, [r7, #1]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	73bb      	strb	r3, [r7, #14]
 8001b22:	e00a      	b.n	8001b3a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	330c      	adds	r3, #12
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d841      	bhi.n	8001bc4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8001b40:	a201      	add	r2, pc, #4	; (adr r2, 8001b48 <VL53L0X_SetLimitCheckEnable+0x64>)
 8001b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b46:	bf00      	nop
 8001b48:	08001b61 	.word	0x08001b61
 8001b4c:	08001b6b 	.word	0x08001b6b
 8001b50:	08001b81 	.word	0x08001b81
 8001b54:	08001b8b 	.word	0x08001b8b
 8001b58:	08001b95 	.word	0x08001b95
 8001b5c:	08001bad 	.word	0x08001bad

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8001b68:	e02e      	b.n	8001bc8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	2144      	movs	r1, #68	; 0x44
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f004 f939 	bl	8005dec <VL53L0X_WrWord>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	75fb      	strb	r3, [r7, #23]

			break;
 8001b7e:	e023      	b.n	8001bc8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8001b88:	e01e      	b.n	8001bc8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8001b92:	e019      	b.n	8001bc8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8001b94:	7bbb      	ldrb	r3, [r7, #14]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8001b9a:	7b7b      	ldrb	r3, [r7, #13]
 8001b9c:	22fe      	movs	r2, #254	; 0xfe
 8001b9e:	2160      	movs	r1, #96	; 0x60
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f004 f94d 	bl	8005e40 <VL53L0X_UpdateByte>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8001baa:	e00d      	b.n	8001bc8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8001bac:	7bbb      	ldrb	r3, [r7, #14]
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8001bb2:	7b7b      	ldrb	r3, [r7, #13]
 8001bb4:	22ef      	movs	r2, #239	; 0xef
 8001bb6:	2160      	movs	r1, #96	; 0x60
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f004 f941 	bl	8005e40 <VL53L0X_UpdateByte>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8001bc2:	e001      	b.n	8001bc8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001bc4:	23fc      	movs	r3, #252	; 0xfc
 8001bc6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001bc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10f      	bne.n	8001bf0 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001bd6:	887b      	ldrh	r3, [r7, #2]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001be2:	e005      	b.n	8001bf0 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001be4:	887b      	ldrh	r3, [r7, #2]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	460b      	mov	r3, r1
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001c0e:	897b      	ldrh	r3, [r7, #10]
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d905      	bls.n	8001c20 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001c14:	23fc      	movs	r3, #252	; 0xfc
 8001c16:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	e008      	b.n	8001c32 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001c20:	897b      	ldrh	r3, [r7, #10]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4413      	add	r3, r2
 8001c26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c2a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7dba      	ldrb	r2, [r7, #22]
 8001c30:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8001c56:	897b      	ldrh	r3, [r7, #10]
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c60:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8001c62:	7dbb      	ldrb	r3, [r7, #22]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001c68:	897b      	ldrh	r3, [r7, #10]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	330c      	adds	r3, #12
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	e040      	b.n	8001cfa <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8001c78:	897b      	ldrh	r3, [r7, #10]
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d830      	bhi.n	8001ce0 <VL53L0X_SetLimitCheckValue+0x9c>
 8001c7e:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <VL53L0X_SetLimitCheckValue+0x40>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001c9d 	.word	0x08001c9d
 8001c88:	08001ca5 	.word	0x08001ca5
 8001c8c:	08001cbb 	.word	0x08001cbb
 8001c90:	08001cc3 	.word	0x08001cc3
 8001c94:	08001ccb 	.word	0x08001ccb
 8001c98:	08001ccb 	.word	0x08001ccb

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8001ca2:	e01f      	b.n	8001ce4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	2144      	movs	r1, #68	; 0x44
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f004 f89c 	bl	8005dec <VL53L0X_WrWord>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8001cb8:	e014      	b.n	8001ce4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8001cc0:	e010      	b.n	8001ce4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8001cc8:	e00c      	b.n	8001ce4 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	2164      	movs	r1, #100	; 0x64
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f004 f889 	bl	8005dec <VL53L0X_WrWord>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8001cde:	e001      	b.n	8001ce4 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001ce0:	23fc      	movs	r3, #252	; 0xfc
 8001ce2:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8001ce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d106      	bne.n	8001cfa <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001cec:	897b      	ldrh	r3, [r7, #10]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	330c      	adds	r3, #12
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001cfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop

08001d08 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	460b      	mov	r3, r1
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8001d1e:	897b      	ldrh	r3, [r7, #10]
 8001d20:	2b05      	cmp	r3, #5
 8001d22:	d847      	bhi.n	8001db4 <VL53L0X_GetLimitCheckValue+0xac>
 8001d24:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <VL53L0X_GetLimitCheckValue+0x24>)
 8001d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2a:	bf00      	nop
 8001d2c:	08001d45 	.word	0x08001d45
 8001d30:	08001d51 	.word	0x08001d51
 8001d34:	08001d77 	.word	0x08001d77
 8001d38:	08001d83 	.word	0x08001d83
 8001d3c:	08001d8f 	.word	0x08001d8f
 8001d40:	08001d8f 	.word	0x08001d8f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d48:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	77bb      	strb	r3, [r7, #30]
		break;
 8001d4e:	e033      	b.n	8001db8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8001d50:	f107 0316 	add.w	r3, r7, #22
 8001d54:	461a      	mov	r2, r3
 8001d56:	2144      	movs	r1, #68	; 0x44
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f004 f8cf 	bl	8005efc <VL53L0X_RdWord>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8001d62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001d6a:	8afb      	ldrh	r3, [r7, #22]
 8001d6c:	025b      	lsls	r3, r3, #9
 8001d6e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8001d70:	2301      	movs	r3, #1
 8001d72:	77bb      	strb	r3, [r7, #30]
		break;
 8001d74:	e020      	b.n	8001db8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	77bb      	strb	r3, [r7, #30]
		break;
 8001d80:	e01a      	b.n	8001db8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	77bb      	strb	r3, [r7, #30]
		break;
 8001d8c:	e014      	b.n	8001db8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8001d8e:	f107 0316 	add.w	r3, r7, #22
 8001d92:	461a      	mov	r2, r3
 8001d94:	2164      	movs	r1, #100	; 0x64
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f004 f8b0 	bl	8005efc <VL53L0X_RdWord>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8001da0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001da8:	8afb      	ldrh	r3, [r7, #22]
 8001daa:	025b      	lsls	r3, r3, #9
 8001dac:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	77bb      	strb	r3, [r7, #30]
		break;
 8001db2:	e001      	b.n	8001db8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001db4:	23fc      	movs	r3, #252	; 0xfc
 8001db6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001db8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d12a      	bne.n	8001e16 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8001dc0:	7fbb      	ldrb	r3, [r7, #30]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d124      	bne.n	8001e10 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d110      	bne.n	8001dee <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8001dcc:	897b      	ldrh	r3, [r7, #10]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	330c      	adds	r3, #12
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001de0:	897b      	ldrh	r3, [r7, #10]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4413      	add	r3, r2
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001dec:	e013      	b.n	8001e16 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001df4:	897b      	ldrh	r3, [r7, #10]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	330c      	adds	r3, #12
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001e02:	897b      	ldrh	r3, [r7, #10]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001e0e:	e002      	b.n	8001e16 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001e16:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3720      	adds	r7, #32
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop

08001e24 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8001e32:	f107 030e 	add.w	r3, r7, #14
 8001e36:	461a      	mov	r2, r3
 8001e38:	2101      	movs	r1, #1
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f004 f834 	bl	8005ea8 <VL53L0X_RdByte>
 8001e40:	4603      	mov	r3, r0
 8001e42:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8001e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10e      	bne.n	8001e6a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8001e4c:	7bba      	ldrb	r2, [r7, #14]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8001e54:	7bbb      	ldrb	r3, [r7, #14]
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	da03      	bge.n	8001e64 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
 8001e62:	e002      	b.n	8001e6a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d104      	bne.n	8001e7c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8001e94:	f107 030e 	add.w	r3, r7, #14
 8001e98:	4619      	mov	r1, r3
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fbd2 	bl	8001644 <VL53L0X_GetDeviceMode>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8001ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d107      	bne.n	8001ebc <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8001eac:	7bbb      	ldrb	r3, [r7, #14]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d104      	bne.n	8001ebc <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f898 	bl	8001fe8 <VL53L0X_StartMeasurement>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8001ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d104      	bne.n	8001ece <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f001 fb3f 	bl	8003548 <VL53L0X_measurement_poll_for_completion>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d106      	bne.n	8001ee4 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8001ed6:	7bbb      	ldrb	r3, [r7, #14]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d103      	bne.n	8001ee4 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2203      	movs	r2, #3
 8001ee0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8001ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8001f00:	2301      	movs	r3, #1
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f001 fae1 	bl	80034ce <VL53L0X_perform_ref_calibration>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8001f10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8001f32:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8001f34:	7dbb      	ldrb	r3, [r7, #22]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d005      	beq.n	8001f46 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8001f3a:	7dbb      	ldrb	r3, [r7, #22]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d002      	beq.n	8001f46 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8001f40:	7dbb      	ldrb	r3, [r7, #22]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d147      	bne.n	8001fd6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	f107 0210 	add.w	r2, r7, #16
 8001f4e:	2101      	movs	r1, #1
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 fbc3 	bl	80026dc <VL53L0X_GetInterruptThresholds>
 8001f56:	4603      	mov	r3, r0
 8001f58:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8001f60:	d803      	bhi.n	8001f6a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8001f62:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8001f64:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8001f68:	d935      	bls.n	8001fd6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8001f6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d131      	bne.n	8001fd6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8001f78:	491a      	ldr	r1, [pc, #104]	; (8001fe4 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f002 ff56 	bl	8004e2c <VL53L0X_load_tuning_settings>
 8001f80:	4603      	mov	r3, r0
 8001f82:	75fb      	strb	r3, [r7, #23]
 8001f84:	e027      	b.n	8001fd6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8001f86:	2204      	movs	r2, #4
 8001f88:	21ff      	movs	r1, #255	; 0xff
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f003 ff0a 	bl	8005da4 <VL53L0X_WrByte>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2170      	movs	r1, #112	; 0x70
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f003 ff00 	bl	8005da4 <VL53L0X_WrByte>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	21ff      	movs	r1, #255	; 0xff
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f003 fef6 	bl	8005da4 <VL53L0X_WrByte>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f003 feec 	bl	8005da4 <VL53L0X_WrByte>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8001fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200000f4 	.word	0x200000f4

08001fe8 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8001ff8:	f107 030e 	add.w	r3, r7, #14
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fb20 	bl	8001644 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002004:	2201      	movs	r2, #1
 8002006:	2180      	movs	r1, #128	; 0x80
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f003 fecb 	bl	8005da4 <VL53L0X_WrByte>
 800200e:	4603      	mov	r3, r0
 8002010:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002012:	2201      	movs	r2, #1
 8002014:	21ff      	movs	r1, #255	; 0xff
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f003 fec4 	bl	8005da4 <VL53L0X_WrByte>
 800201c:	4603      	mov	r3, r0
 800201e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002020:	2200      	movs	r2, #0
 8002022:	2100      	movs	r1, #0
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f003 febd 	bl	8005da4 <VL53L0X_WrByte>
 800202a:	4603      	mov	r3, r0
 800202c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8002034:	461a      	mov	r2, r3
 8002036:	2191      	movs	r1, #145	; 0x91
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f003 feb3 	bl	8005da4 <VL53L0X_WrByte>
 800203e:	4603      	mov	r3, r0
 8002040:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002042:	2201      	movs	r2, #1
 8002044:	2100      	movs	r1, #0
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f003 feac 	bl	8005da4 <VL53L0X_WrByte>
 800204c:	4603      	mov	r3, r0
 800204e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002050:	2200      	movs	r2, #0
 8002052:	21ff      	movs	r1, #255	; 0xff
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f003 fea5 	bl	8005da4 <VL53L0X_WrByte>
 800205a:	4603      	mov	r3, r0
 800205c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800205e:	2200      	movs	r2, #0
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f003 fe9e 	bl	8005da4 <VL53L0X_WrByte>
 8002068:	4603      	mov	r3, r0
 800206a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800206c:	7bbb      	ldrb	r3, [r7, #14]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d054      	beq.n	800211c <VL53L0X_StartMeasurement+0x134>
 8002072:	2b03      	cmp	r3, #3
 8002074:	dc6c      	bgt.n	8002150 <VL53L0X_StartMeasurement+0x168>
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <VL53L0X_StartMeasurement+0x98>
 800207a:	2b01      	cmp	r3, #1
 800207c:	d034      	beq.n	80020e8 <VL53L0X_StartMeasurement+0x100>
 800207e:	e067      	b.n	8002150 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8002080:	2201      	movs	r2, #1
 8002082:	2100      	movs	r1, #0
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f003 fe8d 	bl	8005da4 <VL53L0X_WrByte>
 800208a:	4603      	mov	r3, r0
 800208c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8002092:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d15d      	bne.n	8002156 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 80020a4:	f107 030d 	add.w	r3, r7, #13
 80020a8:	461a      	mov	r2, r3
 80020aa:	2100      	movs	r1, #0
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f003 fefb 	bl	8005ea8 <VL53L0X_RdByte>
 80020b2:	4603      	mov	r3, r0
 80020b4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	3301      	adds	r3, #1
 80020ba:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80020bc:	7b7a      	ldrb	r2, [r7, #13]
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	4013      	ands	r3, r2
 80020c2:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d107      	bne.n	80020da <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80020ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d103      	bne.n	80020da <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020d8:	d3e1      	bcc.n	800209e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020e0:	d339      	bcc.n	8002156 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80020e2:	23f9      	movs	r3, #249	; 0xf9
 80020e4:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80020e6:	e036      	b.n	8002156 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80020e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80020f0:	2101      	movs	r1, #1
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ff12 	bl	8001f1c <VL53L0X_CheckAndLoadInterruptSettings>
 80020f8:	4603      	mov	r3, r0
 80020fa:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80020fc:	2202      	movs	r2, #2
 80020fe:	2100      	movs	r1, #0
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f003 fe4f 	bl	8005da4 <VL53L0X_WrByte>
 8002106:	4603      	mov	r3, r0
 8002108:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800210a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d123      	bne.n	800215a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2204      	movs	r2, #4
 8002116:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800211a:	e01e      	b.n	800215a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800211c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002124:	2101      	movs	r1, #1
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fef8 	bl	8001f1c <VL53L0X_CheckAndLoadInterruptSettings>
 800212c:	4603      	mov	r3, r0
 800212e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002130:	2204      	movs	r2, #4
 8002132:	2100      	movs	r1, #0
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f003 fe35 	bl	8005da4 <VL53L0X_WrByte>
 800213a:	4603      	mov	r3, r0
 800213c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800213e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10b      	bne.n	800215e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2204      	movs	r2, #4
 800214a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800214e:	e006      	b.n	800215e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002150:	23f8      	movs	r3, #248	; 0xf8
 8002152:	75fb      	strb	r3, [r7, #23]
 8002154:	e004      	b.n	8002160 <VL53L0X_StartMeasurement+0x178>
		break;
 8002156:	bf00      	nop
 8002158:	e002      	b.n	8002160 <VL53L0X_StartMeasurement+0x178>
		break;
 800215a:	bf00      	nop
 800215c:	e000      	b.n	8002160 <VL53L0X_StartMeasurement+0x178>
		break;
 800215e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8002160:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8002180:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8002182:	7bbb      	ldrb	r3, [r7, #14]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d112      	bne.n	80021ae <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8002188:	f107 0308 	add.w	r3, r7, #8
 800218c:	4619      	mov	r1, r3
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fb1a 	bl	80027c8 <VL53L0X_GetInterruptMaskStatus>
 8002194:	4603      	mov	r3, r0
 8002196:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b04      	cmp	r3, #4
 800219c:	d103      	bne.n	80021a6 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e01c      	b.n	80021e0 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	e018      	b.n	80021e0 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80021ae:	f107 030d 	add.w	r3, r7, #13
 80021b2:	461a      	mov	r2, r3
 80021b4:	2114      	movs	r1, #20
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f003 fe76 	bl	8005ea8 <VL53L0X_RdByte>
 80021bc:	4603      	mov	r3, r0
 80021be:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80021c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10b      	bne.n	80021e0 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80021c8:	7b7b      	ldrb	r3, [r7, #13]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	e002      	b.n	80021e0 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80021e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80021ec:	b5b0      	push	{r4, r5, r7, lr}
 80021ee:	b096      	sub	sp, #88	; 0x58
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80021fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002200:	230c      	movs	r3, #12
 8002202:	2114      	movs	r1, #20
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f003 fda1 	bl	8005d4c <VL53L0X_ReadMulti>
 800220a:	4603      	mov	r3, r0
 800220c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8002210:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 80d1 	bne.w	80023bc <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2200      	movs	r2, #0
 800221e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8002226:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800222a:	b29b      	uxth	r3, r3
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	b29a      	uxth	r2, r3
 8002230:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002234:	b29b      	uxth	r3, r3
 8002236:	4413      	add	r3, r2
 8002238:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8002242:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002246:	b29b      	uxth	r3, r3
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	b29a      	uxth	r2, r3
 800224c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002250:	b29b      	uxth	r3, r3
 8002252:	4413      	add	r3, r2
 8002254:	b29b      	uxth	r3, r3
 8002256:	025b      	lsls	r3, r3, #9
 8002258:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800225e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8002260:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002264:	b29b      	uxth	r3, r3
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	b29a      	uxth	r2, r3
 800226a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800226e:	b29b      	uxth	r3, r3
 8002270:	4413      	add	r3, r2
 8002272:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8002276:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800227a:	025b      	lsls	r3, r3, #9
 800227c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8002282:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	b29a      	uxth	r2, r3
 800228c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002290:	b29b      	uxth	r3, r3
 8002292:	4413      	add	r3, r2
 8002294:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800229e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80022a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80022ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80022b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80022ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80022bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022c0:	d046      	beq.n	8002350 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80022c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80022c4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80022c8:	fb02 f303 	mul.w	r3, r2, r3
 80022cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80022d0:	4a57      	ldr	r2, [pc, #348]	; (8002430 <VL53L0X_GetRangingMeasurementData+0x244>)
 80022d2:	fb82 1203 	smull	r1, r2, r2, r3
 80022d6:	1192      	asrs	r2, r2, #6
 80022d8:	17db      	asrs	r3, r3, #31
 80022da:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80022dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7f1b      	ldrb	r3, [r3, #28]
 80022ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80022ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d02c      	beq.n	8002350 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80022f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80022f8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80022fc:	fb02 f303 	mul.w	r3, r2, r3
 8002300:	121a      	asrs	r2, r3, #8
					<= 0) {
 8002302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8002304:	429a      	cmp	r2, r3
 8002306:	d10d      	bne.n	8002324 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8002308:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800230c:	2b00      	cmp	r3, #0
 800230e:	d004      	beq.n	800231a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8002310:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8002314:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002318:	e016      	b.n	8002348 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800231a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800231e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002322:	e011      	b.n	8002348 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8002324:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002328:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800232a:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800232e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002330:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8002334:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8002338:	121b      	asrs	r3, r3, #8
 800233a:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800233c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800233e:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8002344:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8002348:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800234c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8002350:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00d      	beq.n	8002374 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8002358:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8002364:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002368:	b2db      	uxtb	r3, r3
 800236a:	019b      	lsls	r3, r3, #6
 800236c:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	75da      	strb	r2, [r3, #23]
 8002372:	e006      	b.n	8002382 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800237a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2200      	movs	r2, #0
 8002380:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8002382:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002386:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800238a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f003 f9e5 	bl	8005768 <VL53L0X_get_pal_range_status>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80023ac:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d103      	bne.n	80023bc <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80023b4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80023bc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d12f      	bne.n	8002424 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f107 040c 	add.w	r4, r7, #12
 80023ca:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80023ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80023de:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80023e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80023ec:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80023f2:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80023f8:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80023fe:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8002404:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800240a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8002414:	f107 050c 	add.w	r5, r7, #12
 8002418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800241a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800241c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002420:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002424:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8002428:	4618      	mov	r0, r3
 800242a:	3750      	adds	r7, #80	; 0x50
 800242c:	46bd      	mov	sp, r7
 800242e:	bdb0      	pop	{r4, r5, r7, pc}
 8002430:	10624dd3 	.word	0x10624dd3

08002434 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8002442:	2100      	movs	r1, #0
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff f8d1 	bl	80015ec <VL53L0X_SetDeviceMode>
 800244a:	4603      	mov	r3, r0
 800244c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d104      	bne.n	8002460 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fd16 	bl	8001e88 <VL53L0X_PerformSingleMeasurement>
 800245c:	4603      	mov	r3, r0
 800245e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8002460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8002468:	6839      	ldr	r1, [r7, #0]
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff febe 	bl	80021ec <VL53L0X_GetRangingMeasurementData>
 8002470:	4603      	mov	r3, r0
 8002472:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8002474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800247c:	2100      	movs	r1, #0
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f962 	bl	8002748 <VL53L0X_ClearInterruptMask>
 8002484:	4603      	mov	r3, r0
 8002486:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8002488:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	4608      	mov	r0, r1
 800249e:	4611      	mov	r1, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	70fb      	strb	r3, [r7, #3]
 80024a6:	460b      	mov	r3, r1
 80024a8:	70bb      	strb	r3, [r7, #2]
 80024aa:	4613      	mov	r3, r2
 80024ac:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80024b8:	23f6      	movs	r3, #246	; 0xf6
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e107      	b.n	80026ce <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80024be:	78bb      	ldrb	r3, [r7, #2]
 80024c0:	2b14      	cmp	r3, #20
 80024c2:	d110      	bne.n	80024e6 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80024c4:	7e3b      	ldrb	r3, [r7, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80024ca:	2310      	movs	r3, #16
 80024cc:	73bb      	strb	r3, [r7, #14]
 80024ce:	e001      	b.n	80024d4 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80024d4:	7bbb      	ldrb	r3, [r7, #14]
 80024d6:	461a      	mov	r2, r3
 80024d8:	2184      	movs	r1, #132	; 0x84
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f003 fc62 	bl	8005da4 <VL53L0X_WrByte>
 80024e0:	4603      	mov	r3, r0
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	e0f3      	b.n	80026ce <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80024e6:	78bb      	ldrb	r3, [r7, #2]
 80024e8:	2b15      	cmp	r3, #21
 80024ea:	f040 8097 	bne.w	800261c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80024ee:	2201      	movs	r2, #1
 80024f0:	21ff      	movs	r1, #255	; 0xff
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f003 fc56 	bl	8005da4 <VL53L0X_WrByte>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	4313      	orrs	r3, r2
 8002500:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002502:	2200      	movs	r2, #0
 8002504:	2100      	movs	r1, #0
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f003 fc4c 	bl	8005da4 <VL53L0X_WrByte>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	4313      	orrs	r3, r2
 8002514:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002516:	2200      	movs	r2, #0
 8002518:	21ff      	movs	r1, #255	; 0xff
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f003 fc42 	bl	8005da4 <VL53L0X_WrByte>
 8002520:	4603      	mov	r3, r0
 8002522:	461a      	mov	r2, r3
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	4313      	orrs	r3, r2
 8002528:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800252a:	2201      	movs	r2, #1
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f003 fc38 	bl	8005da4 <VL53L0X_WrByte>
 8002534:	4603      	mov	r3, r0
 8002536:	461a      	mov	r2, r3
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	4313      	orrs	r3, r2
 800253c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800253e:	2202      	movs	r2, #2
 8002540:	2185      	movs	r1, #133	; 0x85
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f003 fc2e 	bl	8005da4 <VL53L0X_WrByte>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	4313      	orrs	r3, r2
 8002550:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8002552:	2204      	movs	r2, #4
 8002554:	21ff      	movs	r1, #255	; 0xff
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f003 fc24 	bl	8005da4 <VL53L0X_WrByte>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	4313      	orrs	r3, r2
 8002564:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8002566:	2200      	movs	r2, #0
 8002568:	21cd      	movs	r1, #205	; 0xcd
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f003 fc1a 	bl	8005da4 <VL53L0X_WrByte>
 8002570:	4603      	mov	r3, r0
 8002572:	461a      	mov	r2, r3
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	4313      	orrs	r3, r2
 8002578:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800257a:	2211      	movs	r2, #17
 800257c:	21cc      	movs	r1, #204	; 0xcc
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f003 fc10 	bl	8005da4 <VL53L0X_WrByte>
 8002584:	4603      	mov	r3, r0
 8002586:	461a      	mov	r2, r3
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	4313      	orrs	r3, r2
 800258c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800258e:	2207      	movs	r2, #7
 8002590:	21ff      	movs	r1, #255	; 0xff
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f003 fc06 	bl	8005da4 <VL53L0X_WrByte>
 8002598:	4603      	mov	r3, r0
 800259a:	461a      	mov	r2, r3
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	4313      	orrs	r3, r2
 80025a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80025a2:	2200      	movs	r2, #0
 80025a4:	21be      	movs	r1, #190	; 0xbe
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f003 fbfc 	bl	8005da4 <VL53L0X_WrByte>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80025b6:	2206      	movs	r2, #6
 80025b8:	21ff      	movs	r1, #255	; 0xff
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f003 fbf2 	bl	8005da4 <VL53L0X_WrByte>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80025ca:	2209      	movs	r2, #9
 80025cc:	21cc      	movs	r1, #204	; 0xcc
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f003 fbe8 	bl	8005da4 <VL53L0X_WrByte>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	4313      	orrs	r3, r2
 80025dc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80025de:	2200      	movs	r2, #0
 80025e0:	21ff      	movs	r1, #255	; 0xff
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f003 fbde 	bl	8005da4 <VL53L0X_WrByte>
 80025e8:	4603      	mov	r3, r0
 80025ea:	461a      	mov	r2, r3
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80025f2:	2201      	movs	r2, #1
 80025f4:	21ff      	movs	r1, #255	; 0xff
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f003 fbd4 	bl	8005da4 <VL53L0X_WrByte>
 80025fc:	4603      	mov	r3, r0
 80025fe:	461a      	mov	r2, r3
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	4313      	orrs	r3, r2
 8002604:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f003 fbca 	bl	8005da4 <VL53L0X_WrByte>
 8002610:	4603      	mov	r3, r0
 8002612:	461a      	mov	r2, r3
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	4313      	orrs	r3, r2
 8002618:	73fb      	strb	r3, [r7, #15]
 800261a:	e058      	b.n	80026ce <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800261c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d121      	bne.n	8002668 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b04      	cmp	r3, #4
 8002628:	d81b      	bhi.n	8002662 <VL53L0X_SetGpioConfig+0x1ce>
 800262a:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <VL53L0X_SetGpioConfig+0x19c>)
 800262c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002630:	08002645 	.word	0x08002645
 8002634:	0800264b 	.word	0x0800264b
 8002638:	08002651 	.word	0x08002651
 800263c:	08002657 	.word	0x08002657
 8002640:	0800265d 	.word	0x0800265d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8002644:	2300      	movs	r3, #0
 8002646:	73bb      	strb	r3, [r7, #14]
				break;
 8002648:	e00f      	b.n	800266a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800264a:	2301      	movs	r3, #1
 800264c:	73bb      	strb	r3, [r7, #14]
				break;
 800264e:	e00c      	b.n	800266a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8002650:	2302      	movs	r3, #2
 8002652:	73bb      	strb	r3, [r7, #14]
				break;
 8002654:	e009      	b.n	800266a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8002656:	2303      	movs	r3, #3
 8002658:	73bb      	strb	r3, [r7, #14]
				break;
 800265a:	e006      	b.n	800266a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800265c:	2304      	movs	r3, #4
 800265e:	73bb      	strb	r3, [r7, #14]
				break;
 8002660:	e003      	b.n	800266a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8002662:	23f5      	movs	r3, #245	; 0xf5
 8002664:	73fb      	strb	r3, [r7, #15]
 8002666:	e000      	b.n	800266a <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8002668:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800266a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d107      	bne.n	8002682 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8002672:	7bbb      	ldrb	r3, [r7, #14]
 8002674:	461a      	mov	r2, r3
 8002676:	210a      	movs	r1, #10
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f003 fb93 	bl	8005da4 <VL53L0X_WrByte>
 800267e:	4603      	mov	r3, r0
 8002680:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8002682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10f      	bne.n	80026aa <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800268a:	7e3b      	ldrb	r3, [r7, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	73bb      	strb	r3, [r7, #14]
 8002694:	e001      	b.n	800269a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8002696:	2310      	movs	r3, #16
 8002698:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800269a:	7bbb      	ldrb	r3, [r7, #14]
 800269c:	22ef      	movs	r2, #239	; 0xef
 800269e:	2184      	movs	r1, #132	; 0x84
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f003 fbcd 	bl	8005e40 <VL53L0X_UpdateByte>
 80026a6:	4603      	mov	r3, r0
 80026a8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80026aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	787a      	ldrb	r2, [r7, #1]
 80026b6:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80026ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d105      	bne.n	80026ce <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80026c2:	2100      	movs	r1, #0
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f83f 	bl	8002748 <VL53L0X_ClearInterruptMask>
 80026ca:	4603      	mov	r3, r0
 80026cc:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80026ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop

080026dc <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	460b      	mov	r3, r1
 80026ea:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	461a      	mov	r2, r3
 80026f6:	210e      	movs	r1, #14
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f003 fbff 	bl	8005efc <VL53L0X_RdWord>
 80026fe:	4603      	mov	r3, r0
 8002700:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8002702:	8abb      	ldrh	r3, [r7, #20]
 8002704:	045b      	lsls	r3, r3, #17
 8002706:	461a      	mov	r2, r3
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <VL53L0X_GetInterruptThresholds+0x68>)
 800270a:	4013      	ands	r3, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8002710:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10f      	bne.n	8002738 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	461a      	mov	r2, r3
 800271e:	210c      	movs	r1, #12
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f003 fbeb 	bl	8005efc <VL53L0X_RdWord>
 8002726:	4603      	mov	r3, r0
 8002728:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800272a:	8abb      	ldrh	r3, [r7, #20]
 800272c:	045b      	lsls	r3, r3, #17
 800272e:	461a      	mov	r2, r3
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <VL53L0X_GetInterruptThresholds+0x68>)
 8002732:	4013      	ands	r3, r2
		*pThresholdHigh =
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002738:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	1ffe0000 	.word	0x1ffe0000

08002748 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002752:	2300      	movs	r3, #0
 8002754:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800275a:	2201      	movs	r2, #1
 800275c:	210b      	movs	r1, #11
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f003 fb20 	bl	8005da4 <VL53L0X_WrByte>
 8002764:	4603      	mov	r3, r0
 8002766:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8002768:	2200      	movs	r2, #0
 800276a:	210b      	movs	r1, #11
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f003 fb19 	bl	8005da4 <VL53L0X_WrByte>
 8002772:	4603      	mov	r3, r0
 8002774:	461a      	mov	r2, r3
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	4313      	orrs	r3, r2
 800277a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800277c:	f107 030d 	add.w	r3, r7, #13
 8002780:	461a      	mov	r2, r3
 8002782:	2113      	movs	r1, #19
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f003 fb8f 	bl	8005ea8 <VL53L0X_RdByte>
 800278a:	4603      	mov	r3, r0
 800278c:	461a      	mov	r2, r3
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	4313      	orrs	r3, r2
 8002792:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8002794:	7bbb      	ldrb	r3, [r7, #14]
 8002796:	3301      	adds	r3, #1
 8002798:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800279a:	7b7b      	ldrb	r3, [r7, #13]
 800279c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d006      	beq.n	80027b2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80027a4:	7bbb      	ldrb	r3, [r7, #14]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d803      	bhi.n	80027b2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0d3      	beq.n	800275a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80027b2:	7bbb      	ldrb	r3, [r7, #14]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80027b8:	23f4      	movs	r3, #244	; 0xf4
 80027ba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80027bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80027d6:	f107 030e 	add.w	r3, r7, #14
 80027da:	461a      	mov	r2, r3
 80027dc:	2113      	movs	r1, #19
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f003 fb62 	bl	8005ea8 <VL53L0X_RdByte>
 80027e4:	4603      	mov	r3, r0
 80027e6:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80027e8:	7bbb      	ldrb	r3, [r7, #14]
 80027ea:	f003 0207 	and.w	r2, r3, #7
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80027f2:	7bbb      	ldrb	r3, [r7, #14]
 80027f4:	f003 0318 	and.w	r3, r3, #24
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80027fc:	23fa      	movs	r3, #250	; 0xfa
 80027fe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002800:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002818:	2300      	movs	r3, #0
 800281a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fa03 	bl	8002c2c <VL53L0X_perform_ref_spad_management>
 8002826:	4603      	mov	r3, r0
 8002828:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800282a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8002844:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002848:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800284a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800284e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8002850:	f107 0308 	add.w	r3, r7, #8
 8002854:	461a      	mov	r2, r3
 8002856:	2128      	movs	r1, #40	; 0x28
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f003 fb4f 	bl	8005efc <VL53L0X_RdWord>
 800285e:	4603      	mov	r3, r0
 8002860:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8002862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d11e      	bne.n	80028a8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800286a:	893b      	ldrh	r3, [r7, #8]
 800286c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002870:	b29b      	uxth	r3, r3
 8002872:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8002874:	893b      	ldrh	r3, [r7, #8]
 8002876:	461a      	mov	r2, r3
 8002878:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800287c:	429a      	cmp	r2, r3
 800287e:	dd0b      	ble.n	8002898 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8002880:	893a      	ldrh	r2, [r7, #8]
 8002882:	897b      	ldrh	r3, [r7, #10]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	b29b      	uxth	r3, r3
 8002888:	b21b      	sxth	r3, r3
 800288a:	461a      	mov	r2, r3
					* 250;
 800288c:	23fa      	movs	r3, #250	; 0xfa
 800288e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e007      	b.n	80028a8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8002898:	893b      	ldrh	r3, [r7, #8]
 800289a:	b21b      	sxth	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	23fa      	movs	r3, #250	; 0xfa
 80028a0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80028a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b08b      	sub	sp, #44	; 0x2c
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80028c2:	2308      	movs	r3, #8
 80028c4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295
 80028d0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80028e4:	69b9      	ldr	r1, [r7, #24]
 80028e6:	fb01 f202 	mul.w	r2, r1, r2
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
 80028f2:	e030      	b.n	8002956 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	4413      	add	r3, r2
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8002902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	429a      	cmp	r2, r3
 8002908:	d11e      	bne.n	8002948 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800290a:	7ffa      	ldrb	r2, [r7, #31]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	fa42 f303 	asr.w	r3, r2, r3
 8002912:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8002918:	e016      	b.n	8002948 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800291a:	7ffb      	ldrb	r3, [r7, #31]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00b      	beq.n	800293c <get_next_good_spad+0x88>
				success = 1;
 8002924:	2301      	movs	r3, #1
 8002926:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	fb03 f202 	mul.w	r2, r3, r2
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	4413      	add	r3, r2
 8002934:	461a      	mov	r2, r3
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	601a      	str	r2, [r3, #0]
				break;
 800293a:	e009      	b.n	8002950 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800293c:	7ffb      	ldrb	r3, [r7, #31]
 800293e:	085b      	lsrs	r3, r3, #1
 8002940:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	3301      	adds	r3, #1
 8002946:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8002948:	6a3a      	ldr	r2, [r7, #32]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	429a      	cmp	r2, r3
 800294e:	d3e4      	bcc.n	800291a <get_next_good_spad+0x66>
				coarseIndex++) {
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	3301      	adds	r3, #1
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8002956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	429a      	cmp	r2, r3
 800295c:	d202      	bcs.n	8002964 <get_next_good_spad+0xb0>
 800295e:	7fbb      	ldrb	r3, [r7, #30]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0c7      	beq.n	80028f4 <get_next_good_spad+0x40>
		}
	}
}
 8002964:	bf00      	nop
 8002966:	372c      	adds	r7, #44	; 0x2c
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	099b      	lsrs	r3, r3, #6
 8002980:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8002982:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <is_aperture+0x30>)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <is_aperture+0x22>
		isAperture = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8002992:	7bfb      	ldrb	r3, [r7, #15]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	200002ac 	.word	0x200002ac

080029a4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80029b4:	2308      	movs	r3, #8
 80029b6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80029ca:	69b9      	ldr	r1, [r7, #24]
 80029cc:	fb01 f202 	mul.w	r2, r1, r2
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d302      	bcc.n	80029e2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80029dc:	23ce      	movs	r3, #206	; 0xce
 80029de:	77fb      	strb	r3, [r7, #31]
 80029e0:	e010      	b.n	8002a04 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	4413      	add	r3, r2
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	b25a      	sxtb	r2, r3
 80029ec:	2101      	movs	r1, #1
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	fa01 f303 	lsl.w	r3, r1, r3
 80029f4:	b25b      	sxtb	r3, r3
 80029f6:	4313      	orrs	r3, r2
 80029f8:	b259      	sxtb	r1, r3
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	4413      	add	r3, r2
 8002a00:	b2ca      	uxtb	r2, r1
 8002a02:	701a      	strb	r2, [r3, #0]

	return status;
 8002a04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3724      	adds	r7, #36	; 0x24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8002a1e:	2306      	movs	r3, #6
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	21b0      	movs	r1, #176	; 0xb0
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f003 f961 	bl	8005cec <VL53L0X_WriteMulti>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8002a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8002a44:	2306      	movs	r3, #6
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	21b0      	movs	r1, #176	; 0xb0
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f003 f97e 	bl	8005d4c <VL53L0X_ReadMulti>
 8002a50:	4603      	mov	r3, r0
 8002a52:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8002a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08c      	sub	sp, #48	; 0x30
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8002a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a78:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8002a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8002a7e:	2300      	movs	r3, #0
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a82:	e02b      	b.n	8002adc <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8002a84:	f107 031c 	add.w	r3, r7, #28
 8002a88:	6a3a      	ldr	r2, [r7, #32]
 8002a8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff11 	bl	80028b4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d103      	bne.n	8002aa2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002a9a:	23ce      	movs	r3, #206	; 0xce
 8002a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002aa0:	e020      	b.n	8002ae4 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa8:	4413      	add	r3, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff60 	bl	8002970 <is_aperture>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	7afb      	ldrb	r3, [r7, #11]
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d003      	beq.n	8002ac2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002aba:	23ce      	movs	r3, #206	; 0xce
 8002abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002ac0:	e010      	b.n	8002ae4 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8002ac6:	6a3a      	ldr	r2, [r7, #32]
 8002ac8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002aca:	6838      	ldr	r0, [r7, #0]
 8002acc:	f7ff ff6a 	bl	80029a4 <enable_spad_bit>
		currentSpad++;
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	3301      	adds	r3, #1
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8002adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d3cf      	bcc.n	8002a84 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8002ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae6:	6a3a      	ldr	r2, [r7, #32]
 8002ae8:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8002aea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8002af2:	6839      	ldr	r1, [r7, #0]
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f7ff ff8d 	bl	8002a14 <set_ref_spad_map>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8002b00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d121      	bne.n	8002b4c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f7ff ff93 	bl	8002a3a <get_ref_spad_map>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8002b1e:	e011      	b.n	8002b44 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	4413      	add	r3, r2
 8002b26:	781a      	ldrb	r2, [r3, #0]
 8002b28:	f107 0114 	add.w	r1, r7, #20
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	440b      	add	r3, r1
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d003      	beq.n	8002b3e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002b36:	23ce      	movs	r3, #206	; 0xce
 8002b38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8002b3c:	e006      	b.n	8002b4c <enable_ref_spads+0xec>
			}
			i++;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	3301      	adds	r3, #1
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8002b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d3e9      	bcc.n	8002b20 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8002b4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3730      	adds	r7, #48	; 0x30
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002b74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8002b78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8002b80:	22c0      	movs	r2, #192	; 0xc0
 8002b82:	2101      	movs	r1, #1
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f003 f90d 	bl	8005da4 <VL53L0X_WrByte>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8002b90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d108      	bne.n	8002baa <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8002b98:	f107 0308 	add.w	r3, r7, #8
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff fc48 	bl	8002434 <VL53L0X_PerformSingleRangingMeasurement>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8002baa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d107      	bne.n	8002bc2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	21ff      	movs	r1, #255	; 0xff
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f003 f8f4 	bl	8005da4 <VL53L0X_WrByte>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8002bc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d107      	bne.n	8002bda <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	21b6      	movs	r1, #182	; 0xb6
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f003 f994 	bl	8005efc <VL53L0X_RdWord>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8002bda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d107      	bne.n	8002bf2 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002be2:	2200      	movs	r2, #0
 8002be4:	21ff      	movs	r1, #255	; 0xff
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f003 f8dc 	bl	8005da4 <VL53L0X_WrByte>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8002bf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d112      	bne.n	8002c20 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002bfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2101      	movs	r1, #1
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f003 f8ce 	bl	8005da4 <VL53L0X_WrByte>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8002c0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d104      	bne.n	8002c20 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002c1c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8002c20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3728      	adds	r7, #40	; 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b09d      	sub	sp, #116	; 0x74
 8002c30:	af06      	add	r7, sp, #24
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8002c3e:	23b4      	movs	r3, #180	; 0xb4
 8002c40:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8002c44:	2303      	movs	r3, #3
 8002c46:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8002c48:	232c      	movs	r3, #44	; 0x2c
 8002c4a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8002c58:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002c5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8002c66:	2306      	movs	r3, #6
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8002c90:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c96:	e009      	b.n	8002cac <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8002ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca8:	3301      	adds	r3, #1
 8002caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d3f1      	bcc.n	8002c98 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	21ff      	movs	r1, #255	; 0xff
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f003 f873 	bl	8005da4 <VL53L0X_WrByte>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8002cc4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d107      	bne.n	8002cdc <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8002ccc:	2200      	movs	r2, #0
 8002cce:	214f      	movs	r1, #79	; 0x4f
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f003 f867 	bl	8005da4 <VL53L0X_WrByte>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8002cdc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8002ce4:	222c      	movs	r2, #44	; 0x2c
 8002ce6:	214e      	movs	r1, #78	; 0x4e
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f003 f85b 	bl	8005da4 <VL53L0X_WrByte>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8002cf4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d107      	bne.n	8002d0c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	21ff      	movs	r1, #255	; 0xff
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f003 f84f 	bl	8005da4 <VL53L0X_WrByte>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8002d0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d109      	bne.n	8002d28 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8002d14:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002d18:	461a      	mov	r2, r3
 8002d1a:	21b6      	movs	r1, #182	; 0xb6
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f003 f841 	bl	8005da4 <VL53L0X_WrByte>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8002d28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8002d30:	2200      	movs	r2, #0
 8002d32:	2180      	movs	r1, #128	; 0x80
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f003 f835 	bl	8005da4 <VL53L0X_WrByte>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8002d40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10a      	bne.n	8002d5e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8002d48:	f107 0210 	add.w	r2, r7, #16
 8002d4c:	f107 0111 	add.w	r1, r7, #17
 8002d50:	2300      	movs	r3, #0
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fbbb 	bl	80034ce <VL53L0X_perform_ref_calibration>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8002d5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d121      	bne.n	8002daa <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8002d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8002d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d74:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8002d82:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002d86:	f107 0218 	add.w	r2, r7, #24
 8002d8a:	9204      	str	r2, [sp, #16]
 8002d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d8e:	9203      	str	r2, [sp, #12]
 8002d90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d92:	9202      	str	r2, [sp, #8]
 8002d94:	9301      	str	r3, [sp, #4]
 8002d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	4623      	mov	r3, r4
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f7ff fe5e 	bl	8002a60 <enable_ref_spads>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002daa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d174      	bne.n	8002e9c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8002db6:	f107 0312 	add.w	r3, r7, #18
 8002dba:	4619      	mov	r1, r3
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f7ff fecb 	bl	8002b58 <perform_ref_signal_measurement>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8002dc8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d161      	bne.n	8002e94 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8002dd0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8002dd2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d25d      	bcs.n	8002e94 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8002dd8:	2300      	movs	r3, #0
 8002dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ddc:	e009      	b.n	8002df2 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8002dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dee:	3301      	adds	r3, #1
 8002df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002df2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d3f1      	bcc.n	8002dde <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8002dfa:	e002      	b.n	8002e02 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8002dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dfe:	3301      	adds	r3, #1
 8002e00:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8002e02:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e08:	4413      	add	r3, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fdb0 	bl	8002970 <is_aperture>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d103      	bne.n	8002e1e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8002e16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d3ee      	bcc.n	8002dfc <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8002e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e24:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8002e32:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002e36:	f107 0218 	add.w	r2, r7, #24
 8002e3a:	9204      	str	r2, [sp, #16]
 8002e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e3e:	9203      	str	r2, [sp, #12]
 8002e40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e42:	9202      	str	r2, [sp, #8]
 8002e44:	9301      	str	r3, [sp, #4]
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	4623      	mov	r3, r4
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7ff fe06 	bl	8002a60 <enable_ref_spads>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8002e5a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d11b      	bne.n	8002e9a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8002e66:	f107 0312 	add.w	r3, r7, #18
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f7ff fe73 	bl	8002b58 <perform_ref_signal_measurement>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8002e78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10c      	bne.n	8002e9a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8002e80:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8002e82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d208      	bcs.n	8002e9a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8002e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e90:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8002e92:	e002      	b.n	8002e9a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e98:	e000      	b.n	8002e9c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8002e9a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8002e9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f040 80af 	bne.w	8003004 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8002ea6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8002ea8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	f240 80aa 	bls.w	8003004 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8002eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb8:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8002ec0:	f107 031c 	add.w	r3, r7, #28
 8002ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f006 fe4c 	bl	8009b64 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8002ecc:	8a7b      	ldrh	r3, [r7, #18]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bfb8      	it	lt
 8002ed8:	425b      	neglt	r3, r3
 8002eda:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8002ee2:	e086      	b.n	8002ff2 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ef2:	f7ff fcdf 	bl	80028b4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d103      	bne.n	8002f06 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002efe:	23ce      	movs	r3, #206	; 0xce
 8002f00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8002f04:	e07e      	b.n	8003004 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8002f06:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fd2e 	bl	8002970 <is_aperture>
 8002f14:	4603      	mov	r3, r0
 8002f16:	461a      	mov	r2, r3
 8002f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8002f24:	e06e      	b.n	8003004 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8002f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f28:	3301      	adds	r3, #1
 8002f2a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8002f36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fd32 	bl	80029a4 <enable_spad_bit>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8002f46:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10c      	bne.n	8002f68 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8002f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f50:	3301      	adds	r3, #1
 8002f52:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f7ff fd59 	bl	8002a14 <set_ref_spad_map>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8002f68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d146      	bne.n	8002ffe <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8002f70:	f107 0312 	add.w	r3, r7, #18
 8002f74:	4619      	mov	r1, r3
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f7ff fdee 	bl	8002b58 <perform_ref_signal_measurement>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8002f82:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d13b      	bne.n	8003002 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8002f8a:	8a7b      	ldrh	r3, [r7, #18]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bfb8      	it	lt
 8002f96:	425b      	neglt	r3, r3
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8002f9a:	8a7b      	ldrh	r3, [r7, #18]
 8002f9c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d21c      	bcs.n	8002fdc <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8002fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d914      	bls.n	8002fd4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8002faa:	f107 031c 	add.w	r3, r7, #28
 8002fae:	4619      	mov	r1, r3
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f7ff fd2f 	bl	8002a14 <set_ref_spad_map>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8002fc2:	f107 011c 	add.w	r1, r7, #28
 8002fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f006 fdcb 	bl	8009b64 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8002fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002fda:	e00a      	b.n	8002ff2 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8002fe6:	f107 031c 	add.w	r3, r7, #28
 8002fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fec:	4618      	mov	r0, r3
 8002fee:	f006 fdb9 	bl	8009b64 <memcpy>
		while (!complete) {
 8002ff2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f43f af74 	beq.w	8002ee4 <VL53L0X_perform_ref_spad_management+0x2b8>
 8002ffc:	e002      	b.n	8003004 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003002:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003004:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003008:	2b00      	cmp	r3, #0
 800300a:	d115      	bne.n	8003038 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003010:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003018:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8003038:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800303c:	4618      	mov	r0, r3
 800303e:	375c      	adds	r7, #92	; 0x5c
 8003040:	46bd      	mov	sp, r7
 8003042:	bd90      	pop	{r4, r7, pc}

08003044 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b093      	sub	sp, #76	; 0x4c
 8003048:	af06      	add	r7, sp, #24
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	4613      	mov	r3, r2
 8003050:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003052:	2300      	movs	r3, #0
 8003054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800305c:	23b4      	movs	r3, #180	; 0xb4
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8003062:	2306      	movs	r3, #6
 8003064:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8003066:	232c      	movs	r3, #44	; 0x2c
 8003068:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800306a:	2201      	movs	r2, #1
 800306c:	21ff      	movs	r1, #255	; 0xff
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f002 fe98 	bl	8005da4 <VL53L0X_WrByte>
 8003074:	4603      	mov	r3, r0
 8003076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800307a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800307e:	2b00      	cmp	r3, #0
 8003080:	d107      	bne.n	8003092 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8003082:	2200      	movs	r2, #0
 8003084:	214f      	movs	r1, #79	; 0x4f
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f002 fe8c 	bl	8005da4 <VL53L0X_WrByte>
 800308c:	4603      	mov	r3, r0
 800308e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003092:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003096:	2b00      	cmp	r3, #0
 8003098:	d107      	bne.n	80030aa <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800309a:	222c      	movs	r2, #44	; 0x2c
 800309c:	214e      	movs	r1, #78	; 0x4e
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f002 fe80 	bl	8005da4 <VL53L0X_WrByte>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80030aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d107      	bne.n	80030c2 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80030b2:	2200      	movs	r2, #0
 80030b4:	21ff      	movs	r1, #255	; 0xff
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f002 fe74 	bl	8005da4 <VL53L0X_WrByte>
 80030bc:	4603      	mov	r3, r0
 80030be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80030c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80030ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030ce:	461a      	mov	r2, r3
 80030d0:	21b6      	movs	r1, #182	; 0xb6
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f002 fe66 	bl	8005da4 <VL53L0X_WrByte>
 80030d8:	4603      	mov	r3, r0
 80030da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
 80030e2:	e009      	b.n	80030f8 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	3301      	adds	r3, #1
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
 80030f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d3f1      	bcc.n	80030e4 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d011      	beq.n	800312a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8003106:	e002      	b.n	800310e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8003108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310a:	3301      	adds	r3, #1
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800310e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003114:	4413      	add	r3, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fc2a 	bl	8002970 <is_aperture>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d103      	bne.n	800312a <VL53L0X_set_reference_spads+0xe6>
 8003122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	429a      	cmp	r2, r3
 8003128:	d3ee      	bcc.n	8003108 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8003136:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800313a:	79f9      	ldrb	r1, [r7, #7]
 800313c:	f107 0214 	add.w	r2, r7, #20
 8003140:	9204      	str	r2, [sp, #16]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	9203      	str	r2, [sp, #12]
 8003146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003148:	9202      	str	r2, [sp, #8]
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	4623      	mov	r3, r4
 8003152:	4602      	mov	r2, r0
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f7ff fc83 	bl	8002a60 <enable_ref_spads>
 800315a:	4603      	mov	r3, r0
 800315c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8003160:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10c      	bne.n	8003182 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	79fa      	ldrb	r2, [r7, #7]
 800317e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8003182:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003186:	4618      	mov	r0, r3
 8003188:	3734      	adds	r7, #52	; 0x34
 800318a:	46bd      	mov	sp, r7
 800318c:	bd90      	pop	{r4, r7, pc}

0800318e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800319e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	2100      	movs	r1, #0
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f002 fdf6 	bl	8005da4 <VL53L0X_WrByte>
 80031b8:	4603      	mov	r3, r0
 80031ba:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80031bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d104      	bne.n	80031ce <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f9bf 	bl	8003548 <VL53L0X_measurement_poll_for_completion>
 80031ca:	4603      	mov	r3, r0
 80031cc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80031ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d105      	bne.n	80031e2 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80031d6:	2100      	movs	r1, #0
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff fab5 	bl	8002748 <VL53L0X_ClearInterruptMask>
 80031de:	4603      	mov	r3, r0
 80031e0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80031e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f002 fdd8 	bl	8005da4 <VL53L0X_WrByte>
 80031f4:	4603      	mov	r3, r0
 80031f6:	73fb      	strb	r3, [r7, #15]

	return Status;
 80031f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	4608      	mov	r0, r1
 800320e:	4611      	mov	r1, r2
 8003210:	461a      	mov	r2, r3
 8003212:	4603      	mov	r3, r0
 8003214:	70fb      	strb	r3, [r7, #3]
 8003216:	460b      	mov	r3, r1
 8003218:	70bb      	strb	r3, [r7, #2]
 800321a:	4613      	mov	r3, r2
 800321c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003226:	2201      	movs	r2, #1
 8003228:	21ff      	movs	r1, #255	; 0xff
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f002 fdba 	bl	8005da4 <VL53L0X_WrByte>
 8003230:	4603      	mov	r3, r0
 8003232:	461a      	mov	r2, r3
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	4313      	orrs	r3, r2
 8003238:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800323a:	2200      	movs	r2, #0
 800323c:	2100      	movs	r1, #0
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f002 fdb0 	bl	8005da4 <VL53L0X_WrByte>
 8003244:	4603      	mov	r3, r0
 8003246:	461a      	mov	r2, r3
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	4313      	orrs	r3, r2
 800324c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800324e:	2200      	movs	r2, #0
 8003250:	21ff      	movs	r1, #255	; 0xff
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f002 fda6 	bl	8005da4 <VL53L0X_WrByte>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	4313      	orrs	r3, r2
 8003260:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01e      	beq.n	80032a6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8003268:	f897 3020 	ldrb.w	r3, [r7, #32]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d009      	beq.n	8003284 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	21cb      	movs	r1, #203	; 0xcb
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f002 fe17 	bl	8005ea8 <VL53L0X_RdByte>
 800327a:	4603      	mov	r3, r0
 800327c:	461a      	mov	r2, r3
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	4313      	orrs	r3, r2
 8003282:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8003284:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02a      	beq.n	80032e2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800328c:	f107 030e 	add.w	r3, r7, #14
 8003290:	461a      	mov	r2, r3
 8003292:	21ee      	movs	r1, #238	; 0xee
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f002 fe07 	bl	8005ea8 <VL53L0X_RdByte>
 800329a:	4603      	mov	r3, r0
 800329c:	461a      	mov	r2, r3
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	73fb      	strb	r3, [r7, #15]
 80032a4:	e01d      	b.n	80032e2 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80032a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80032ae:	78bb      	ldrb	r3, [r7, #2]
 80032b0:	461a      	mov	r2, r3
 80032b2:	21cb      	movs	r1, #203	; 0xcb
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f002 fd75 	bl	8005da4 <VL53L0X_WrByte>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80032c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80032cc:	787b      	ldrb	r3, [r7, #1]
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	21ee      	movs	r1, #238	; 0xee
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f002 fdb4 	bl	8005e40 <VL53L0X_UpdateByte>
 80032d8:	4603      	mov	r3, r0
 80032da:	461a      	mov	r2, r3
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	4313      	orrs	r3, r2
 80032e0:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80032e2:	2201      	movs	r2, #1
 80032e4:	21ff      	movs	r1, #255	; 0xff
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f002 fd5c 	bl	8005da4 <VL53L0X_WrByte>
 80032ec:	4603      	mov	r3, r0
 80032ee:	461a      	mov	r2, r3
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80032f6:	2201      	movs	r2, #1
 80032f8:	2100      	movs	r1, #0
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f002 fd52 	bl	8005da4 <VL53L0X_WrByte>
 8003300:	4603      	mov	r3, r0
 8003302:	461a      	mov	r2, r3
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	4313      	orrs	r3, r2
 8003308:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800330a:	2200      	movs	r2, #0
 800330c:	21ff      	movs	r1, #255	; 0xff
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f002 fd48 	bl	8005da4 <VL53L0X_WrByte>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	4313      	orrs	r3, r2
 800331c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800331e:	7bbb      	ldrb	r3, [r7, #14]
 8003320:	f023 0310 	bic.w	r3, r3, #16
 8003324:	b2da      	uxtb	r2, r3
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	701a      	strb	r2, [r3, #0]

	return Status;
 800332a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b08a      	sub	sp, #40	; 0x28
 800333a:	af04      	add	r7, sp, #16
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	4611      	mov	r1, r2
 8003342:	461a      	mov	r2, r3
 8003344:	460b      	mov	r3, r1
 8003346:	71fb      	strb	r3, [r7, #7]
 8003348:	4613      	mov	r3, r2
 800334a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800334c:	2300      	movs	r3, #0
 800334e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8003360:	79bb      	ldrb	r3, [r7, #6]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800336c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800336e:	2201      	movs	r2, #1
 8003370:	2101      	movs	r1, #1
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f002 fd16 	bl	8005da4 <VL53L0X_WrByte>
 8003378:	4603      	mov	r3, r0
 800337a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800337c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d105      	bne.n	8003390 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8003384:	2140      	movs	r1, #64	; 0x40
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f7ff ff01 	bl	800318e <VL53L0X_perform_single_ref_calibration>
 800338c:	4603      	mov	r3, r0
 800338e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8003390:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d115      	bne.n	80033c4 <VL53L0X_perform_vhv_calibration+0x8e>
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d112      	bne.n	80033c4 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800339e:	7d39      	ldrb	r1, [r7, #20]
 80033a0:	7d7a      	ldrb	r2, [r7, #21]
 80033a2:	2300      	movs	r3, #0
 80033a4:	9303      	str	r3, [sp, #12]
 80033a6:	2301      	movs	r3, #1
 80033a8:	9302      	str	r3, [sp, #8]
 80033aa:	f107 0313 	add.w	r3, r7, #19
 80033ae:	9301      	str	r3, [sp, #4]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	460b      	mov	r3, r1
 80033b6:	2101      	movs	r1, #1
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f7ff ff23 	bl	8003204 <VL53L0X_ref_calibration_io>
 80033be:	4603      	mov	r3, r0
 80033c0:	75fb      	strb	r3, [r7, #23]
 80033c2:	e002      	b.n	80033ca <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80033ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d112      	bne.n	80033f8 <VL53L0X_perform_vhv_calibration+0xc2>
 80033d2:	79bb      	ldrb	r3, [r7, #6]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00f      	beq.n	80033f8 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80033d8:	7dbb      	ldrb	r3, [r7, #22]
 80033da:	461a      	mov	r2, r3
 80033dc:	2101      	movs	r1, #1
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f002 fce0 	bl	8005da4 <VL53L0X_WrByte>
 80033e4:	4603      	mov	r3, r0
 80033e6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80033e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d103      	bne.n	80033f8 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	7dba      	ldrb	r2, [r7, #22]
 80033f4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80033f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08a      	sub	sp, #40	; 0x28
 8003408:	af04      	add	r7, sp, #16
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	4611      	mov	r1, r2
 8003410:	461a      	mov	r2, r3
 8003412:	460b      	mov	r3, r1
 8003414:	71fb      	strb	r3, [r7, #7]
 8003416:	4613      	mov	r3, r2
 8003418:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800342a:	79bb      	ldrb	r3, [r7, #6]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003436:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8003438:	2202      	movs	r2, #2
 800343a:	2101      	movs	r1, #1
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f002 fcb1 	bl	8005da4 <VL53L0X_WrByte>
 8003442:	4603      	mov	r3, r0
 8003444:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8003446:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d105      	bne.n	800345a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800344e:	2100      	movs	r1, #0
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff fe9c 	bl	800318e <VL53L0X_perform_single_ref_calibration>
 8003456:	4603      	mov	r3, r0
 8003458:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800345a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d115      	bne.n	800348e <VL53L0X_perform_phase_calibration+0x8a>
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d112      	bne.n	800348e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8003468:	7d39      	ldrb	r1, [r7, #20]
 800346a:	7d7a      	ldrb	r2, [r7, #21]
 800346c:	2301      	movs	r3, #1
 800346e:	9303      	str	r3, [sp, #12]
 8003470:	2300      	movs	r3, #0
 8003472:	9302      	str	r3, [sp, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	f107 0313 	add.w	r3, r7, #19
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	460b      	mov	r3, r1
 8003480:	2101      	movs	r1, #1
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f7ff febe 	bl	8003204 <VL53L0X_ref_calibration_io>
 8003488:	4603      	mov	r3, r0
 800348a:	75fb      	strb	r3, [r7, #23]
 800348c:	e002      	b.n	8003494 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8003494:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d112      	bne.n	80034c2 <VL53L0X_perform_phase_calibration+0xbe>
 800349c:	79bb      	ldrb	r3, [r7, #6]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00f      	beq.n	80034c2 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80034a2:	7dbb      	ldrb	r3, [r7, #22]
 80034a4:	461a      	mov	r2, r3
 80034a6:	2101      	movs	r1, #1
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f002 fc7b 	bl	8005da4 <VL53L0X_WrByte>
 80034ae:	4603      	mov	r3, r0
 80034b0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80034b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d103      	bne.n	80034c2 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	7dba      	ldrb	r2, [r7, #22]
 80034be:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80034c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b086      	sub	sp, #24
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034dc:	2300      	movs	r3, #0
 80034de:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80034ea:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	2300      	movs	r3, #0
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f7ff ff1f 	bl	8003336 <VL53L0X_perform_vhv_calibration>
 80034f8:	4603      	mov	r3, r0
 80034fa:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80034fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d107      	bne.n	8003514 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	2300      	movs	r3, #0
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7ff ff7a 	bl	8003404 <VL53L0X_perform_phase_calibration>
 8003510:	4603      	mov	r3, r0
 8003512:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8003514:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10f      	bne.n	800353c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800351c:	7dbb      	ldrb	r3, [r7, #22]
 800351e:	461a      	mov	r2, r3
 8003520:	2101      	movs	r1, #1
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f002 fc3e 	bl	8005da4 <VL53L0X_WrByte>
 8003528:	4603      	mov	r3, r0
 800352a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800352c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d103      	bne.n	800353c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	7dba      	ldrb	r2, [r7, #22]
 8003538:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800353c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003550:	2300      	movs	r3, #0
 8003552:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800355c:	f107 030f 	add.w	r3, r7, #15
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fe fe02 	bl	800216c <VL53L0X_GetMeasurementDataReady>
 8003568:	4603      	mov	r3, r0
 800356a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800356c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d110      	bne.n	8003596 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d00f      	beq.n	800359a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	3301      	adds	r3, #1
 800357e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003586:	d302      	bcc.n	800358e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8003588:	23f9      	movs	r3, #249	; 0xf9
 800358a:	75fb      	strb	r3, [r7, #23]
			break;
 800358c:	e006      	b.n	800359c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f002 fd28 	bl	8005fe4 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8003594:	e7e2      	b.n	800355c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8003596:	bf00      	nop
 8003598:	e000      	b.n	800359c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800359a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800359c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	3301      	adds	r3, #1
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b085      	sub	sp, #20
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	4603      	mov	r3, r0
 80035d6:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	085b      	lsrs	r3, r3, #1
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8003600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003604:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8003606:	e002      	b.n	800360e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	089b      	lsrs	r3, r3, #2
 800360c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	429a      	cmp	r2, r3
 8003614:	d8f8      	bhi.n	8003608 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8003616:	e017      	b.n	8003648 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4413      	add	r3, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	429a      	cmp	r2, r3
 8003622:	d30b      	bcc.n	800363c <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4413      	add	r3, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	4413      	add	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	e002      	b.n	8003642 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1e4      	bne.n	8003618 <VL53L0X_isqrt+0x24>
	}

	return res;
 800364e:	68fb      	ldr	r3, [r7, #12]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003664:	2300      	movs	r3, #0
 8003666:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8003668:	2200      	movs	r2, #0
 800366a:	2183      	movs	r1, #131	; 0x83
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f002 fb99 	bl	8005da4 <VL53L0X_WrByte>
 8003672:	4603      	mov	r3, r0
 8003674:	461a      	mov	r2, r3
 8003676:	7dfb      	ldrb	r3, [r7, #23]
 8003678:	4313      	orrs	r3, r2
 800367a:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800367c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d11e      	bne.n	80036c2 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8003688:	f107 030f 	add.w	r3, r7, #15
 800368c:	461a      	mov	r2, r3
 800368e:	2183      	movs	r1, #131	; 0x83
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f002 fc09 	bl	8005ea8 <VL53L0X_RdByte>
 8003696:	4603      	mov	r3, r0
 8003698:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10a      	bne.n	80036b6 <VL53L0X_device_read_strobe+0x5a>
 80036a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	3301      	adds	r3, #1
 80036ac:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80036b4:	d3e8      	bcc.n	8003688 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80036bc:	d301      	bcc.n	80036c2 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80036be:	23f9      	movs	r3, #249	; 0xf9
 80036c0:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80036c2:	2201      	movs	r2, #1
 80036c4:	2183      	movs	r1, #131	; 0x83
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f002 fb6c 	bl	8005da4 <VL53L0X_WrByte>
 80036cc:	4603      	mov	r3, r0
 80036ce:	461a      	mov	r2, r3
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80036d6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b098      	sub	sp, #96	; 0x60
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	460b      	mov	r3, r1
 80036ec:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8003712:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003716:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800372a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800372e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003732:	2b07      	cmp	r3, #7
 8003734:	f000 8408 	beq.w	8003f48 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003738:	2201      	movs	r2, #1
 800373a:	2180      	movs	r1, #128	; 0x80
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f002 fb31 	bl	8005da4 <VL53L0X_WrByte>
 8003742:	4603      	mov	r3, r0
 8003744:	461a      	mov	r2, r3
 8003746:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800374a:	4313      	orrs	r3, r2
 800374c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003750:	2201      	movs	r2, #1
 8003752:	21ff      	movs	r1, #255	; 0xff
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f002 fb25 	bl	8005da4 <VL53L0X_WrByte>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003762:	4313      	orrs	r3, r2
 8003764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003768:	2200      	movs	r2, #0
 800376a:	2100      	movs	r1, #0
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f002 fb19 	bl	8005da4 <VL53L0X_WrByte>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800377a:	4313      	orrs	r3, r2
 800377c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003780:	2206      	movs	r2, #6
 8003782:	21ff      	movs	r1, #255	; 0xff
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f002 fb0d 	bl	8005da4 <VL53L0X_WrByte>
 800378a:	4603      	mov	r3, r0
 800378c:	461a      	mov	r2, r3
 800378e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003792:	4313      	orrs	r3, r2
 8003794:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003798:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800379c:	461a      	mov	r2, r3
 800379e:	2183      	movs	r1, #131	; 0x83
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f002 fb81 	bl	8005ea8 <VL53L0X_RdByte>
 80037a6:	4603      	mov	r3, r0
 80037a8:	461a      	mov	r2, r3
 80037aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80037b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80037b8:	f043 0304 	orr.w	r3, r3, #4
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	2183      	movs	r1, #131	; 0x83
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f002 faee 	bl	8005da4 <VL53L0X_WrByte>
 80037c8:	4603      	mov	r3, r0
 80037ca:	461a      	mov	r2, r3
 80037cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80037d6:	2207      	movs	r2, #7
 80037d8:	21ff      	movs	r1, #255	; 0xff
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f002 fae2 	bl	8005da4 <VL53L0X_WrByte>
 80037e0:	4603      	mov	r3, r0
 80037e2:	461a      	mov	r2, r3
 80037e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80037ee:	2201      	movs	r2, #1
 80037f0:	2181      	movs	r1, #129	; 0x81
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f002 fad6 	bl	8005da4 <VL53L0X_WrByte>
 80037f8:	4603      	mov	r3, r0
 80037fa:	461a      	mov	r2, r3
 80037fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003800:	4313      	orrs	r3, r2
 8003802:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f002 fbec 	bl	8005fe4 <VL53L0X_PollingDelay>
 800380c:	4603      	mov	r3, r0
 800380e:	461a      	mov	r2, r3
 8003810:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003814:	4313      	orrs	r3, r2
 8003816:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800381a:	2201      	movs	r2, #1
 800381c:	2180      	movs	r1, #128	; 0x80
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f002 fac0 	bl	8005da4 <VL53L0X_WrByte>
 8003824:	4603      	mov	r3, r0
 8003826:	461a      	mov	r2, r3
 8003828:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800382c:	4313      	orrs	r3, r2
 800382e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8003832:	78fb      	ldrb	r3, [r7, #3]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8098 	beq.w	800396e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800383e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003842:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8003846:	2b00      	cmp	r3, #0
 8003848:	f040 8091 	bne.w	800396e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800384c:	226b      	movs	r2, #107	; 0x6b
 800384e:	2194      	movs	r1, #148	; 0x94
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f002 faa7 	bl	8005da4 <VL53L0X_WrByte>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800385e:	4313      	orrs	r3, r2
 8003860:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff fef9 	bl	800365c <VL53L0X_device_read_strobe>
 800386a:	4603      	mov	r3, r0
 800386c:	461a      	mov	r2, r3
 800386e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003872:	4313      	orrs	r3, r2
 8003874:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003878:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800387c:	461a      	mov	r2, r3
 800387e:	2190      	movs	r1, #144	; 0x90
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f002 fb73 	bl	8005f6c <VL53L0X_RdDWord>
 8003886:	4603      	mov	r3, r0
 8003888:	461a      	mov	r2, r3
 800388a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800388e:	4313      	orrs	r3, r2
 8003890:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800389e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	0bdb      	lsrs	r3, r3, #15
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80038b0:	2224      	movs	r2, #36	; 0x24
 80038b2:	2194      	movs	r1, #148	; 0x94
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f002 fa75 	bl	8005da4 <VL53L0X_WrByte>
 80038ba:	4603      	mov	r3, r0
 80038bc:	461a      	mov	r2, r3
 80038be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fec7 	bl	800365c <VL53L0X_device_read_strobe>
 80038ce:	4603      	mov	r3, r0
 80038d0:	461a      	mov	r2, r3
 80038d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80038dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038e0:	461a      	mov	r2, r3
 80038e2:	2190      	movs	r1, #144	; 0x90
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f002 fb41 	bl	8005f6c <VL53L0X_RdDWord>
 80038ea:	4603      	mov	r3, r0
 80038ec:	461a      	mov	r2, r3
 80038ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	0e1b      	lsrs	r3, r3, #24
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	0c1b      	lsrs	r3, r3, #16
 8003904:	b2db      	uxtb	r3, r3
 8003906:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	b2db      	uxtb	r3, r3
 800390e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	b2db      	uxtb	r3, r3
 8003914:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8003916:	2225      	movs	r2, #37	; 0x25
 8003918:	2194      	movs	r1, #148	; 0x94
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f002 fa42 	bl	8005da4 <VL53L0X_WrByte>
 8003920:	4603      	mov	r3, r0
 8003922:	461a      	mov	r2, r3
 8003924:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003928:	4313      	orrs	r3, r2
 800392a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff fe94 	bl	800365c <VL53L0X_device_read_strobe>
 8003934:	4603      	mov	r3, r0
 8003936:	461a      	mov	r2, r3
 8003938:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800393c:	4313      	orrs	r3, r2
 800393e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003942:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003946:	461a      	mov	r2, r3
 8003948:	2190      	movs	r1, #144	; 0x90
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f002 fb0e 	bl	8005f6c <VL53L0X_RdDWord>
 8003950:	4603      	mov	r3, r0
 8003952:	461a      	mov	r2, r3
 8003954:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003958:	4313      	orrs	r3, r2
 800395a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	0e1b      	lsrs	r3, r3, #24
 8003962:	b2db      	uxtb	r3, r3
 8003964:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	b2db      	uxtb	r3, r3
 800396c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8189 	beq.w	8003c8c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800397a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800397e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8003982:	2b00      	cmp	r3, #0
 8003984:	f040 8182 	bne.w	8003c8c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8003988:	2202      	movs	r2, #2
 800398a:	2194      	movs	r1, #148	; 0x94
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f002 fa09 	bl	8005da4 <VL53L0X_WrByte>
 8003992:	4603      	mov	r3, r0
 8003994:	461a      	mov	r2, r3
 8003996:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800399a:	4313      	orrs	r3, r2
 800399c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff fe5b 	bl	800365c <VL53L0X_device_read_strobe>
 80039a6:	4603      	mov	r3, r0
 80039a8:	461a      	mov	r2, r3
 80039aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80039b4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80039b8:	461a      	mov	r2, r3
 80039ba:	2190      	movs	r1, #144	; 0x90
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f002 fa73 	bl	8005ea8 <VL53L0X_RdByte>
 80039c2:	4603      	mov	r3, r0
 80039c4:	461a      	mov	r2, r3
 80039c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80039d0:	227b      	movs	r2, #123	; 0x7b
 80039d2:	2194      	movs	r1, #148	; 0x94
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f002 f9e5 	bl	8005da4 <VL53L0X_WrByte>
 80039da:	4603      	mov	r3, r0
 80039dc:	461a      	mov	r2, r3
 80039de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff fe37 	bl	800365c <VL53L0X_device_read_strobe>
 80039ee:	4603      	mov	r3, r0
 80039f0:	461a      	mov	r2, r3
 80039f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80039fc:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8003a00:	461a      	mov	r2, r3
 8003a02:	2190      	movs	r1, #144	; 0x90
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f002 fa4f 	bl	8005ea8 <VL53L0X_RdByte>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8003a18:	2277      	movs	r2, #119	; 0x77
 8003a1a:	2194      	movs	r1, #148	; 0x94
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f002 f9c1 	bl	8005da4 <VL53L0X_WrByte>
 8003a22:	4603      	mov	r3, r0
 8003a24:	461a      	mov	r2, r3
 8003a26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fe13 	bl	800365c <VL53L0X_device_read_strobe>
 8003a36:	4603      	mov	r3, r0
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003a44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2190      	movs	r1, #144	; 0x90
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f002 fa8d 	bl	8005f6c <VL53L0X_RdDWord>
 8003a52:	4603      	mov	r3, r0
 8003a54:	461a      	mov	r2, r3
 8003a56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8003a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a62:	0e5b      	lsrs	r3, r3, #25
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	0c9b      	lsrs	r3, r3, #18
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7e:	0adb      	lsrs	r3, r3, #11
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003aaa:	2278      	movs	r2, #120	; 0x78
 8003aac:	2194      	movs	r1, #148	; 0x94
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f002 f978 	bl	8005da4 <VL53L0X_WrByte>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff fdca 	bl	800365c <VL53L0X_device_read_strobe>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	461a      	mov	r2, r3
 8003acc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ada:	461a      	mov	r2, r3
 8003adc:	2190      	movs	r1, #144	; 0x90
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f002 fa44 	bl	8005f6c <VL53L0X_RdDWord>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	0f5b      	lsrs	r3, r3, #29
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003afc:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8003afe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003b02:	4413      	add	r3, r2
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	0d9b      	lsrs	r3, r3, #22
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8003b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b18:	0bdb      	lsrs	r3, r3, #15
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	0a1b      	lsrs	r3, r3, #8
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	085b      	lsrs	r3, r3, #1
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	019b      	lsls	r3, r3, #6
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003b52:	2279      	movs	r2, #121	; 0x79
 8003b54:	2194      	movs	r1, #148	; 0x94
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f002 f924 	bl	8005da4 <VL53L0X_WrByte>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff fd76 	bl	800365c <VL53L0X_device_read_strobe>
 8003b70:	4603      	mov	r3, r0
 8003b72:	461a      	mov	r2, r3
 8003b74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003b7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b82:	461a      	mov	r2, r3
 8003b84:	2190      	movs	r1, #144	; 0x90
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f002 f9f0 	bl	8005f6c <VL53L0X_RdDWord>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	0e9b      	lsrs	r3, r3, #26
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ba4:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8003ba6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003baa:	4413      	add	r3, r2
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	0cdb      	lsrs	r3, r3, #19
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	0b1b      	lsrs	r3, r3, #12
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8003bec:	227a      	movs	r2, #122	; 0x7a
 8003bee:	2194      	movs	r1, #148	; 0x94
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f002 f8d7 	bl	8005da4 <VL53L0X_WrByte>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff fd29 	bl	800365c <VL53L0X_device_read_strobe>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003c18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	2190      	movs	r1, #144	; 0x90
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f002 f9a3 	bl	8005f6c <VL53L0X_RdDWord>
 8003c26:	4603      	mov	r3, r0
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	0f9b      	lsrs	r3, r3, #30
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c3e:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8003c40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c44:	4413      	add	r3, r2
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	0ddb      	lsrs	r3, r3, #23
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	0c1b      	lsrs	r3, r3, #16
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	0a5b      	lsrs	r3, r3, #9
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8003c86:	2300      	movs	r3, #0
 8003c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 80f1 	beq.w	8003e7a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8003c98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003c9c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f040 80ea 	bne.w	8003e7a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003ca6:	227b      	movs	r2, #123	; 0x7b
 8003ca8:	2194      	movs	r1, #148	; 0x94
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f002 f87a 	bl	8005da4 <VL53L0X_WrByte>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff fccc 	bl	800365c <VL53L0X_device_read_strobe>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8003cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	2190      	movs	r1, #144	; 0x90
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f002 f946 	bl	8005f6c <VL53L0X_RdDWord>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003cee:	227c      	movs	r2, #124	; 0x7c
 8003cf0:	2194      	movs	r1, #148	; 0x94
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f002 f856 	bl	8005da4 <VL53L0X_WrByte>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff fca8 	bl	800365c <VL53L0X_device_read_strobe>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2190      	movs	r1, #144	; 0x90
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f002 f922 	bl	8005f6c <VL53L0X_RdDWord>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003d36:	2273      	movs	r2, #115	; 0x73
 8003d38:	2194      	movs	r1, #148	; 0x94
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f002 f832 	bl	8005da4 <VL53L0X_WrByte>
 8003d40:	4603      	mov	r3, r0
 8003d42:	461a      	mov	r2, r3
 8003d44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff fc84 	bl	800365c <VL53L0X_device_read_strobe>
 8003d54:	4603      	mov	r3, r0
 8003d56:	461a      	mov	r2, r3
 8003d58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003d62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d66:	461a      	mov	r2, r3
 8003d68:	2190      	movs	r1, #144	; 0x90
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f002 f8fe 	bl	8005f6c <VL53L0X_RdDWord>
 8003d70:	4603      	mov	r3, r0
 8003d72:	461a      	mov	r2, r3
 8003d74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003d86:	2274      	movs	r2, #116	; 0x74
 8003d88:	2194      	movs	r1, #148	; 0x94
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f002 f80a 	bl	8005da4 <VL53L0X_WrByte>
 8003d90:	4603      	mov	r3, r0
 8003d92:	461a      	mov	r2, r3
 8003d94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff fc5c 	bl	800365c <VL53L0X_device_read_strobe>
 8003da4:	4603      	mov	r3, r0
 8003da6:	461a      	mov	r2, r3
 8003da8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003db2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003db6:	461a      	mov	r2, r3
 8003db8:	2190      	movs	r1, #144	; 0x90
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f002 f8d6 	bl	8005f6c <VL53L0X_RdDWord>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8003dd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003dd8:	2275      	movs	r2, #117	; 0x75
 8003dda:	2194      	movs	r1, #148	; 0x94
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f001 ffe1 	bl	8005da4 <VL53L0X_WrByte>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff fc33 	bl	800365c <VL53L0X_device_read_strobe>
 8003df6:	4603      	mov	r3, r0
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003e04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2190      	movs	r1, #144	; 0x90
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f002 f8ad 	bl	8005f6c <VL53L0X_RdDWord>
 8003e12:	4603      	mov	r3, r0
 8003e14:	461a      	mov	r2, r3
 8003e16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003e28:	2276      	movs	r2, #118	; 0x76
 8003e2a:	2194      	movs	r1, #148	; 0x94
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f001 ffb9 	bl	8005da4 <VL53L0X_WrByte>
 8003e32:	4603      	mov	r3, r0
 8003e34:	461a      	mov	r2, r3
 8003e36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff fc0b 	bl	800365c <VL53L0X_device_read_strobe>
 8003e46:	4603      	mov	r3, r0
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003e54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2190      	movs	r1, #144	; 0x90
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f002 f885 	bl	8005f6c <VL53L0X_RdDWord>
 8003e62:	4603      	mov	r3, r0
 8003e64:	461a      	mov	r2, r3
 8003e66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8003e74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e76:	4313      	orrs	r3, r2
 8003e78:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2181      	movs	r1, #129	; 0x81
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f001 ff90 	bl	8005da4 <VL53L0X_WrByte>
 8003e84:	4603      	mov	r3, r0
 8003e86:	461a      	mov	r2, r3
 8003e88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003e92:	2206      	movs	r2, #6
 8003e94:	21ff      	movs	r1, #255	; 0xff
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f001 ff84 	bl	8005da4 <VL53L0X_WrByte>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003eaa:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8003eae:	461a      	mov	r2, r3
 8003eb0:	2183      	movs	r1, #131	; 0x83
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f001 fff8 	bl	8005ea8 <VL53L0X_RdByte>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003ec6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003eca:	f023 0304 	bic.w	r3, r3, #4
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2183      	movs	r1, #131	; 0x83
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f001 ff65 	bl	8005da4 <VL53L0X_WrByte>
 8003eda:	4603      	mov	r3, r0
 8003edc:	461a      	mov	r2, r3
 8003ede:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003ee8:	2201      	movs	r2, #1
 8003eea:	21ff      	movs	r1, #255	; 0xff
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f001 ff59 	bl	8005da4 <VL53L0X_WrByte>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003f00:	2201      	movs	r2, #1
 8003f02:	2100      	movs	r1, #0
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f001 ff4d 	bl	8005da4 <VL53L0X_WrByte>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003f18:	2200      	movs	r2, #0
 8003f1a:	21ff      	movs	r1, #255	; 0xff
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f001 ff41 	bl	8005da4 <VL53L0X_WrByte>
 8003f22:	4603      	mov	r3, r0
 8003f24:	461a      	mov	r2, r3
 8003f26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003f30:	2200      	movs	r2, #0
 8003f32:	2180      	movs	r1, #128	; 0x80
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f001 ff35 	bl	8005da4 <VL53L0X_WrByte>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003f48:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f040 808f 	bne.w	8004070 <VL53L0X_get_info_from_device+0x98e>
 8003f52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f56:	2b07      	cmp	r3, #7
 8003f58:	f000 808a 	beq.w	8004070 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d024      	beq.n	8003fb0 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8003f66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f6a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d11e      	bne.n	8003fb0 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8003f78:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8003f82:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003f86:	2300      	movs	r3, #0
 8003f88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f8a:	e00e      	b.n	8003faa <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8003f8c:	f107 0208 	add.w	r2, r7, #8
 8003f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f92:	4413      	add	r3, r2
 8003f94:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8003fa0:	460a      	mov	r2, r1
 8003fa2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fac:	2b05      	cmp	r3, #5
 8003fae:	dded      	ble.n	8003f8c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d018      	beq.n	8003fec <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8003fba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003fbe:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d112      	bne.n	8003fec <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003fc6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003fd0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	33f3      	adds	r3, #243	; 0xf3
 8003fde:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8003fe0:	f107 0310 	add.w	r3, r7, #16
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003fe8:	f006 faec 	bl	800a5c4 <strcpy>

		}

		if (((option & 4) == 4) &&
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d030      	beq.n	8004058 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8003ff6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ffa:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d12a      	bne.n	8004058 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800400a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8004012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004014:	025b      	lsls	r3, r3, #9
 8004016:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800401c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8004026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004028:	2b00      	cmp	r3, #0
 800402a:	d011      	beq.n	8004050 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800402c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800402e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8004034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004036:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800403a:	fb02 f303 	mul.w	r3, r2, r3
 800403e:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8004040:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8004044:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004048:	425b      	negs	r3, r3
 800404a:	b29b      	uxth	r3, r3
 800404c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8004050:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8004058:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	4313      	orrs	r3, r2
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8004066:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004070:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8004074:	4618      	mov	r0, r3
 8004076:	3760      	adds	r7, #96	; 0x60
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8004088:	f240 6277 	movw	r2, #1655	; 0x677
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8004094:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8004098:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	fb02 f303 	mul.w	r3, r2, r3
 80040a8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80040aa:	68bb      	ldr	r3, [r7, #8]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d017      	beq.n	8004102 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80040d8:	e005      	b.n	80040e6 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80040e0:	89fb      	ldrh	r3, [r7, #14]
 80040e2:	3301      	adds	r3, #1
 80040e4:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f4      	bne.n	80040da <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80040f0:	89fb      	ldrh	r3, [r7, #14]
 80040f2:	021b      	lsls	r3, r3, #8
 80040f4:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80040fe:	4413      	add	r3, r2
 8004100:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8004102:	8afb      	ldrh	r3, [r7, #22]

}
 8004104:	4618      	mov	r0, r3
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8004122:	88fa      	ldrh	r2, [r7, #6]
 8004124:	0a12      	lsrs	r2, r2, #8
 8004126:	b292      	uxth	r2, r2
 8004128:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800412a:	3301      	adds	r3, #1
 800412c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800412e:	68fb      	ldr	r3, [r7, #12]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	4613      	mov	r3, r2
 8004148:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	4619      	mov	r1, r3
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f7ff ff92 	bl	800407c <VL53L0X_calc_macro_period_ps>
 8004158:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004160:	4a0a      	ldr	r2, [pc, #40]	; (800418c <VL53L0X_calc_timeout_mclks+0x50>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	099b      	lsrs	r3, r3, #6
 8004168:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004170:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	085b      	lsrs	r3, r3, #1
 8004178:	441a      	add	r2, r3
	timeout_period_mclks =
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8004182:	69fb      	ldr	r3, [r7, #28]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3720      	adds	r7, #32
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	10624dd3 	.word	0x10624dd3

08004190 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	807b      	strh	r3, [r7, #2]
 800419c:	4613      	mov	r3, r2
 800419e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80041a4:	787b      	ldrb	r3, [r7, #1]
 80041a6:	4619      	mov	r1, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff ff67 	bl	800407c <VL53L0X_calc_macro_period_ps>
 80041ae:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80041b6:	4a0a      	ldr	r2, [pc, #40]	; (80041e0 <VL53L0X_calc_timeout_us+0x50>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	099b      	lsrs	r3, r3, #6
 80041be:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80041c0:	887b      	ldrh	r3, [r7, #2]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	fb02 f303 	mul.w	r3, r2, r3
 80041c8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 80041cc:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <VL53L0X_calc_timeout_us+0x50>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	099b      	lsrs	r3, r3, #6
 80041d4:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80041d6:	697b      	ldr	r3, [r7, #20]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	10624dd3 	.word	0x10624dd3

080041e4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08c      	sub	sp, #48	; 0x30
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	460b      	mov	r3, r1
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8004202:	2300      	movs	r3, #0
 8004204:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800420a:	7afb      	ldrb	r3, [r7, #11]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <get_sequence_step_timeout+0x38>
 8004210:	7afb      	ldrb	r3, [r7, #11]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d002      	beq.n	800421c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8004216:	7afb      	ldrb	r3, [r7, #11]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d128      	bne.n	800426e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800421c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004220:	461a      	mov	r2, r3
 8004222:	2100      	movs	r1, #0
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7fd fa7d 	bl	8001724 <VL53L0X_GetVcselPulsePeriod>
 800422a:	4603      	mov	r3, r0
 800422c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8004230:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004234:	2b00      	cmp	r3, #0
 8004236:	d109      	bne.n	800424c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8004238:	f107 0320 	add.w	r3, r7, #32
 800423c:	461a      	mov	r2, r3
 800423e:	2146      	movs	r1, #70	; 0x46
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f001 fe31 	bl	8005ea8 <VL53L0X_RdByte>
 8004246:	4603      	mov	r3, r0
 8004248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800424c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004250:	b29b      	uxth	r3, r3
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff ff5c 	bl	8004110 <VL53L0X_decode_timeout>
 8004258:	4603      	mov	r3, r0
 800425a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800425c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004260:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004262:	4619      	mov	r1, r3
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f7ff ff93 	bl	8004190 <VL53L0X_calc_timeout_us>
 800426a:	62b8      	str	r0, [r7, #40]	; 0x28
 800426c:	e092      	b.n	8004394 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800426e:	7afb      	ldrb	r3, [r7, #11]
 8004270:	2b03      	cmp	r3, #3
 8004272:	d135      	bne.n	80042e0 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004274:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004278:	461a      	mov	r2, r3
 800427a:	2100      	movs	r1, #0
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f7fd fa51 	bl	8001724 <VL53L0X_GetVcselPulsePeriod>
 8004282:	4603      	mov	r3, r0
 8004284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8004288:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800428c:	2b00      	cmp	r3, #0
 800428e:	f040 8081 	bne.w	8004394 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004292:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004296:	461a      	mov	r2, r3
 8004298:	2100      	movs	r1, #0
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f7fd fa42 	bl	8001724 <VL53L0X_GetVcselPulsePeriod>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80042a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80042ae:	f107 031e 	add.w	r3, r7, #30
 80042b2:	461a      	mov	r2, r3
 80042b4:	2151      	movs	r1, #81	; 0x51
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f001 fe20 	bl	8005efc <VL53L0X_RdWord>
 80042bc:	4603      	mov	r3, r0
 80042be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80042c2:	8bfb      	ldrh	r3, [r7, #30]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff ff23 	bl	8004110 <VL53L0X_decode_timeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80042ce:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80042d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80042d4:	4619      	mov	r1, r3
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f7ff ff5a 	bl	8004190 <VL53L0X_calc_timeout_us>
 80042dc:	62b8      	str	r0, [r7, #40]	; 0x28
 80042de:	e059      	b.n	8004394 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80042e0:	7afb      	ldrb	r3, [r7, #11]
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d156      	bne.n	8004394 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80042e6:	f107 0314 	add.w	r3, r7, #20
 80042ea:	4619      	mov	r1, r3
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f7fd fb25 	bl	800193c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d01d      	beq.n	8004338 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80042fc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004300:	461a      	mov	r2, r3
 8004302:	2100      	movs	r1, #0
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f7fd fa0d 	bl	8001724 <VL53L0X_GetVcselPulsePeriod>
 800430a:	4603      	mov	r3, r0
 800430c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8004310:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10f      	bne.n	8004338 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8004318:	f107 031e 	add.w	r3, r7, #30
 800431c:	461a      	mov	r2, r3
 800431e:	2151      	movs	r1, #81	; 0x51
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f001 fdeb 	bl	8005efc <VL53L0X_RdWord>
 8004326:	4603      	mov	r3, r0
 8004328:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800432c:	8bfb      	ldrh	r3, [r7, #30]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff feee 	bl	8004110 <VL53L0X_decode_timeout>
 8004334:	4603      	mov	r3, r0
 8004336:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004338:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004340:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004344:	461a      	mov	r2, r3
 8004346:	2101      	movs	r1, #1
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7fd f9eb 	bl	8001724 <VL53L0X_GetVcselPulsePeriod>
 800434e:	4603      	mov	r3, r0
 8004350:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8004354:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10f      	bne.n	800437c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800435c:	f107 031c 	add.w	r3, r7, #28
 8004360:	461a      	mov	r2, r3
 8004362:	2171      	movs	r1, #113	; 0x71
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f001 fdc9 	bl	8005efc <VL53L0X_RdWord>
 800436a:	4603      	mov	r3, r0
 800436c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8004370:	8bbb      	ldrh	r3, [r7, #28]
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fecc 	bl	8004110 <VL53L0X_decode_timeout>
 8004378:	4603      	mov	r3, r0
 800437a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800437c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800437e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004384:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004388:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800438a:	4619      	mov	r1, r3
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f7ff feff 	bl	8004190 <VL53L0X_calc_timeout_us>
 8004392:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004398:	601a      	str	r2, [r3, #0]

	return Status;
 800439a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3730      	adds	r7, #48	; 0x30
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b08a      	sub	sp, #40	; 0x28
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	460b      	mov	r3, r1
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043b4:	2300      	movs	r3, #0
 80043b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80043ba:	7afb      	ldrb	r3, [r7, #11]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <set_sequence_step_timeout+0x26>
 80043c0:	7afb      	ldrb	r3, [r7, #11]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d002      	beq.n	80043cc <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80043c6:	7afb      	ldrb	r3, [r7, #11]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d138      	bne.n	800443e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80043cc:	f107 031b 	add.w	r3, r7, #27
 80043d0:	461a      	mov	r2, r3
 80043d2:	2100      	movs	r1, #0
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7fd f9a5 	bl	8001724 <VL53L0X_GetVcselPulsePeriod>
 80043da:	4603      	mov	r3, r0
 80043dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80043e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d11a      	bne.n	800441e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80043e8:	7efb      	ldrb	r3, [r7, #27]
 80043ea:	461a      	mov	r2, r3
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f7ff fea4 	bl	800413c <VL53L0X_calc_timeout_mclks>
 80043f4:	4603      	mov	r3, r0
 80043f6:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80043f8:	8bbb      	ldrh	r3, [r7, #28]
 80043fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fe:	d903      	bls.n	8004408 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8004400:	23ff      	movs	r3, #255	; 0xff
 8004402:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004406:	e004      	b.n	8004412 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8004408:	8bbb      	ldrh	r3, [r7, #28]
 800440a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800440c:	3b01      	subs	r3, #1
 800440e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004412:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800441e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004422:	2b00      	cmp	r3, #0
 8004424:	f040 80ab 	bne.w	800457e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8004428:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800442c:	461a      	mov	r2, r3
 800442e:	2146      	movs	r1, #70	; 0x46
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f001 fcb7 	bl	8005da4 <VL53L0X_WrByte>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800443c:	e09f      	b.n	800457e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800443e:	7afb      	ldrb	r3, [r7, #11]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d135      	bne.n	80044b0 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8004444:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004448:	2b00      	cmp	r3, #0
 800444a:	d11b      	bne.n	8004484 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800444c:	f107 031b 	add.w	r3, r7, #27
 8004450:	461a      	mov	r2, r3
 8004452:	2100      	movs	r1, #0
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7fd f965 	bl	8001724 <VL53L0X_GetVcselPulsePeriod>
 800445a:	4603      	mov	r3, r0
 800445c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8004460:	7efb      	ldrb	r3, [r7, #27]
 8004462:	461a      	mov	r2, r3
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f7ff fe68 	bl	800413c <VL53L0X_calc_timeout_mclks>
 800446c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800446e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8004470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fe20 	bl	80040b8 <VL53L0X_encode_timeout>
 8004478:	4603      	mov	r3, r0
 800447a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800447c:	8b3a      	ldrh	r2, [r7, #24]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8004484:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004488:	2b00      	cmp	r3, #0
 800448a:	d108      	bne.n	800449e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800448c:	8b3b      	ldrh	r3, [r7, #24]
 800448e:	461a      	mov	r2, r3
 8004490:	2151      	movs	r1, #81	; 0x51
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f001 fcaa 	bl	8005dec <VL53L0X_WrWord>
 8004498:	4603      	mov	r3, r0
 800449a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800449e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d16b      	bne.n	800457e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80044ae:	e066      	b.n	800457e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80044b0:	7afb      	ldrb	r3, [r7, #11]
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d160      	bne.n	8004578 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80044b6:	f107 0310 	add.w	r3, r7, #16
 80044ba:	4619      	mov	r1, r3
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7fd fa3d 	bl	800193c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80044c6:	7cfb      	ldrb	r3, [r7, #19]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01d      	beq.n	8004508 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80044cc:	f107 031b 	add.w	r3, r7, #27
 80044d0:	461a      	mov	r2, r3
 80044d2:	2100      	movs	r1, #0
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7fd f925 	bl	8001724 <VL53L0X_GetVcselPulsePeriod>
 80044da:	4603      	mov	r3, r0
 80044dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80044e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10f      	bne.n	8004508 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80044e8:	f107 0318 	add.w	r3, r7, #24
 80044ec:	461a      	mov	r2, r3
 80044ee:	2151      	movs	r1, #81	; 0x51
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f001 fd03 	bl	8005efc <VL53L0X_RdWord>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80044fc:	8b3b      	ldrh	r3, [r7, #24]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fe06 	bl	8004110 <VL53L0X_decode_timeout>
 8004504:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8004506:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004508:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800450c:	2b00      	cmp	r3, #0
 800450e:	d109      	bne.n	8004524 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004510:	f107 031b 	add.w	r3, r7, #27
 8004514:	461a      	mov	r2, r3
 8004516:	2101      	movs	r1, #1
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f7fd f903 	bl	8001724 <VL53L0X_GetVcselPulsePeriod>
 800451e:	4603      	mov	r3, r0
 8004520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8004524:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004528:	2b00      	cmp	r3, #0
 800452a:	d128      	bne.n	800457e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800452c:	7efb      	ldrb	r3, [r7, #27]
 800452e:	461a      	mov	r2, r3
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f7ff fe02 	bl	800413c <VL53L0X_calc_timeout_mclks>
 8004538:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800453a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800453c:	6a3a      	ldr	r2, [r7, #32]
 800453e:	4413      	add	r3, r2
 8004540:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8004542:	6a38      	ldr	r0, [r7, #32]
 8004544:	f7ff fdb8 	bl	80040b8 <VL53L0X_encode_timeout>
 8004548:	4603      	mov	r3, r0
 800454a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800454c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004550:	2b00      	cmp	r3, #0
 8004552:	d108      	bne.n	8004566 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8004554:	8bfb      	ldrh	r3, [r7, #30]
 8004556:	461a      	mov	r2, r3
 8004558:	2171      	movs	r1, #113	; 0x71
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f001 fc46 	bl	8005dec <VL53L0X_WrWord>
 8004560:	4603      	mov	r3, r0
 8004562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8004566:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800456a:	2b00      	cmp	r3, #0
 800456c:	d107      	bne.n	800457e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8004576:	e002      	b.n	800457e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004578:	23fc      	movs	r3, #252	; 0xfc
 800457a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800457e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004582:	4618      	mov	r0, r3
 8004584:	3728      	adds	r7, #40	; 0x28
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b08a      	sub	sp, #40	; 0x28
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	70fb      	strb	r3, [r7, #3]
 8004596:	4613      	mov	r3, r2
 8004598:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800459a:	2300      	movs	r3, #0
 800459c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80045a0:	230c      	movs	r3, #12
 80045a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80045a6:	2312      	movs	r3, #18
 80045a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80045ac:	2308      	movs	r3, #8
 80045ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 80045b2:	230e      	movs	r3, #14
 80045b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80045bc:	78bb      	ldrb	r3, [r7, #2]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80045c8:	23fc      	movs	r3, #252	; 0xfc
 80045ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80045ce:	e020      	b.n	8004612 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10d      	bne.n	80045f2 <VL53L0X_set_vcsel_pulse_period+0x68>
 80045d6:	78ba      	ldrb	r2, [r7, #2]
 80045d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80045dc:	429a      	cmp	r2, r3
 80045de:	d304      	bcc.n	80045ea <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80045e0:	78ba      	ldrb	r2, [r7, #2]
 80045e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d903      	bls.n	80045f2 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80045ea:	23fc      	movs	r3, #252	; 0xfc
 80045ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80045f0:	e00f      	b.n	8004612 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d10c      	bne.n	8004612 <VL53L0X_set_vcsel_pulse_period+0x88>
 80045f8:	78ba      	ldrb	r2, [r7, #2]
 80045fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045fe:	429a      	cmp	r2, r3
 8004600:	d304      	bcc.n	800460c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8004602:	78ba      	ldrb	r2, [r7, #2]
 8004604:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004608:	429a      	cmp	r2, r3
 800460a:	d902      	bls.n	8004612 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800460c:	23fc      	movs	r3, #252	; 0xfc
 800460e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8004612:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800461a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800461e:	e239      	b.n	8004a94 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d150      	bne.n	80046c8 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8004626:	78bb      	ldrb	r3, [r7, #2]
 8004628:	2b0c      	cmp	r3, #12
 800462a:	d110      	bne.n	800464e <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800462c:	2218      	movs	r2, #24
 800462e:	2157      	movs	r1, #87	; 0x57
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f001 fbb7 	bl	8005da4 <VL53L0X_WrByte>
 8004636:	4603      	mov	r3, r0
 8004638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800463c:	2208      	movs	r2, #8
 800463e:	2156      	movs	r1, #86	; 0x56
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f001 fbaf 	bl	8005da4 <VL53L0X_WrByte>
 8004646:	4603      	mov	r3, r0
 8004648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800464c:	e17f      	b.n	800494e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800464e:	78bb      	ldrb	r3, [r7, #2]
 8004650:	2b0e      	cmp	r3, #14
 8004652:	d110      	bne.n	8004676 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8004654:	2230      	movs	r2, #48	; 0x30
 8004656:	2157      	movs	r1, #87	; 0x57
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f001 fba3 	bl	8005da4 <VL53L0X_WrByte>
 800465e:	4603      	mov	r3, r0
 8004660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8004664:	2208      	movs	r2, #8
 8004666:	2156      	movs	r1, #86	; 0x56
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f001 fb9b 	bl	8005da4 <VL53L0X_WrByte>
 800466e:	4603      	mov	r3, r0
 8004670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004674:	e16b      	b.n	800494e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8004676:	78bb      	ldrb	r3, [r7, #2]
 8004678:	2b10      	cmp	r3, #16
 800467a:	d110      	bne.n	800469e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800467c:	2240      	movs	r2, #64	; 0x40
 800467e:	2157      	movs	r1, #87	; 0x57
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f001 fb8f 	bl	8005da4 <VL53L0X_WrByte>
 8004686:	4603      	mov	r3, r0
 8004688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800468c:	2208      	movs	r2, #8
 800468e:	2156      	movs	r1, #86	; 0x56
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f001 fb87 	bl	8005da4 <VL53L0X_WrByte>
 8004696:	4603      	mov	r3, r0
 8004698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800469c:	e157      	b.n	800494e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800469e:	78bb      	ldrb	r3, [r7, #2]
 80046a0:	2b12      	cmp	r3, #18
 80046a2:	f040 8154 	bne.w	800494e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80046a6:	2250      	movs	r2, #80	; 0x50
 80046a8:	2157      	movs	r1, #87	; 0x57
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f001 fb7a 	bl	8005da4 <VL53L0X_WrByte>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 80046b6:	2208      	movs	r2, #8
 80046b8:	2156      	movs	r1, #86	; 0x56
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f001 fb72 	bl	8005da4 <VL53L0X_WrByte>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80046c6:	e142      	b.n	800494e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	f040 813f 	bne.w	800494e <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80046d0:	78bb      	ldrb	r3, [r7, #2]
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d14c      	bne.n	8004770 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80046d6:	2210      	movs	r2, #16
 80046d8:	2148      	movs	r1, #72	; 0x48
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f001 fb62 	bl	8005da4 <VL53L0X_WrByte>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80046e6:	2208      	movs	r2, #8
 80046e8:	2147      	movs	r1, #71	; 0x47
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f001 fb5a 	bl	8005da4 <VL53L0X_WrByte>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80046f6:	2202      	movs	r2, #2
 80046f8:	2132      	movs	r1, #50	; 0x32
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f001 fb52 	bl	8005da4 <VL53L0X_WrByte>
 8004700:	4603      	mov	r3, r0
 8004702:	461a      	mov	r2, r3
 8004704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004708:	4313      	orrs	r3, r2
 800470a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800470e:	220c      	movs	r2, #12
 8004710:	2130      	movs	r1, #48	; 0x30
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f001 fb46 	bl	8005da4 <VL53L0X_WrByte>
 8004718:	4603      	mov	r3, r0
 800471a:	461a      	mov	r2, r3
 800471c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004720:	4313      	orrs	r3, r2
 8004722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004726:	2201      	movs	r2, #1
 8004728:	21ff      	movs	r1, #255	; 0xff
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f001 fb3a 	bl	8005da4 <VL53L0X_WrByte>
 8004730:	4603      	mov	r3, r0
 8004732:	461a      	mov	r2, r3
 8004734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004738:	4313      	orrs	r3, r2
 800473a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800473e:	2230      	movs	r2, #48	; 0x30
 8004740:	2130      	movs	r1, #48	; 0x30
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f001 fb2e 	bl	8005da4 <VL53L0X_WrByte>
 8004748:	4603      	mov	r3, r0
 800474a:	461a      	mov	r2, r3
 800474c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004750:	4313      	orrs	r3, r2
 8004752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004756:	2200      	movs	r2, #0
 8004758:	21ff      	movs	r1, #255	; 0xff
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f001 fb22 	bl	8005da4 <VL53L0X_WrByte>
 8004760:	4603      	mov	r3, r0
 8004762:	461a      	mov	r2, r3
 8004764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004768:	4313      	orrs	r3, r2
 800476a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800476e:	e0ee      	b.n	800494e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8004770:	78bb      	ldrb	r3, [r7, #2]
 8004772:	2b0a      	cmp	r3, #10
 8004774:	d14c      	bne.n	8004810 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8004776:	2228      	movs	r2, #40	; 0x28
 8004778:	2148      	movs	r1, #72	; 0x48
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f001 fb12 	bl	8005da4 <VL53L0X_WrByte>
 8004780:	4603      	mov	r3, r0
 8004782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8004786:	2208      	movs	r2, #8
 8004788:	2147      	movs	r1, #71	; 0x47
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f001 fb0a 	bl	8005da4 <VL53L0X_WrByte>
 8004790:	4603      	mov	r3, r0
 8004792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8004796:	2203      	movs	r2, #3
 8004798:	2132      	movs	r1, #50	; 0x32
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f001 fb02 	bl	8005da4 <VL53L0X_WrByte>
 80047a0:	4603      	mov	r3, r0
 80047a2:	461a      	mov	r2, r3
 80047a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80047ae:	2209      	movs	r2, #9
 80047b0:	2130      	movs	r1, #48	; 0x30
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f001 faf6 	bl	8005da4 <VL53L0X_WrByte>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461a      	mov	r2, r3
 80047bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80047c6:	2201      	movs	r2, #1
 80047c8:	21ff      	movs	r1, #255	; 0xff
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f001 faea 	bl	8005da4 <VL53L0X_WrByte>
 80047d0:	4603      	mov	r3, r0
 80047d2:	461a      	mov	r2, r3
 80047d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047d8:	4313      	orrs	r3, r2
 80047da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80047de:	2220      	movs	r2, #32
 80047e0:	2130      	movs	r1, #48	; 0x30
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f001 fade 	bl	8005da4 <VL53L0X_WrByte>
 80047e8:	4603      	mov	r3, r0
 80047ea:	461a      	mov	r2, r3
 80047ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80047f6:	2200      	movs	r2, #0
 80047f8:	21ff      	movs	r1, #255	; 0xff
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f001 fad2 	bl	8005da4 <VL53L0X_WrByte>
 8004800:	4603      	mov	r3, r0
 8004802:	461a      	mov	r2, r3
 8004804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004808:	4313      	orrs	r3, r2
 800480a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800480e:	e09e      	b.n	800494e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8004810:	78bb      	ldrb	r3, [r7, #2]
 8004812:	2b0c      	cmp	r3, #12
 8004814:	d14c      	bne.n	80048b0 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8004816:	2238      	movs	r2, #56	; 0x38
 8004818:	2148      	movs	r1, #72	; 0x48
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f001 fac2 	bl	8005da4 <VL53L0X_WrByte>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8004826:	2208      	movs	r2, #8
 8004828:	2147      	movs	r1, #71	; 0x47
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f001 faba 	bl	8005da4 <VL53L0X_WrByte>
 8004830:	4603      	mov	r3, r0
 8004832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8004836:	2203      	movs	r2, #3
 8004838:	2132      	movs	r1, #50	; 0x32
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f001 fab2 	bl	8005da4 <VL53L0X_WrByte>
 8004840:	4603      	mov	r3, r0
 8004842:	461a      	mov	r2, r3
 8004844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004848:	4313      	orrs	r3, r2
 800484a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800484e:	2208      	movs	r2, #8
 8004850:	2130      	movs	r1, #48	; 0x30
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f001 faa6 	bl	8005da4 <VL53L0X_WrByte>
 8004858:	4603      	mov	r3, r0
 800485a:	461a      	mov	r2, r3
 800485c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004860:	4313      	orrs	r3, r2
 8004862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004866:	2201      	movs	r2, #1
 8004868:	21ff      	movs	r1, #255	; 0xff
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f001 fa9a 	bl	8005da4 <VL53L0X_WrByte>
 8004870:	4603      	mov	r3, r0
 8004872:	461a      	mov	r2, r3
 8004874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004878:	4313      	orrs	r3, r2
 800487a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800487e:	2220      	movs	r2, #32
 8004880:	2130      	movs	r1, #48	; 0x30
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f001 fa8e 	bl	8005da4 <VL53L0X_WrByte>
 8004888:	4603      	mov	r3, r0
 800488a:	461a      	mov	r2, r3
 800488c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004890:	4313      	orrs	r3, r2
 8004892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004896:	2200      	movs	r2, #0
 8004898:	21ff      	movs	r1, #255	; 0xff
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f001 fa82 	bl	8005da4 <VL53L0X_WrByte>
 80048a0:	4603      	mov	r3, r0
 80048a2:	461a      	mov	r2, r3
 80048a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048ae:	e04e      	b.n	800494e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80048b0:	78bb      	ldrb	r3, [r7, #2]
 80048b2:	2b0e      	cmp	r3, #14
 80048b4:	d14b      	bne.n	800494e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80048b6:	2248      	movs	r2, #72	; 0x48
 80048b8:	2148      	movs	r1, #72	; 0x48
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f001 fa72 	bl	8005da4 <VL53L0X_WrByte>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 80048c6:	2208      	movs	r2, #8
 80048c8:	2147      	movs	r1, #71	; 0x47
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f001 fa6a 	bl	8005da4 <VL53L0X_WrByte>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80048d6:	2203      	movs	r2, #3
 80048d8:	2132      	movs	r1, #50	; 0x32
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f001 fa62 	bl	8005da4 <VL53L0X_WrByte>
 80048e0:	4603      	mov	r3, r0
 80048e2:	461a      	mov	r2, r3
 80048e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80048ee:	2207      	movs	r2, #7
 80048f0:	2130      	movs	r1, #48	; 0x30
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f001 fa56 	bl	8005da4 <VL53L0X_WrByte>
 80048f8:	4603      	mov	r3, r0
 80048fa:	461a      	mov	r2, r3
 80048fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004900:	4313      	orrs	r3, r2
 8004902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004906:	2201      	movs	r2, #1
 8004908:	21ff      	movs	r1, #255	; 0xff
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f001 fa4a 	bl	8005da4 <VL53L0X_WrByte>
 8004910:	4603      	mov	r3, r0
 8004912:	461a      	mov	r2, r3
 8004914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004918:	4313      	orrs	r3, r2
 800491a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800491e:	2220      	movs	r2, #32
 8004920:	2130      	movs	r1, #48	; 0x30
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f001 fa3e 	bl	8005da4 <VL53L0X_WrByte>
 8004928:	4603      	mov	r3, r0
 800492a:	461a      	mov	r2, r3
 800492c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004930:	4313      	orrs	r3, r2
 8004932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004936:	2200      	movs	r2, #0
 8004938:	21ff      	movs	r1, #255	; 0xff
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f001 fa32 	bl	8005da4 <VL53L0X_WrByte>
 8004940:	4603      	mov	r3, r0
 8004942:	461a      	mov	r2, r3
 8004944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004948:	4313      	orrs	r3, r2
 800494a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800494e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004952:	2b00      	cmp	r3, #0
 8004954:	d17f      	bne.n	8004a56 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8004956:	78bb      	ldrb	r3, [r7, #2]
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe fe38 	bl	80035ce <VL53L0X_encode_vcsel_period>
 800495e:	4603      	mov	r3, r0
 8004960:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800496a:	2b01      	cmp	r3, #1
 800496c:	d045      	beq.n	80049fa <VL53L0X_set_vcsel_pulse_period+0x470>
 800496e:	e06e      	b.n	8004a4e <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8004970:	f107 0314 	add.w	r3, r7, #20
 8004974:	461a      	mov	r2, r3
 8004976:	2103      	movs	r1, #3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff fc33 	bl	80041e4 <get_sequence_step_timeout>
 800497e:	4603      	mov	r3, r0
 8004980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8004984:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800498c:	f107 0310 	add.w	r3, r7, #16
 8004990:	461a      	mov	r2, r3
 8004992:	2102      	movs	r1, #2
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7ff fc25 	bl	80041e4 <get_sequence_step_timeout>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80049a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d109      	bne.n	80049bc <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80049a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80049ac:	461a      	mov	r2, r3
 80049ae:	2150      	movs	r1, #80	; 0x50
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f001 f9f7 	bl	8005da4 <VL53L0X_WrByte>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80049bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d108      	bne.n	80049d6 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	461a      	mov	r2, r3
 80049c8:	2103      	movs	r1, #3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff fceb 	bl	80043a6 <set_sequence_step_timeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 80049d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d108      	bne.n	80049f0 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	461a      	mov	r2, r3
 80049e2:	2102      	movs	r1, #2
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff fcde 	bl	80043a6 <set_sequence_step_timeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	78ba      	ldrb	r2, [r7, #2]
 80049f4:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80049f8:	e02e      	b.n	8004a58 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80049fa:	f107 0318 	add.w	r3, r7, #24
 80049fe:	461a      	mov	r2, r3
 8004a00:	2104      	movs	r1, #4
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff fbee 	bl	80041e4 <get_sequence_step_timeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8004a0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8004a16:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	2170      	movs	r1, #112	; 0x70
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f001 f9c0 	bl	8005da4 <VL53L0X_WrByte>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8004a2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d108      	bne.n	8004a44 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	461a      	mov	r2, r3
 8004a36:	2104      	movs	r1, #4
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff fcb4 	bl	80043a6 <set_sequence_step_timeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	78ba      	ldrb	r2, [r7, #2]
 8004a48:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8004a4c:	e004      	b.n	8004a58 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004a4e:	23fc      	movs	r3, #252	; 0xfc
 8004a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004a54:	e000      	b.n	8004a58 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8004a56:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8004a58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d109      	bne.n	8004a74 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004a66:	69f9      	ldr	r1, [r7, #28]
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7fc fe1d 	bl	80016a8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8004a74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d109      	bne.n	8004a90 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8004a7c:	f107 010f 	add.w	r1, r7, #15
 8004a80:	2301      	movs	r3, #1
 8004a82:	2200      	movs	r2, #0
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7fe fcbd 	bl	8003404 <VL53L0X_perform_phase_calibration>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8004a90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3728      	adds	r7, #40	; 0x28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8004aae:	7afb      	ldrb	r3, [r7, #11]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <VL53L0X_get_vcsel_pulse_period+0x1e>
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d00a      	beq.n	8004ace <VL53L0X_get_vcsel_pulse_period+0x32>
 8004ab8:	e013      	b.n	8004ae2 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8004aba:	f107 0316 	add.w	r3, r7, #22
 8004abe:	461a      	mov	r2, r3
 8004ac0:	2150      	movs	r1, #80	; 0x50
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f001 f9f0 	bl	8005ea8 <VL53L0X_RdByte>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8004acc:	e00b      	b.n	8004ae6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8004ace:	f107 0316 	add.w	r3, r7, #22
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	2170      	movs	r1, #112	; 0x70
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f001 f9e6 	bl	8005ea8 <VL53L0X_RdByte>
 8004adc:	4603      	mov	r3, r0
 8004ade:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8004ae0:	e001      	b.n	8004ae6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004ae2:	23fc      	movs	r3, #252	; 0xfc
 8004ae4:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d107      	bne.n	8004afe <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8004aee:	7dbb      	ldrb	r3, [r7, #22]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fe fd59 	bl	80035a8 <VL53L0X_decode_vcsel_period>
 8004af6:	4603      	mov	r3, r0
 8004af8:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	701a      	strb	r2, [r3, #0]

	return Status;
 8004afe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b092      	sub	sp, #72	; 0x48
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b14:	2300      	movs	r3, #0
 8004b16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8004b1a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004b1e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8004b20:	f240 7376 	movw	r3, #1910	; 0x776
 8004b24:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8004b26:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004b2a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8004b2c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8004b32:	f240 234e 	movw	r3, #590	; 0x24e
 8004b36:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8004b38:	f240 23b2 	movw	r3, #690	; 0x2b2
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8004b3e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004b42:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8004b44:	f240 2326 	movw	r3, #550	; 0x226
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8004b4e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004b52:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d205      	bcs.n	8004b6c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004b60:	23fc      	movs	r3, #252	; 0xfc
 8004b62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8004b66:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004b6a:	e0aa      	b.n	8004cc2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8004b6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b70:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004b78:	f107 0314 	add.w	r3, r7, #20
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fc fedc 	bl	800193c <VL53L0X_GetSequenceStepEnables>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8004b8a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d15b      	bne.n	8004c4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8004b92:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d105      	bne.n	8004ba4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8004b98:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d102      	bne.n	8004ba4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8004b9e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d052      	beq.n	8004c4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8004ba4:	f107 0310 	add.w	r3, r7, #16
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2102      	movs	r1, #2
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff fb19 	bl	80041e4 <get_sequence_step_timeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8004bb8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8004bc0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004bc4:	e07d      	b.n	8004cc2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8004bc6:	7d3b      	ldrb	r3, [r7, #20]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00f      	beq.n	8004bec <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8004bcc:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8004bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd0:	4413      	add	r3, r2
 8004bd2:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d204      	bcs.n	8004be6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8004bdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	643b      	str	r3, [r7, #64]	; 0x40
 8004be4:	e002      	b.n	8004bec <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004be6:	23fc      	movs	r3, #252	; 0xfc
 8004be8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8004bec:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8004bf4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004bf8:	e063      	b.n	8004cc2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8004bfa:	7dbb      	ldrb	r3, [r7, #22]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d011      	beq.n	8004c24 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	4413      	add	r3, r2
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d204      	bcs.n	8004c1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8004c12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	643b      	str	r3, [r7, #64]	; 0x40
 8004c1a:	e016      	b.n	8004c4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004c1c:	23fc      	movs	r3, #252	; 0xfc
 8004c1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004c22:	e012      	b.n	8004c4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8004c24:	7d7b      	ldrb	r3, [r7, #21]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00f      	beq.n	8004c4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c2e:	4413      	add	r3, r2
 8004c30:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d204      	bcs.n	8004c44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8004c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	643b      	str	r3, [r7, #64]	; 0x40
 8004c42:	e002      	b.n	8004c4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004c44:	23fc      	movs	r3, #252	; 0xfc
 8004c46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8004c4a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8004c52:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004c56:	e034      	b.n	8004cc2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8004c58:	7dfb      	ldrb	r3, [r7, #23]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d019      	beq.n	8004c92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8004c5e:	f107 030c 	add.w	r3, r7, #12
 8004c62:	461a      	mov	r2, r3
 8004c64:	2103      	movs	r1, #3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff fabc 	bl	80041e4 <get_sequence_step_timeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c76:	4413      	add	r3, r2
 8004c78:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d204      	bcs.n	8004c8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8004c82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	643b      	str	r3, [r7, #64]	; 0x40
 8004c8a:	e002      	b.n	8004c92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004c8c:	23fc      	movs	r3, #252	; 0xfc
 8004c8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8004c92:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d111      	bne.n	8004cbe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8004c9a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00e      	beq.n	8004cbe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8004ca0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8004ca8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004caa:	2104      	movs	r1, #4
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff fb7a 	bl	80043a6 <set_sequence_step_timeout>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8004cbe:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3748      	adds	r7, #72	; 0x48
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b090      	sub	sp, #64	; 0x40
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8004cda:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004cde:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8004ce0:	f240 7376 	movw	r3, #1910	; 0x776
 8004ce4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8004ce6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004cea:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8004cec:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004cf0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8004cf2:	f240 234e 	movw	r3, #590	; 0x24e
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8004cf8:	f240 23b2 	movw	r3, #690	; 0x2b2
 8004cfc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8004cfe:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8004d04:	f240 2326 	movw	r3, #550	; 0x226
 8004d08:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8004d0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d12:	441a      	add	r2, r3
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004d18:	f107 0318 	add.w	r3, r7, #24
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fc fe0c 	bl	800193c <VL53L0X_GetSequenceStepEnables>
 8004d24:	4603      	mov	r3, r0
 8004d26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8004d2a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8004d32:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004d36:	e075      	b.n	8004e24 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8004d38:	7e3b      	ldrb	r3, [r7, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d105      	bne.n	8004d4a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8004d3e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d102      	bne.n	8004d4a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8004d44:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d030      	beq.n	8004dac <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8004d4a:	f107 0310 	add.w	r3, r7, #16
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2102      	movs	r1, #2
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7ff fa46 	bl	80041e4 <get_sequence_step_timeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8004d5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d122      	bne.n	8004dac <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8004d66:	7e3b      	ldrb	r3, [r7, #24]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8004d70:	6939      	ldr	r1, [r7, #16]
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d74:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8004d76:	441a      	add	r2, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8004d7c:	7ebb      	ldrb	r3, [r7, #26]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8004d86:	6939      	ldr	r1, [r7, #16]
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	440b      	add	r3, r1
 8004d8c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8004d8e:	441a      	add	r2, r3
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	e00a      	b.n	8004dac <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8004d96:	7e7b      	ldrb	r3, [r7, #25]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d007      	beq.n	8004dac <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8004da0:	6939      	ldr	r1, [r7, #16]
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8004da6:	441a      	add	r2, r3
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004dac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d114      	bne.n	8004dde <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8004db4:	7efb      	ldrb	r3, [r7, #27]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d011      	beq.n	8004dde <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8004dba:	f107 030c 	add.w	r3, r7, #12
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	2103      	movs	r1, #3
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff fa0e 	bl	80041e4 <get_sequence_step_timeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8004dd2:	68f9      	ldr	r1, [r7, #12]
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8004dd8:	441a      	add	r2, r3
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004dde:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d114      	bne.n	8004e10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8004de6:	7f3b      	ldrb	r3, [r7, #28]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d011      	beq.n	8004e10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8004dec:	f107 0314 	add.w	r3, r7, #20
 8004df0:	461a      	mov	r2, r3
 8004df2:	2104      	movs	r1, #4
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff f9f5 	bl	80041e4 <get_sequence_step_timeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8004e04:	6979      	ldr	r1, [r7, #20]
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8004e0a:	441a      	add	r2, r3
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d103      	bne.n	8004e20 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004e20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3740      	adds	r7, #64	; 0x40
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8004e3e:	e0c6      	b.n	8004fce <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	4413      	add	r3, r2
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	74fb      	strb	r3, [r7, #19]
		Index++;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8004e50:	7cfb      	ldrb	r3, [r7, #19]
 8004e52:	2bff      	cmp	r3, #255	; 0xff
 8004e54:	f040 808d 	bne.w	8004f72 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	747b      	strb	r3, [r7, #17]
			Index++;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	3301      	adds	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8004e68:	7c7b      	ldrb	r3, [r7, #17]
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d87e      	bhi.n	8004f6c <VL53L0X_load_tuning_settings+0x140>
 8004e6e:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <VL53L0X_load_tuning_settings+0x48>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004e85 	.word	0x08004e85
 8004e78:	08004ebf 	.word	0x08004ebf
 8004e7c:	08004ef9 	.word	0x08004ef9
 8004e80:	08004f33 	.word	0x08004f33
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	4413      	add	r3, r2
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	743b      	strb	r3, [r7, #16]
				Index++;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	3301      	adds	r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	4413      	add	r3, r2
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004ea4:	7c3b      	ldrb	r3, [r7, #16]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	021b      	lsls	r3, r3, #8
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	89ba      	ldrh	r2, [r7, #12]
 8004eb8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8004ebc:	e087      	b.n	8004fce <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	743b      	strb	r3, [r7, #16]
				Index++;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	3301      	adds	r3, #1
 8004edc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004ede:	7c3b      	ldrb	r3, [r7, #16]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	4413      	add	r3, r2
 8004eec:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	89ba      	ldrh	r2, [r7, #12]
 8004ef2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8004ef6:	e06a      	b.n	8004fce <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	4413      	add	r3, r2
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	743b      	strb	r3, [r7, #16]
				Index++;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	3301      	adds	r3, #1
 8004f06:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	3301      	adds	r3, #1
 8004f16:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004f18:	7c3b      	ldrb	r3, [r7, #16]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	4413      	add	r3, r2
 8004f26:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	89ba      	ldrh	r2, [r7, #12]
 8004f2c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8004f30:	e04d      	b.n	8004fce <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	4413      	add	r3, r2
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	743b      	strb	r3, [r7, #16]
				Index++;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	4413      	add	r3, r2
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004f52:	7c3b      	ldrb	r3, [r7, #16]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	4413      	add	r3, r2
 8004f60:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	89ba      	ldrh	r2, [r7, #12]
 8004f66:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8004f6a:	e030      	b.n	8004fce <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004f6c:	23fc      	movs	r3, #252	; 0xfc
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e02d      	b.n	8004fce <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8004f72:	7cfb      	ldrb	r3, [r7, #19]
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d828      	bhi.n	8004fca <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	74bb      	strb	r3, [r7, #18]
			Index++;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	3301      	adds	r3, #1
 8004f86:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61bb      	str	r3, [r7, #24]
 8004f8c:	e00f      	b.n	8004fae <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	4413      	add	r3, r2
 8004f94:	7819      	ldrb	r1, [r3, #0]
 8004f96:	f107 0208 	add.w	r2, r7, #8
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	460a      	mov	r2, r1
 8004fa0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	3301      	adds	r3, #1
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	7cfb      	ldrb	r3, [r7, #19]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	dbeb      	blt.n	8004f8e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8004fb6:	7cfb      	ldrb	r3, [r7, #19]
 8004fb8:	f107 0208 	add.w	r2, r7, #8
 8004fbc:	7cb9      	ldrb	r1, [r7, #18]
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fe94 	bl	8005cec <VL53L0X_WriteMulti>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	77fb      	strb	r3, [r7, #31]
 8004fc8:	e001      	b.n	8004fce <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004fca:	23fc      	movs	r3, #252	; 0xfc
 8004fcc:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d004      	beq.n	8004fe4 <VL53L0X_load_tuning_settings+0x1b8>
 8004fda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f43f af2e 	beq.w	8004e40 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004fe4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3720      	adds	r7, #32
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8005006:	f107 0313 	add.w	r3, r7, #19
 800500a:	4619      	mov	r1, r3
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f7fc fd21 	bl	8001a54 <VL53L0X_GetXTalkCompensationEnable>
 8005012:	4603      	mov	r3, r0
 8005014:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8005016:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d111      	bne.n	8005042 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800501e:	7cfb      	ldrb	r3, [r7, #19]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00e      	beq.n	8005042 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	8a9b      	ldrh	r3, [r3, #20]
 800502e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	fb02 f303 	mul.w	r3, r2, r3
 8005036:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	3380      	adds	r3, #128	; 0x80
 800503c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8005042:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3720      	adds	r7, #32
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b086      	sub	sp, #24
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800505a:	2300      	movs	r3, #0
 800505c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8005066:	f107 0310 	add.w	r3, r7, #16
 800506a:	461a      	mov	r2, r3
 800506c:	68b9      	ldr	r1, [r7, #8]
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f7ff ffbe 	bl	8004ff0 <VL53L0X_get_total_xtalk_rate>
 8005074:	4603      	mov	r3, r0
 8005076:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8005078:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d105      	bne.n	800508c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	441a      	add	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	601a      	str	r2, [r3, #0]

	return Status;
 800508c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b09a      	sub	sp, #104	; 0x68
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80050a6:	2312      	movs	r3, #18
 80050a8:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 80050aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050ae:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80050b0:	2342      	movs	r3, #66	; 0x42
 80050b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 80050b4:	2306      	movs	r3, #6
 80050b6:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 80050b8:	2307      	movs	r3, #7
 80050ba:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050bc:	2300      	movs	r3, #0
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 80050c8:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80050d0:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80050d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050d6:	fb02 f303 	mul.w	r3, r2, r3
 80050da:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 80050dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050de:	3380      	adds	r3, #128	; 0x80
 80050e0:	0a1b      	lsrs	r3, r3, #8
 80050e2:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 80050e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050e8:	fb02 f303 	mul.w	r3, r2, r3
 80050ec:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 80050ee:	2300      	movs	r3, #0
 80050f0:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01a      	beq.n	800512e <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	029b      	lsls	r3, r3, #10
 80050fc:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8005102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005104:	4413      	add	r3, r2
 8005106:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8005108:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005110:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8005112:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005114:	4613      	mov	r3, r2
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	4413      	add	r3, r2
 800511a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800511c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800511e:	fb03 f303 	mul.w	r3, r3, r3
 8005122:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8005124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005126:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800512a:	0c1b      	lsrs	r3, r3, #16
 800512c:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005132:	fb02 f303 	mul.w	r3, r2, r3
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8005138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800513e:	0c1b      	lsrs	r3, r3, #16
 8005140:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8005142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005144:	fb03 f303 	mul.w	r3, r3, r3
 8005148:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800514a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800514c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005150:	0c1b      	lsrs	r3, r3, #16
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8005154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005156:	085a      	lsrs	r2, r3, #1
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	441a      	add	r2, r3
 800515c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800515e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005168:	fb02 f303 	mul.w	r3, r2, r3
 800516c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005174:	d302      	bcc.n	800517c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8005176:	4b54      	ldr	r3, [pc, #336]	; (80052c8 <VL53L0X_calc_dmax+0x230>)
 8005178:	663b      	str	r3, [r7, #96]	; 0x60
 800517a:	e015      	b.n	80051a8 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800517c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800517e:	085a      	lsrs	r2, r3, #1
 8005180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005182:	441a      	add	r2, r3
 8005184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005186:	fbb2 f3f3 	udiv	r3, r2, r3
 800518a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800518c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800518e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005190:	fb02 f303 	mul.w	r3, r2, r3
 8005194:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8005196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005198:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800519c:	0c1b      	lsrs	r3, r3, #16
 800519e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80051a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051a2:	fb03 f303 	mul.w	r3, r3, r3
 80051a6:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80051a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051aa:	039b      	lsls	r3, r3, #14
 80051ac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80051b0:	4a46      	ldr	r2, [pc, #280]	; (80052cc <VL53L0X_calc_dmax+0x234>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	099b      	lsrs	r3, r3, #6
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	fb03 f303 	mul.w	r3, r3, r3
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 80051c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c4:	fb03 f303 	mul.w	r3, r3, r3
 80051c8:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	3308      	adds	r3, #8
 80051ce:	091b      	lsrs	r3, r3, #4
 80051d0:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80051d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 80051da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051dc:	4613      	mov	r3, r2
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	4413      	add	r3, r2
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051ec:	0b9b      	lsrs	r3, r3, #14
 80051ee:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 80051f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051f4:	4413      	add	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 80051f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4413      	add	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005206:	fbb2 f3f3 	udiv	r3, r2, r3
 800520a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	039b      	lsls	r3, r3, #14
 8005210:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	085b      	lsrs	r3, r3, #1
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4413      	add	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	fbb2 f3f3 	udiv	r3, r2, r3
 8005224:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800522a:	fb02 f303 	mul.w	r3, r2, r3
 800522e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005236:	4a25      	ldr	r2, [pc, #148]	; (80052cc <VL53L0X_calc_dmax+0x234>)
 8005238:	fba2 2303 	umull	r2, r3, r2, r3
 800523c:	099b      	lsrs	r3, r3, #6
 800523e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800524c:	4a1f      	ldr	r2, [pc, #124]	; (80052cc <VL53L0X_calc_dmax+0x234>)
 800524e:	fba2 2303 	umull	r2, r3, r2, r3
 8005252:	099b      	lsrs	r3, r3, #6
 8005254:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8005256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005258:	3380      	adds	r3, #128	; 0x80
 800525a:	0a1b      	lsrs	r3, r3, #8
 800525c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	085a      	lsrs	r2, r3, #1
 8005268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526a:	441a      	add	r2, r3
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	65bb      	str	r3, [r7, #88]	; 0x58
 8005274:	e001      	b.n	800527a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800527a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800527c:	f7fe f9ba 	bl	80035f4 <VL53L0X_isqrt>
 8005280:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	085a      	lsrs	r2, r3, #1
 800528c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528e:	441a      	add	r2, r3
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	fbb2 f3f3 	udiv	r3, r2, r3
 8005296:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005298:	e001      	b.n	800529e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800529a:	2300      	movs	r3, #0
 800529c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800529e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80052a0:	f7fe f9a8 	bl	80035f4 <VL53L0X_isqrt>
 80052a4:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 80052a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d902      	bls.n	80052ba <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 80052b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052b8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80052ba:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3768      	adds	r7, #104	; 0x68
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	fff00000 	.word	0xfff00000
 80052cc:	10624dd3 	.word	0x10624dd3

080052d0 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b0b4      	sub	sp, #208	; 0xd0
 80052d4:	af04      	add	r7, sp, #16
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80052de:	f44f 7348 	mov.w	r3, #800	; 0x320
 80052e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80052e6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80052ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 80052ee:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 80052f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80052f6:	f241 235c 	movw	r3, #4700	; 0x125c
 80052fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80052fe:	4b9e      	ldr	r3, [pc, #632]	; (8005578 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8005300:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8005304:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005308:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800530a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800530e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8005318:	4b98      	ldr	r3, [pc, #608]	; (800557c <VL53L0X_calc_sigma_estimate+0x2ac>)
 800531a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800531c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005320:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8005322:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8005326:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8005328:	f240 6377 	movw	r3, #1655	; 0x677
 800532c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800532e:	2300      	movs	r3, #0
 8005330:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005342:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8005346:	0c1b      	lsrs	r3, r3, #16
 8005348:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8005350:	f107 0310 	add.w	r3, r7, #16
 8005354:	461a      	mov	r2, r3
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f7ff fe78 	bl	800504e <VL53L0X_get_total_signal_rate>
 800535e:	4603      	mov	r3, r0
 8005360:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8005364:	f107 0314 	add.w	r3, r7, #20
 8005368:	461a      	mov	r2, r3
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff fe3f 	bl	8004ff0 <VL53L0X_get_total_xtalk_rate>
 8005372:	4603      	mov	r3, r0
 8005374:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800537e:	fb02 f303 	mul.w	r3, r2, r3
 8005382:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8005384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005386:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800538a:	0c1b      	lsrs	r3, r3, #16
 800538c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005394:	fb02 f303 	mul.w	r3, r2, r3
 8005398:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800539c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80053a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d902      	bls.n	80053ac <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80053a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80053ac:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d168      	bne.n	8005486 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80053ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80053c4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80053c8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80053cc:	461a      	mov	r2, r3
 80053ce:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7fe feb2 	bl	800413c <VL53L0X_calc_timeout_mclks>
 80053d8:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80053e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80053ea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80053ee:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80053f2:	461a      	mov	r2, r3
 80053f4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f7fe fe9f 	bl	800413c <VL53L0X_calc_timeout_mclks>
 80053fe:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8005400:	2303      	movs	r3, #3
 8005402:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8005406:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800540a:	2b08      	cmp	r3, #8
 800540c:	d102      	bne.n	8005414 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800540e:	2302      	movs	r3, #2
 8005410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8005414:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005418:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800541a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800541e:	fb02 f303 	mul.w	r3, r2, r3
 8005422:	02db      	lsls	r3, r3, #11
 8005424:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8005428:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800542c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005430:	4a53      	ldr	r2, [pc, #332]	; (8005580 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005432:	fba2 2303 	umull	r2, r3, r2, r3
 8005436:	099b      	lsrs	r3, r3, #6
 8005438:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800543c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005440:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005442:	fb02 f303 	mul.w	r3, r2, r3
 8005446:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800544a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800544e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005452:	4a4b      	ldr	r2, [pc, #300]	; (8005580 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	099b      	lsrs	r3, r3, #6
 800545a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	3380      	adds	r3, #128	; 0x80
 8005462:	0a1b      	lsrs	r3, r3, #8
 8005464:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800546c:	fb02 f303 	mul.w	r3, r2, r3
 8005470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8005474:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005478:	3380      	adds	r3, #128	; 0x80
 800547a:	0a1b      	lsrs	r3, r3, #8
 800547c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8005486:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800548e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8005492:	e15e      	b.n	8005752 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8005494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10c      	bne.n	80054b4 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054a0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054a8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e14c      	b.n	800574e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 80054b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d102      	bne.n	80054c2 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 80054bc:	2301      	movs	r3, #1
 80054be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 80054c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054c6:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80054c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ca:	041a      	lsls	r2, r3, #16
 80054cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80054d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054dc:	429a      	cmp	r2, r3
 80054de:	d902      	bls.n	80054e6 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80054e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80054e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80054ea:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80054ee:	fb02 f303 	mul.w	r3, r2, r3
 80054f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80054f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80054fa:	4613      	mov	r3, r2
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4618      	mov	r0, r3
 8005504:	f7fe f876 	bl	80035f4 <VL53L0X_isqrt>
 8005508:	4603      	mov	r3, r0
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	891b      	ldrh	r3, [r3, #8]
 8005512:	461a      	mov	r2, r3
 8005514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005516:	fb02 f303 	mul.w	r3, r2, r3
 800551a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800551c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800551e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8005520:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005524:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005526:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8005528:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800552c:	4a14      	ldr	r2, [pc, #80]	; (8005580 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800552e:	fba2 2303 	umull	r2, r3, r2, r3
 8005532:	099b      	lsrs	r3, r3, #6
 8005534:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8005536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005538:	041b      	lsls	r3, r3, #16
 800553a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800553e:	4a10      	ldr	r2, [pc, #64]	; (8005580 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005540:	fba2 2303 	umull	r2, r3, r2, r3
 8005544:	099b      	lsrs	r3, r3, #6
 8005546:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8005548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800554e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	fbb2 f3f3 	udiv	r3, r2, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	bfb8      	it	lt
 800555a:	425b      	neglt	r3, r3
 800555c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	7e1b      	ldrb	r3, [r3, #24]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00b      	beq.n	8005584 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800556c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005574:	e033      	b.n	80055de <VL53L0X_calc_sigma_estimate+0x30e>
 8005576:	bf00      	nop
 8005578:	028f87ae 	.word	0x028f87ae
 800557c:	0006999a 	.word	0x0006999a
 8005580:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8005584:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8005592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005594:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8005598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800559c:	fb02 f303 	mul.w	r3, r2, r3
 80055a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80055a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055aa:	4413      	add	r3, r2
 80055ac:	0c1b      	lsrs	r3, r3, #16
 80055ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 80055b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055b6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80055ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 80055be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055c2:	085b      	lsrs	r3, r3, #1
 80055c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 80055c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055cc:	fb03 f303 	mul.w	r3, r3, r3
 80055d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 80055d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055d8:	0b9b      	lsrs	r3, r3, #14
 80055da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 80055de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055e4:	fb02 f303 	mul.w	r3, r2, r3
 80055e8:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80055f0:	0c1b      	lsrs	r3, r3, #16
 80055f2:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	fb03 f303 	mul.w	r3, r3, r3
 80055fa:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80055fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005600:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8005602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005604:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005608:	0c1b      	lsrs	r3, r3, #16
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	fb03 f303 	mul.w	r3, r3, r3
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8005614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005618:	4413      	add	r3, r2
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800561c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800561e:	f7fd ffe9 	bl	80035f4 <VL53L0X_isqrt>
 8005622:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	041b      	lsls	r3, r3, #16
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	3332      	adds	r3, #50	; 0x32
 800562e:	4a4b      	ldr	r2, [pc, #300]	; (800575c <VL53L0X_calc_sigma_estimate+0x48c>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	095a      	lsrs	r2, r3, #5
 8005636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8005640:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005644:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8005648:	fb02 f303 	mul.w	r3, r2, r3
 800564c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8005650:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005654:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005658:	3308      	adds	r3, #8
 800565a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800565e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005662:	4a3f      	ldr	r2, [pc, #252]	; (8005760 <VL53L0X_calc_sigma_estimate+0x490>)
 8005664:	fba2 2303 	umull	r2, r3, r2, r3
 8005668:	0b5b      	lsrs	r3, r3, #13
 800566a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800566e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005672:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005674:	429a      	cmp	r2, r3
 8005676:	d902      	bls.n	800567e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8005678:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800567a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800567e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005682:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005686:	4413      	add	r3, r2
 8005688:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800568c:	4a35      	ldr	r2, [pc, #212]	; (8005764 <VL53L0X_calc_sigma_estimate+0x494>)
 800568e:	fba2 2303 	umull	r2, r3, r2, r3
 8005692:	099b      	lsrs	r3, r3, #6
 8005694:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800569a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800569e:	441a      	add	r2, r3
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fd ffa4 	bl	80035f4 <VL53L0X_isqrt>
 80056ac:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80056ba:	4a2a      	ldr	r2, [pc, #168]	; (8005764 <VL53L0X_calc_sigma_estimate+0x494>)
 80056bc:	fba2 2303 	umull	r2, r3, r2, r3
 80056c0:	099b      	lsrs	r3, r3, #6
 80056c2:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 80056c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056c8:	fb03 f303 	mul.w	r3, r3, r3
 80056cc:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	fb03 f303 	mul.w	r3, r3, r3
 80056d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80056d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	4413      	add	r3, r2
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fd ff89 	bl	80035f4 <VL53L0X_isqrt>
 80056e2:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056ea:	fb02 f303 	mul.w	r3, r2, r3
 80056ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80056f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d009      	beq.n	800570c <VL53L0X_calc_sigma_estimate+0x43c>
 80056f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d005      	beq.n	800570c <VL53L0X_calc_sigma_estimate+0x43c>
 8005700:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005704:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005708:	429a      	cmp	r2, r3
 800570a:	d903      	bls.n	8005714 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800570c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005710:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800571a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8005726:	6939      	ldr	r1, [r7, #16]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	9303      	str	r3, [sp, #12]
 800572c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005730:	9302      	str	r3, [sp, #8]
 8005732:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005736:	9301      	str	r3, [sp, #4]
 8005738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f7ff fca8 	bl	8005098 <VL53L0X_calc_dmax>
 8005748:	4603      	mov	r3, r0
 800574a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800574e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8005752:	4618      	mov	r0, r3
 8005754:	37c0      	adds	r7, #192	; 0xc0
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	51eb851f 	.word	0x51eb851f
 8005760:	d1b71759 	.word	0xd1b71759
 8005764:	10624dd3 	.word	0x10624dd3

08005768 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b090      	sub	sp, #64	; 0x40
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	461a      	mov	r2, r3
 8005774:	460b      	mov	r3, r1
 8005776:	72fb      	strb	r3, [r7, #11]
 8005778:	4613      	mov	r3, r2
 800577a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800577c:	2300      	movs	r3, #0
 800577e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80057a0:	2300      	movs	r3, #0
 80057a2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80057a6:	2300      	movs	r3, #0
 80057a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 80057ba:	7afb      	ldrb	r3, [r7, #11]
 80057bc:	10db      	asrs	r3, r3, #3
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 80057c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d017      	beq.n	8005800 <VL53L0X_get_pal_range_status+0x98>
 80057d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80057d4:	2b05      	cmp	r3, #5
 80057d6:	d013      	beq.n	8005800 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 80057d8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80057dc:	2b07      	cmp	r3, #7
 80057de:	d00f      	beq.n	8005800 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 80057e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80057e4:	2b0c      	cmp	r3, #12
 80057e6:	d00b      	beq.n	8005800 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 80057e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80057ec:	2b0d      	cmp	r3, #13
 80057ee:	d007      	beq.n	8005800 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 80057f0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80057f4:	2b0e      	cmp	r3, #14
 80057f6:	d003      	beq.n	8005800 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80057f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80057fc:	2b0f      	cmp	r3, #15
 80057fe:	d103      	bne.n	8005808 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8005800:	2301      	movs	r3, #1
 8005802:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005806:	e002      	b.n	800580e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8005808:	2300      	movs	r3, #0
 800580a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800580e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005816:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800581a:	461a      	mov	r2, r3
 800581c:	2100      	movs	r1, #0
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f7fc f9ec 	bl	8001bfc <VL53L0X_GetLimitCheckEnable>
 8005824:	4603      	mov	r3, r0
 8005826:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800582a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800582e:	2b00      	cmp	r3, #0
 8005830:	d02e      	beq.n	8005890 <VL53L0X_get_pal_range_status+0x128>
 8005832:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005836:	2b00      	cmp	r3, #0
 8005838:	d12a      	bne.n	8005890 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800583a:	f107 0310 	add.w	r3, r7, #16
 800583e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005842:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f7ff fd43 	bl	80052d0 <VL53L0X_calc_sigma_estimate>
 800584a:	4603      	mov	r3, r0
 800584c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8005850:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005854:	2b00      	cmp	r3, #0
 8005856:	d103      	bne.n	8005860 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	b29a      	uxth	r2, r3
 800585c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800585e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8005860:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005864:	2b00      	cmp	r3, #0
 8005866:	d113      	bne.n	8005890 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8005868:	f107 0320 	add.w	r3, r7, #32
 800586c:	461a      	mov	r2, r3
 800586e:	2100      	movs	r1, #0
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f7fc fa49 	bl	8001d08 <VL53L0X_GetLimitCheckValue>
 8005876:	4603      	mov	r3, r0
 8005878:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d006      	beq.n	8005890 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8005882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005884:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8005886:	429a      	cmp	r2, r3
 8005888:	d902      	bls.n	8005890 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8005890:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005894:	2b00      	cmp	r3, #0
 8005896:	d109      	bne.n	80058ac <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005898:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800589c:	461a      	mov	r2, r3
 800589e:	2102      	movs	r1, #2
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f7fc f9ab 	bl	8001bfc <VL53L0X_GetLimitCheckEnable>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80058ac:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d044      	beq.n	800593e <VL53L0X_get_pal_range_status+0x1d6>
 80058b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d140      	bne.n	800593e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80058bc:	f107 031c 	add.w	r3, r7, #28
 80058c0:	461a      	mov	r2, r3
 80058c2:	2102      	movs	r1, #2
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f7fc fa1f 	bl	8001d08 <VL53L0X_GetLimitCheckValue>
 80058ca:	4603      	mov	r3, r0
 80058cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 80058d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d107      	bne.n	80058e8 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80058d8:	2201      	movs	r2, #1
 80058da:	21ff      	movs	r1, #255	; 0xff
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fa61 	bl	8005da4 <VL53L0X_WrByte>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 80058e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d109      	bne.n	8005904 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 80058f0:	f107 0316 	add.w	r3, r7, #22
 80058f4:	461a      	mov	r2, r3
 80058f6:	21b6      	movs	r1, #182	; 0xb6
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 faff 	bl	8005efc <VL53L0X_RdWord>
 80058fe:	4603      	mov	r3, r0
 8005900:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8005904:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005908:	2b00      	cmp	r3, #0
 800590a:	d107      	bne.n	800591c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800590c:	2200      	movs	r2, #0
 800590e:	21ff      	movs	r1, #255	; 0xff
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 fa47 	bl	8005da4 <VL53L0X_WrByte>
 8005916:	4603      	mov	r3, r0
 8005918:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800591c:	8afb      	ldrh	r3, [r7, #22]
 800591e:	025b      	lsls	r3, r3, #9
 8005920:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005926:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d006      	beq.n	800593e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8005930:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8005932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005934:	429a      	cmp	r2, r3
 8005936:	d902      	bls.n	800593e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8005938:	2301      	movs	r3, #1
 800593a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800593e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800594a:	461a      	mov	r2, r3
 800594c:	2103      	movs	r1, #3
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f7fc f954 	bl	8001bfc <VL53L0X_GetLimitCheckEnable>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800595a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800595e:	2b00      	cmp	r3, #0
 8005960:	d023      	beq.n	80059aa <VL53L0X_get_pal_range_status+0x242>
 8005962:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005966:	2b00      	cmp	r3, #0
 8005968:	d11f      	bne.n	80059aa <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800596a:	893b      	ldrh	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d102      	bne.n	8005976 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	637b      	str	r3, [r7, #52]	; 0x34
 8005974:	e005      	b.n	8005982 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	021a      	lsls	r2, r3, #8
 800597a:	893b      	ldrh	r3, [r7, #8]
 800597c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8005982:	f107 0318 	add.w	r3, r7, #24
 8005986:	461a      	mov	r2, r3
 8005988:	2103      	movs	r1, #3
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7fc f9bc 	bl	8001d08 <VL53L0X_GetLimitCheckValue>
 8005990:	4603      	mov	r3, r0
 8005992:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d006      	beq.n	80059aa <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800599c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800599e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d202      	bcs.n	80059aa <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80059aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d14a      	bne.n	8005a48 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 80059b2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d103      	bne.n	80059c2 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 80059ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059bc:	22ff      	movs	r2, #255	; 0xff
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e042      	b.n	8005a48 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 80059c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d007      	beq.n	80059da <VL53L0X_get_pal_range_status+0x272>
 80059ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d003      	beq.n	80059da <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 80059d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d103      	bne.n	80059e2 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 80059da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059dc:	2205      	movs	r2, #5
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	e032      	b.n	8005a48 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 80059e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80059e6:	2b06      	cmp	r3, #6
 80059e8:	d003      	beq.n	80059f2 <VL53L0X_get_pal_range_status+0x28a>
 80059ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80059ee:	2b09      	cmp	r3, #9
 80059f0:	d103      	bne.n	80059fa <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80059f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f4:	2204      	movs	r2, #4
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	e026      	b.n	8005a48 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80059fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d007      	beq.n	8005a12 <VL53L0X_get_pal_range_status+0x2aa>
 8005a02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005a06:	2b0a      	cmp	r3, #10
 8005a08:	d003      	beq.n	8005a12 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8005a0a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d103      	bne.n	8005a1a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8005a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a14:	2203      	movs	r2, #3
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	e016      	b.n	8005a48 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8005a1a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d003      	beq.n	8005a2a <VL53L0X_get_pal_range_status+0x2c2>
 8005a22:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d103      	bne.n	8005a32 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8005a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	e00a      	b.n	8005a48 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8005a32:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d103      	bne.n	8005a42 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8005a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	e002      	b.n	8005a48 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8005a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8005a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d102      	bne.n	8005a56 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8005a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a52:	2200      	movs	r2, #0
 8005a54:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005a56:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7fc f8cc 	bl	8001bfc <VL53L0X_GetLimitCheckEnable>
 8005a64:	4603      	mov	r3, r0
 8005a66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8005a6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d14f      	bne.n	8005b12 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8005a72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <VL53L0X_get_pal_range_status+0x31a>
 8005a7a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d103      	bne.n	8005a8a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a88:	e002      	b.n	8005a90 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005a96:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8005a9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d003      	beq.n	8005aaa <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8005aa2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ab0:	e002      	b.n	8005ab8 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005abe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8005ac2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <VL53L0X_get_pal_range_status+0x36a>
 8005aca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d103      	bne.n	8005ada <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ad8:	e002      	b.n	8005ae0 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8005ada:	2300      	movs	r3, #0
 8005adc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005ae6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8005aea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <VL53L0X_get_pal_range_status+0x392>
 8005af2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d103      	bne.n	8005b02 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8005afa:	2301      	movs	r3, #1
 8005afc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b00:	e002      	b.n	8005b08 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005b0e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005b12:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3740      	adds	r7, #64	; 0x40
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <lidar_init>:

extern I2C_HandleTypeDef hi2c3;


void lidar_init(uint8_t dir)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	71fb      	strb	r3, [r7, #7]
	  Dev->I2cHandle = &hi2c3;//el puerto i2c a usar
 8005b2a:	4b37      	ldr	r3, [pc, #220]	; (8005c08 <lidar_init+0xe8>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a37      	ldr	r2, [pc, #220]	; (8005c0c <lidar_init+0xec>)
 8005b30:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	  Dev->I2cDevAddr = dir;
 8005b34:	4b34      	ldr	r3, [pc, #208]	; (8005c08 <lidar_init+0xe8>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	79fa      	ldrb	r2, [r7, #7]
 8005b3a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
      Dev->comms_type=1;
 8005b3e:	4b32      	ldr	r3, [pc, #200]	; (8005c08 <lidar_init+0xe8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
      Dev->comms_speed_khz=400;//  i2c a 400khz
 8005b48:	4b2f      	ldr	r3, [pc, #188]	; (8005c08 <lidar_init+0xe8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005b50:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176

      VL53L0X_WaitDeviceBooted( Dev );
 8005b54:	4b2c      	ldr	r3, [pc, #176]	; (8005c08 <lidar_init+0xe8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fb fca9 	bl	80014b0 <VL53L0X_WaitDeviceBooted>
	  VL53L0X_DataInit( Dev );
 8005b5e:	4b2a      	ldr	r3, [pc, #168]	; (8005c08 <lidar_init+0xe8>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fb f9be 	bl	8000ee4 <VL53L0X_DataInit>
	  VL53L0X_StaticInit( Dev );
 8005b68:	4b27      	ldr	r3, [pc, #156]	; (8005c08 <lidar_init+0xe8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fb fb1d 	bl	80011ac <VL53L0X_StaticInit>
	  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8005b72:	4b25      	ldr	r3, [pc, #148]	; (8005c08 <lidar_init+0xe8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a26      	ldr	r2, [pc, #152]	; (8005c10 <lidar_init+0xf0>)
 8005b78:	4926      	ldr	r1, [pc, #152]	; (8005c14 <lidar_init+0xf4>)
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fc f9b8 	bl	8001ef0 <VL53L0X_PerformRefCalibration>
	  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8005b80:	4b21      	ldr	r3, [pc, #132]	; (8005c08 <lidar_init+0xe8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a24      	ldr	r2, [pc, #144]	; (8005c18 <lidar_init+0xf8>)
 8005b86:	4925      	ldr	r1, [pc, #148]	; (8005c1c <lidar_init+0xfc>)
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fc fe3f 	bl	800280c <VL53L0X_PerformRefSpadManagement>
	  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8005b8e:	4b1e      	ldr	r3, [pc, #120]	; (8005c08 <lidar_init+0xe8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2100      	movs	r1, #0
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fb fd29 	bl	80015ec <VL53L0X_SetDeviceMode>
	  // Enable/Disable Sigma and Signal check
	  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8005b9a:	4b1b      	ldr	r3, [pc, #108]	; (8005c08 <lidar_init+0xe8>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fb ff9e 	bl	8001ae4 <VL53L0X_SetLimitCheckEnable>
	  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8005ba8:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <lidar_init+0xe8>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2201      	movs	r2, #1
 8005bae:	2101      	movs	r1, #1
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fb ff97 	bl	8001ae4 <VL53L0X_SetLimitCheckEnable>
	  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8005bb6:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <lidar_init+0xe8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f641 1299 	movw	r2, #6553	; 0x1999
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fc f83f 	bl	8001c44 <VL53L0X_SetLimitCheckValue>
	  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <lidar_init+0xe8>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005bce:	2100      	movs	r1, #0
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fc f837 	bl	8001c44 <VL53L0X_SetLimitCheckValue>
	  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <lidar_init+0xe8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fb fd62 	bl	80016a8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8005be4:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <lidar_init+0xe8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2212      	movs	r2, #18
 8005bea:	2100      	movs	r1, #0
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fb fd81 	bl	80016f4 <VL53L0X_SetVcselPulsePeriod>
	  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8005bf2:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <lidar_init+0xe8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	220e      	movs	r2, #14
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fb fd7a 	bl	80016f4 <VL53L0X_SetVcselPulsePeriod>

}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	200002bc 	.word	0x200002bc
 8005c0c:	20000720 	.word	0x20000720
 8005c10:	2000068a 	.word	0x2000068a
 8005c14:	20000689 	.word	0x20000689
 8005c18:	20000688 	.word	0x20000688
 8005c1c:	20000684 	.word	0x20000684

08005c20 <lidar_lee_mm>:

uint16_t lidar_lee_mm(uint8_t dir)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4603      	mov	r3, r0
 8005c28:	71fb      	strb	r3, [r7, #7]
	uint16_t lidarmil;
	Dev->I2cDevAddr = dir;
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <lidar_lee_mm+0x40>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	79fa      	ldrb	r2, [r7, #7]
 8005c30:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 	VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8005c34:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <lidar_lee_mm+0x40>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	490a      	ldr	r1, [pc, #40]	; (8005c64 <lidar_lee_mm+0x44>)
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fc fbfa 	bl	8002434 <VL53L0X_PerformSingleRangingMeasurement>
    lidarmil=RangingData.RangeMilliMeter;
 8005c40:	4b08      	ldr	r3, [pc, #32]	; (8005c64 <lidar_lee_mm+0x44>)
 8005c42:	891b      	ldrh	r3, [r3, #8]
 8005c44:	81fb      	strh	r3, [r7, #14]
    if (lidarmil>lidar_max_mm) lidarmil=lidar_max_mm;
 8005c46:	89fb      	ldrh	r3, [r7, #14]
 8005c48:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c4c:	d902      	bls.n	8005c54 <lidar_lee_mm+0x34>
 8005c4e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005c52:	81fb      	strh	r3, [r7, #14]
 	return(lidarmil);
 8005c54:	89fb      	ldrh	r3, [r7, #14]
    }
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	200002bc 	.word	0x200002bc
 8005c64:	200004d8 	.word	0x200004d8

08005c68 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	330a      	adds	r3, #10
 8005c78:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8005c86:	b299      	uxth	r1, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	4613      	mov	r3, r2
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	f001 ff00 	bl	8007a98 <HAL_I2C_Master_Transmit>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8005c9c:	693b      	ldr	r3, [r7, #16]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b088      	sub	sp, #32
 8005caa:	af02      	add	r7, sp, #8
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	330a      	adds	r3, #10
 8005cb6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8005cc4:	f043 0301 	orr.w	r3, r3, #1
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	b299      	uxth	r1, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	f001 ffdc 	bl	8007c94 <HAL_I2C_Master_Receive>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8005ce0:	693b      	ldr	r3, [r7, #16]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	607a      	str	r2, [r7, #4]
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b3f      	cmp	r3, #63	; 0x3f
 8005d04:	d902      	bls.n	8005d0c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8005d06:	f06f 0303 	mvn.w	r3, #3
 8005d0a:	e016      	b.n	8005d3a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8005d0c:	4a0d      	ldr	r2, [pc, #52]	; (8005d44 <VL53L0X_WriteMulti+0x58>)
 8005d0e:	7afb      	ldrb	r3, [r7, #11]
 8005d10:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	480c      	ldr	r0, [pc, #48]	; (8005d48 <VL53L0X_WriteMulti+0x5c>)
 8005d18:	f003 ff24 	bl	8009b64 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	461a      	mov	r2, r3
 8005d22:	4908      	ldr	r1, [pc, #32]	; (8005d44 <VL53L0X_WriteMulti+0x58>)
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff ff9f 	bl	8005c68 <_I2CWrite>
 8005d2a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005d32:	23ec      	movs	r3, #236	; 0xec
 8005d34:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005d36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	2000068c 	.word	0x2000068c
 8005d48:	2000068d 	.word	0x2000068d

08005d4c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	607a      	str	r2, [r7, #4]
 8005d56:	603b      	str	r3, [r7, #0]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005d60:	f107 030b 	add.w	r3, r7, #11
 8005d64:	2201      	movs	r2, #1
 8005d66:	4619      	mov	r1, r3
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f7ff ff7d 	bl	8005c68 <_I2CWrite>
 8005d6e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005d76:	23ec      	movs	r3, #236	; 0xec
 8005d78:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005d7a:	e00c      	b.n	8005d96 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7ff ff90 	bl	8005ca6 <_I2CRead>
 8005d86:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005d8e:	23ec      	movs	r3, #236	; 0xec
 8005d90:	75fb      	strb	r3, [r7, #23]
 8005d92:	e000      	b.n	8005d96 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8005d94:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8005d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	70fb      	strb	r3, [r7, #3]
 8005db0:	4613      	mov	r3, r2
 8005db2:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8005db8:	4a0b      	ldr	r2, [pc, #44]	; (8005de8 <VL53L0X_WrByte+0x44>)
 8005dba:	78fb      	ldrb	r3, [r7, #3]
 8005dbc:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8005dbe:	4a0a      	ldr	r2, [pc, #40]	; (8005de8 <VL53L0X_WrByte+0x44>)
 8005dc0:	78bb      	ldrb	r3, [r7, #2]
 8005dc2:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	4908      	ldr	r1, [pc, #32]	; (8005de8 <VL53L0X_WrByte+0x44>)
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff ff4d 	bl	8005c68 <_I2CWrite>
 8005dce:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005dd6:	23ec      	movs	r3, #236	; 0xec
 8005dd8:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	2000068c 	.word	0x2000068c

08005dec <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8005e00:	4a0e      	ldr	r2, [pc, #56]	; (8005e3c <VL53L0X_WrWord+0x50>)
 8005e02:	78fb      	ldrb	r3, [r7, #3]
 8005e04:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8005e06:	883b      	ldrh	r3, [r7, #0]
 8005e08:	0a1b      	lsrs	r3, r3, #8
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <VL53L0X_WrWord+0x50>)
 8005e10:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8005e12:	883b      	ldrh	r3, [r7, #0]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <VL53L0X_WrWord+0x50>)
 8005e18:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8005e1a:	2203      	movs	r2, #3
 8005e1c:	4907      	ldr	r1, [pc, #28]	; (8005e3c <VL53L0X_WrWord+0x50>)
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff ff22 	bl	8005c68 <_I2CWrite>
 8005e24:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005e2c:	23ec      	movs	r3, #236	; 0xec
 8005e2e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8005e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	2000068c 	.word	0x2000068c

08005e40 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	4608      	mov	r0, r1
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	4603      	mov	r3, r0
 8005e50:	70fb      	strb	r3, [r7, #3]
 8005e52:	460b      	mov	r3, r1
 8005e54:	70bb      	strb	r3, [r7, #2]
 8005e56:	4613      	mov	r3, r2
 8005e58:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8005e5e:	f107 020e 	add.w	r2, r7, #14
 8005e62:	78fb      	ldrb	r3, [r7, #3]
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f81e 	bl	8005ea8 <VL53L0X_RdByte>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8005e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d110      	bne.n	8005e9a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8005e78:	7bba      	ldrb	r2, [r7, #14]
 8005e7a:	78bb      	ldrb	r3, [r7, #2]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	787b      	ldrb	r3, [r7, #1]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8005e88:	7bba      	ldrb	r2, [r7, #14]
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7ff ff88 	bl	8005da4 <VL53L0X_WrByte>
 8005e94:	4603      	mov	r3, r0
 8005e96:	73fb      	strb	r3, [r7, #15]
 8005e98:	e000      	b.n	8005e9c <VL53L0X_UpdateByte+0x5c>
        goto done;
 8005e9a:	bf00      	nop
done:
    return Status;
 8005e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005eba:	f107 030b 	add.w	r3, r7, #11
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f7ff fed0 	bl	8005c68 <_I2CWrite>
 8005ec8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005ed0:	23ec      	movs	r3, #236	; 0xec
 8005ed2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005ed4:	e00c      	b.n	8005ef0 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f7ff fee3 	bl	8005ca6 <_I2CRead>
 8005ee0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005ee8:	23ec      	movs	r3, #236	; 0xec
 8005eea:	75fb      	strb	r3, [r7, #23]
 8005eec:	e000      	b.n	8005ef0 <VL53L0X_RdByte+0x48>
    }
done:
 8005eee:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8005ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	460b      	mov	r3, r1
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005f0e:	f107 030b 	add.w	r3, r7, #11
 8005f12:	2201      	movs	r2, #1
 8005f14:	4619      	mov	r1, r3
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f7ff fea6 	bl	8005c68 <_I2CWrite>
 8005f1c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005f24:	23ec      	movs	r3, #236	; 0xec
 8005f26:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005f28:	e017      	b.n	8005f5a <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	490e      	ldr	r1, [pc, #56]	; (8005f68 <VL53L0X_RdWord+0x6c>)
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f7ff feb9 	bl	8005ca6 <_I2CRead>
 8005f34:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005f3c:	23ec      	movs	r3, #236	; 0xec
 8005f3e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005f40:	e00b      	b.n	8005f5a <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8005f42:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <VL53L0X_RdWord+0x6c>)
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	021b      	lsls	r3, r3, #8
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <VL53L0X_RdWord+0x6c>)
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	4413      	add	r3, r2
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8005f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	2000068c 	.word	0x2000068c

08005f6c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	460b      	mov	r3, r1
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8005f7e:	f107 030b 	add.w	r3, r7, #11
 8005f82:	2201      	movs	r2, #1
 8005f84:	4619      	mov	r1, r3
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7ff fe6e 	bl	8005c68 <_I2CWrite>
 8005f8c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005f94:	23ec      	movs	r3, #236	; 0xec
 8005f96:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005f98:	e01b      	b.n	8005fd2 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8005f9a:	2204      	movs	r2, #4
 8005f9c:	4910      	ldr	r1, [pc, #64]	; (8005fe0 <VL53L0X_RdDWord+0x74>)
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f7ff fe81 	bl	8005ca6 <_I2CRead>
 8005fa4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005fac:	23ec      	movs	r3, #236	; 0xec
 8005fae:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005fb0:	e00f      	b.n	8005fd2 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <VL53L0X_RdDWord+0x74>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	061a      	lsls	r2, r3, #24
 8005fb8:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <VL53L0X_RdDWord+0x74>)
 8005fba:	785b      	ldrb	r3, [r3, #1]
 8005fbc:	041b      	lsls	r3, r3, #16
 8005fbe:	441a      	add	r2, r3
 8005fc0:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <VL53L0X_RdDWord+0x74>)
 8005fc2:	789b      	ldrb	r3, [r3, #2]
 8005fc4:	021b      	lsls	r3, r3, #8
 8005fc6:	4413      	add	r3, r2
 8005fc8:	4a05      	ldr	r2, [pc, #20]	; (8005fe0 <VL53L0X_RdDWord+0x74>)
 8005fca:	78d2      	ldrb	r2, [r2, #3]
 8005fcc:	441a      	add	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8005fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	2000068c 	.word	0x2000068c

08005fe4 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005fec:	2300      	movs	r3, #0
 8005fee:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8005ff0:	2002      	movs	r0, #2
 8005ff2:	f001 f94d 	bl	8007290 <HAL_Delay>
    return status;
 8005ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <uartx_write>:
#include "uart.h"
#include "stdio.h"
#include "string.h"

void uartx_write(UART_HandleTypeDef *huart,uint8_t ch)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b082      	sub	sp, #8
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	460b      	mov	r3, r1
 800600c:	70fb      	strb	r3, [r7, #3]
HAL_UART_Transmit(huart, &ch, 1, 0xffff);
 800600e:	1cf9      	adds	r1, r7, #3
 8006010:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006014:	2201      	movs	r2, #1
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f003 fa05 	bl	8009426 <HAL_UART_Transmit>

}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <uartx_write_text>:

void uartx_write_text(UART_HandleTypeDef *huart, uint8_t *info)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]

while(*info)  uartx_write(huart,*info++);
 800602e:	e007      	b.n	8006040 <uartx_write_text+0x1c>
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	603a      	str	r2, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff ffe1 	bl	8006002 <uartx_write>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1f3      	bne.n	8006030 <uartx_write_text+0xc>

}
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
unsigned int acumulador = 0;
 800605a:	2300      	movs	r3, #0
 800605c:	60fb      	str	r3, [r7, #12]
unsigned int contador = 0;
 800605e:	2300      	movs	r3, #0
 8006060:	60bb      	str	r3, [r7, #8]
unsigned int milimetros_promedio = 0;
 8006062:	2300      	movs	r3, #0
 8006064:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006066:	f001 f8a1 	bl	80071ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800606a:	f000 facf 	bl	800660c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800606e:	f000 fbbf 	bl	80067f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8006072:	f000 fb93 	bl	800679c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8006076:	f000 fb35 	bl	80066e4 <MX_I2C1_Init>
  MX_I2C3_Init();
 800607a:	f000 fb61 	bl	8006740 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  lidar_init(dir_s1);
 800607e:	2052      	movs	r0, #82	; 0x52
 8006080:	f7ff fd4e 	bl	8005b20 <lidar_init>
  ssd1306_Init();
 8006084:	f000 fc60 	bl	8006948 <ssd1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  chequeoPulsador();
 8006088:	f000 f882 	bl	8006190 <chequeoPulsador>

	   	milimetros=lidar_lee_mm(dir_s1);
 800608c:	2052      	movs	r0, #82	; 0x52
 800608e:	f7ff fdc7 	bl	8005c20 <lidar_lee_mm>
 8006092:	4603      	mov	r3, r0
 8006094:	ee07 3a90 	vmov	s15, r3
 8006098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609c:	4b31      	ldr	r3, [pc, #196]	; (8006164 <main+0x110>)
 800609e:	edc3 7a00 	vstr	s15, [r3]
	   	milimetrosCalib = milimetros * A + B;
 80060a2:	4b30      	ldr	r3, [pc, #192]	; (8006164 <main+0x110>)
 80060a4:	ed93 7a00 	vldr	s14, [r3]
 80060a8:	4b2f      	ldr	r3, [pc, #188]	; (8006168 <main+0x114>)
 80060aa:	edd3 7a00 	vldr	s15, [r3]
 80060ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060b2:	4b2e      	ldr	r3, [pc, #184]	; (800616c <main+0x118>)
 80060b4:	edd3 7a00 	vldr	s15, [r3]
 80060b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060bc:	4b2c      	ldr	r3, [pc, #176]	; (8006170 <main+0x11c>)
 80060be:	edc3 7a00 	vstr	s15, [r3]
	   	acumulador += milimetrosCalib;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	ee07 3a90 	vmov	s15, r3
 80060c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060cc:	4b28      	ldr	r3, [pc, #160]	; (8006170 <main+0x11c>)
 80060ce:	edd3 7a00 	vldr	s15, [r3]
 80060d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060da:	ee17 3a90 	vmov	r3, s15
 80060de:	60fb      	str	r3, [r7, #12]
	   	contador++;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	3301      	adds	r3, #1
 80060e4:	60bb      	str	r3, [r7, #8]

	   	// Cada 20 muestras, calcular el promedio y reiniciar el acumulador y contador
	   	        if (contador == MAX_MUESTRAS) {
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2b19      	cmp	r3, #25
 80060ea:	d109      	bne.n	8006100 <main+0xac>
	   	            milimetros_promedio = acumulador / MAX_MUESTRAS;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4a21      	ldr	r2, [pc, #132]	; (8006174 <main+0x120>)
 80060f0:	fba2 2303 	umull	r2, r3, r2, r3
 80060f4:	08db      	lsrs	r3, r3, #3
 80060f6:	607b      	str	r3, [r7, #4]

	   	            	   	            // Reiniciar el acumulador y el contador
	   	            acumulador = 0;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]
	   	            contador = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60bb      	str	r3, [r7, #8]
	   	        }

		        if (distancia<0)  uartx_write_text(&huart2, "SENSOR NO CONECTADO\r\n");
 8006100:	4b1d      	ldr	r3, [pc, #116]	; (8006178 <main+0x124>)
 8006102:	edd3 7a00 	vldr	s15, [r3]
 8006106:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800610a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800610e:	d504      	bpl.n	800611a <main+0xc6>
 8006110:	491a      	ldr	r1, [pc, #104]	; (800617c <main+0x128>)
 8006112:	481b      	ldr	r0, [pc, #108]	; (8006180 <main+0x12c>)
 8006114:	f7ff ff86 	bl	8006024 <uartx_write_text>
 8006118:	e008      	b.n	800612c <main+0xd8>
		        else
		        {
		      	  sprintf(texto,"%u mm\r\n",milimetros_promedio);
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	4919      	ldr	r1, [pc, #100]	; (8006184 <main+0x130>)
 800611e:	481a      	ldr	r0, [pc, #104]	; (8006188 <main+0x134>)
 8006120:	f004 fa30 	bl	800a584 <siprintf>
		            uartx_write_text(&huart2, texto);
 8006124:	4918      	ldr	r1, [pc, #96]	; (8006188 <main+0x134>)
 8006126:	4816      	ldr	r0, [pc, #88]	; (8006180 <main+0x12c>)
 8006128:	f7ff ff7c 	bl	8006024 <uartx_write_text>

		        }

		        HAL_Delay(10);
 800612c:	200a      	movs	r0, #10
 800612e:	f001 f8af 	bl	8007290 <HAL_Delay>

		        ssd1306_Reset();
 8006132:	f000 fbd0 	bl	80068d6 <ssd1306_Reset>

		        y = 0;
 8006136:	2300      	movs	r3, #0
 8006138:	70fb      	strb	r3, [r7, #3]
		        ssd1306_Fill(Black);
 800613a:	2000      	movs	r0, #0
 800613c:	f000 fc6e 	bl	8006a1c <ssd1306_Fill>

		        #ifdef SSD1306_INCLUDE_FONT_16x26
		    	ssd1306_SetCursor(2, y);
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	4619      	mov	r1, r3
 8006144:	2002      	movs	r0, #2
 8006146:	f000 fdab 	bl	8006ca0 <ssd1306_SetCursor>
		    	ssd1306_WriteString(&texto, Font_16x26, White);
 800614a:	4a10      	ldr	r2, [pc, #64]	; (800618c <main+0x138>)
 800614c:	2301      	movs	r3, #1
 800614e:	ca06      	ldmia	r2, {r1, r2}
 8006150:	480d      	ldr	r0, [pc, #52]	; (8006188 <main+0x134>)
 8006152:	f000 fd7f 	bl	8006c54 <ssd1306_WriteString>
		    	y += 26;
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	331a      	adds	r3, #26
 800615a:	70fb      	strb	r3, [r7, #3]
		    	#endif

		    	ssd1306_UpdateScreen();
 800615c:	f000 fc76 	bl	8006a4c <ssd1306_UpdateScreen>
	  chequeoPulsador();
 8006160:	e792      	b.n	8006088 <main+0x34>
 8006162:	bf00      	nop
 8006164:	200007b8 	.word	0x200007b8
 8006168:	200002cc 	.word	0x200002cc
 800616c:	200007cc 	.word	0x200007cc
 8006170:	200007c0 	.word	0x200007c0
 8006174:	51eb851f 	.word	0x51eb851f
 8006178:	200007d4 	.word	0x200007d4
 800617c:	0800ca50 	.word	0x0800ca50
 8006180:	20000774 	.word	0x20000774
 8006184:	0800ca68 	.word	0x0800ca68
 8006188:	200007d8 	.word	0x200007d8
 800618c:	200002d8 	.word	0x200002d8

08006190 <chequeoPulsador>:
  * @brief System Clock Configuration
  * @retval None
  */


void chequeoPulsador(void){
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
	// Verificar si el botón B1 está presionado
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8006196:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800619a:	4832      	ldr	r0, [pc, #200]	; (8006264 <chequeoPulsador+0xd4>)
 800619c:	f001 fb06 	bl	80077ac <HAL_GPIO_ReadPin>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d157      	bne.n	8006256 <chequeoPulsador+0xc6>
	// El botón está presionado, leer el valor del sensor
	    HAL_Delay(100);  // Debounce del botón
 80061a6:	2064      	movs	r0, #100	; 0x64
 80061a8:	f001 f872 	bl	8007290 <HAL_Delay>
	    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80061ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061b0:	482c      	ldr	r0, [pc, #176]	; (8006264 <chequeoPulsador+0xd4>)
 80061b2:	f001 fafb 	bl	80077ac <HAL_GPIO_ReadPin>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d14f      	bne.n	800625c <chequeoPulsador+0xcc>
	    // Seguro que el botón sigue presionado
	       boton_presionado = 1;
 80061bc:	4b2a      	ldr	r3, [pc, #168]	; (8006268 <chequeoPulsador+0xd8>)
 80061be:	2201      	movs	r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

	       calibracion_100mm();
 80061c2:	f000 f869 	bl	8006298 <calibracion_100mm>

	       calibracion_1900mm();
 80061c6:	f000 f923 	bl	8006410 <calibracion_1900mm>

	       Factor_Calibracion(valor_calibracion_100mm,valor_calibracion_1900mm,y1,y2,&A,&B);
 80061ca:	4b28      	ldr	r3, [pc, #160]	; (800626c <chequeoPulsador+0xdc>)
 80061cc:	edd3 7a00 	vldr	s15, [r3]
 80061d0:	4b27      	ldr	r3, [pc, #156]	; (8006270 <chequeoPulsador+0xe0>)
 80061d2:	ed93 7a00 	vldr	s14, [r3]
 80061d6:	4b27      	ldr	r3, [pc, #156]	; (8006274 <chequeoPulsador+0xe4>)
 80061d8:	edd3 6a00 	vldr	s13, [r3]
 80061dc:	4b26      	ldr	r3, [pc, #152]	; (8006278 <chequeoPulsador+0xe8>)
 80061de:	ed93 6a00 	vldr	s12, [r3]
 80061e2:	4926      	ldr	r1, [pc, #152]	; (800627c <chequeoPulsador+0xec>)
 80061e4:	4826      	ldr	r0, [pc, #152]	; (8006280 <chequeoPulsador+0xf0>)
 80061e6:	eef0 1a46 	vmov.f32	s3, s12
 80061ea:	eeb0 1a66 	vmov.f32	s2, s13
 80061ee:	eef0 0a47 	vmov.f32	s1, s14
 80061f2:	eeb0 0a67 	vmov.f32	s0, s15
 80061f6:	f000 f9c7 	bl	8006588 <Factor_Calibracion>

	       sprintf(texto2,"Factor: %u mm \n",factorCalibracion);
 80061fa:	4b22      	ldr	r3, [pc, #136]	; (8006284 <chequeoPulsador+0xf4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fa f9aa 	bl	8000558 <__aeabi_f2d>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	491f      	ldr	r1, [pc, #124]	; (8006288 <chequeoPulsador+0xf8>)
 800620a:	4820      	ldr	r0, [pc, #128]	; (800628c <chequeoPulsador+0xfc>)
 800620c:	f004 f9ba 	bl	800a584 <siprintf>
		                  //uartx_write_text(&huart2, texto2);
	       HAL_UART_Transmit(&huart2, (uint8_t*)texto2, strlen(texto2), HAL_MAX_DELAY);
 8006210:	481e      	ldr	r0, [pc, #120]	; (800628c <chequeoPulsador+0xfc>)
 8006212:	f7f9 ffe5 	bl	80001e0 <strlen>
 8006216:	4603      	mov	r3, r0
 8006218:	b29a      	uxth	r2, r3
 800621a:	f04f 33ff 	mov.w	r3, #4294967295
 800621e:	491b      	ldr	r1, [pc, #108]	; (800628c <chequeoPulsador+0xfc>)
 8006220:	481b      	ldr	r0, [pc, #108]	; (8006290 <chequeoPulsador+0x100>)
 8006222:	f003 f900 	bl	8009426 <HAL_UART_Transmit>

	       ssd1306_Reset();
 8006226:	f000 fb56 	bl	80068d6 <ssd1306_Reset>

	       uint8_t y = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	71fb      	strb	r3, [r7, #7]
	       ssd1306_Fill(Black);
 800622e:	2000      	movs	r0, #0
 8006230:	f000 fbf4 	bl	8006a1c <ssd1306_Fill>

		#ifdef SSD1306_INCLUDE_FONT_16x26
	       ssd1306_SetCursor(2, y);
 8006234:	79fb      	ldrb	r3, [r7, #7]
 8006236:	4619      	mov	r1, r3
 8006238:	2002      	movs	r0, #2
 800623a:	f000 fd31 	bl	8006ca0 <ssd1306_SetCursor>
	       ssd1306_WriteString(&texto2, Font_16x26, White);
 800623e:	4a15      	ldr	r2, [pc, #84]	; (8006294 <chequeoPulsador+0x104>)
 8006240:	2301      	movs	r3, #1
 8006242:	ca06      	ldmia	r2, {r1, r2}
 8006244:	4811      	ldr	r0, [pc, #68]	; (800628c <chequeoPulsador+0xfc>)
 8006246:	f000 fd05 	bl	8006c54 <ssd1306_WriteString>
	       y += 26;
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	331a      	adds	r3, #26
 800624e:	71fb      	strb	r3, [r7, #7]
		#endif



	       ssd1306_UpdateScreen();
 8006250:	f000 fbfc 	bl	8006a4c <ssd1306_UpdateScreen>
		// El botón no está presionado
		boton_presionado = 0;

	}

}
 8006254:	e002      	b.n	800625c <chequeoPulsador+0xcc>
		boton_presionado = 0;
 8006256:	4b04      	ldr	r3, [pc, #16]	; (8006268 <chequeoPulsador+0xd8>)
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]
}
 800625c:	bf00      	nop
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	40020800 	.word	0x40020800
 8006268:	200007d0 	.word	0x200007d0
 800626c:	200007c4 	.word	0x200007c4
 8006270:	200007c8 	.word	0x200007c8
 8006274:	200002c4 	.word	0x200002c4
 8006278:	200002c8 	.word	0x200002c8
 800627c:	200007cc 	.word	0x200007cc
 8006280:	200002cc 	.word	0x200002cc
 8006284:	200002c0 	.word	0x200002c0
 8006288:	0800ca70 	.word	0x0800ca70
 800628c:	2000083c 	.word	0x2000083c
 8006290:	20000774 	.word	0x20000774
 8006294:	200002d8 	.word	0x200002d8

08006298 <calibracion_100mm>:
void calibracion_100mm(void) {
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0

	unsigned int acumulador = 0;
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]
	unsigned int contador = 0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60bb      	str	r3, [r7, #8]
	unsigned int milimetros_promedio = 0;
 80062a6:	2300      	movs	r3, #0
 80062a8:	607b      	str	r3, [r7, #4]

	sprintf(texto2,"C 100 mm OK");
 80062aa:	494c      	ldr	r1, [pc, #304]	; (80063dc <calibracion_100mm+0x144>)
 80062ac:	484c      	ldr	r0, [pc, #304]	; (80063e0 <calibracion_100mm+0x148>)
 80062ae:	f004 f969 	bl	800a584 <siprintf>
	//uartx_write_text(&huart2, texto2);
	HAL_UART_Transmit(&huart2, (uint8_t*)texto2, strlen(texto2), HAL_MAX_DELAY);
 80062b2:	484b      	ldr	r0, [pc, #300]	; (80063e0 <calibracion_100mm+0x148>)
 80062b4:	f7f9 ff94 	bl	80001e0 <strlen>
 80062b8:	4603      	mov	r3, r0
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	f04f 33ff 	mov.w	r3, #4294967295
 80062c0:	4947      	ldr	r1, [pc, #284]	; (80063e0 <calibracion_100mm+0x148>)
 80062c2:	4848      	ldr	r0, [pc, #288]	; (80063e4 <calibracion_100mm+0x14c>)
 80062c4:	f003 f8af 	bl	8009426 <HAL_UART_Transmit>

	ssd1306_Reset();
 80062c8:	f000 fb05 	bl	80068d6 <ssd1306_Reset>

	uint8_t y = 0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	70fb      	strb	r3, [r7, #3]
	ssd1306_Fill(Black);
 80062d0:	2000      	movs	r0, #0
 80062d2:	f000 fba3 	bl	8006a1c <ssd1306_Fill>

	#ifdef SSD1306_INCLUDE_FONT_11x18
	ssd1306_SetCursor(2, y);
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	4619      	mov	r1, r3
 80062da:	2002      	movs	r0, #2
 80062dc:	f000 fce0 	bl	8006ca0 <ssd1306_SetCursor>
	ssd1306_WriteString(&texto2, Font_11x18, White);
 80062e0:	4a41      	ldr	r2, [pc, #260]	; (80063e8 <calibracion_100mm+0x150>)
 80062e2:	2301      	movs	r3, #1
 80062e4:	ca06      	ldmia	r2, {r1, r2}
 80062e6:	483e      	ldr	r0, [pc, #248]	; (80063e0 <calibracion_100mm+0x148>)
 80062e8:	f000 fcb4 	bl	8006c54 <ssd1306_WriteString>
	y += 26;
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	331a      	adds	r3, #26
 80062f0:	70fb      	strb	r3, [r7, #3]
	#endif

	ssd1306_UpdateScreen();
 80062f2:	f000 fbab 	bl	8006a4c <ssd1306_UpdateScreen>
    // Esperar hasta que el botón esté presionado
    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 80062f6:	e04b      	b.n	8006390 <calibracion_100mm+0xf8>
        // Puedes agregar un pequeño retardo aquí para evitar lecturas rápidas
        HAL_Delay(50);
 80062f8:	2032      	movs	r0, #50	; 0x32
 80062fa:	f000 ffc9 	bl	8007290 <HAL_Delay>

        medicion=lidar_lee_mm(dir_s1);
 80062fe:	2052      	movs	r0, #82	; 0x52
 8006300:	f7ff fc8e 	bl	8005c20 <lidar_lee_mm>
 8006304:	4603      	mov	r3, r0
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630e:	4b37      	ldr	r3, [pc, #220]	; (80063ec <calibracion_100mm+0x154>)
 8006310:	edc3 7a00 	vstr	s15, [r3]
        acumulador += medicion;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800631e:	4b33      	ldr	r3, [pc, #204]	; (80063ec <calibracion_100mm+0x154>)
 8006320:	edd3 7a00 	vldr	s15, [r3]
 8006324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800632c:	ee17 3a90 	vmov	r3, s15
 8006330:	60fb      	str	r3, [r7, #12]
        contador++;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	3301      	adds	r3, #1
 8006336:	60bb      	str	r3, [r7, #8]

        // Cada 20 muestras, calcular el promedio y reiniciar el acumulador y contador
           if (contador == MAX_MUESTRAS) {
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b19      	cmp	r3, #25
 800633c:	d109      	bne.n	8006352 <calibracion_100mm+0xba>
           milimetros_promedio = acumulador / MAX_MUESTRAS;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4a2b      	ldr	r2, [pc, #172]	; (80063f0 <calibracion_100mm+0x158>)
 8006342:	fba2 2303 	umull	r2, r3, r2, r3
 8006346:	08db      	lsrs	r3, r3, #3
 8006348:	607b      	str	r3, [r7, #4]

        // Reiniciar el acumulador y el contador
            acumulador = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
            contador = 0;
 800634e:	2300      	movs	r3, #0
 8006350:	60bb      	str	r3, [r7, #8]
            }

           if (distancia<0)  uartx_write_text(&huart2, "SENSOR NO CONECTADO\r\n");
 8006352:	4b28      	ldr	r3, [pc, #160]	; (80063f4 <calibracion_100mm+0x15c>)
 8006354:	edd3 7a00 	vldr	s15, [r3]
 8006358:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800635c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006360:	d504      	bpl.n	800636c <calibracion_100mm+0xd4>
 8006362:	4925      	ldr	r1, [pc, #148]	; (80063f8 <calibracion_100mm+0x160>)
 8006364:	481f      	ldr	r0, [pc, #124]	; (80063e4 <calibracion_100mm+0x14c>)
 8006366:	f7ff fe5d 	bl	8006024 <uartx_write_text>
 800636a:	e004      	b.n	8006376 <calibracion_100mm+0xde>
           else
              {
        	   sprintf(texto3,"%u mm\r\n",milimetros_promedio);
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	4923      	ldr	r1, [pc, #140]	; (80063fc <calibracion_100mm+0x164>)
 8006370:	4823      	ldr	r0, [pc, #140]	; (8006400 <calibracion_100mm+0x168>)
 8006372:	f004 f907 	bl	800a584 <siprintf>
              }

	#ifdef SSD1306_INCLUDE_FONT_16x26
	   ssd1306_SetCursor(2, y);
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	4619      	mov	r1, r3
 800637a:	2002      	movs	r0, #2
 800637c:	f000 fc90 	bl	8006ca0 <ssd1306_SetCursor>
	   ssd1306_WriteString(&texto3, Font_16x26, White);
 8006380:	4a20      	ldr	r2, [pc, #128]	; (8006404 <calibracion_100mm+0x16c>)
 8006382:	2301      	movs	r3, #1
 8006384:	ca06      	ldmia	r2, {r1, r2}
 8006386:	481e      	ldr	r0, [pc, #120]	; (8006400 <calibracion_100mm+0x168>)
 8006388:	f000 fc64 	bl	8006c54 <ssd1306_WriteString>
	   //y += 26; // Puedes ajustar esta cantidad según el tamaño de fuente que estés usando
	#endif
	   ssd1306_UpdateScreen();
 800638c:	f000 fb5e 	bl	8006a4c <ssd1306_UpdateScreen>
    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8006390:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006394:	481c      	ldr	r0, [pc, #112]	; (8006408 <calibracion_100mm+0x170>)
 8006396:	f001 fa09 	bl	80077ac <HAL_GPIO_ReadPin>
 800639a:	4603      	mov	r3, r0
 800639c:	2b01      	cmp	r3, #1
 800639e:	d0ab      	beq.n	80062f8 <calibracion_100mm+0x60>
    }

    // Debounce del botón
    HAL_Delay(100);
 80063a0:	2064      	movs	r0, #100	; 0x64
 80063a2:	f000 ff75 	bl	8007290 <HAL_Delay>


    // Esperar hasta que el botón esté presionado de nuevo
    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 80063a6:	e002      	b.n	80063ae <calibracion_100mm+0x116>
        // Puedes agregar un pequeño retardo aquí para evitar lecturas rápidas
        HAL_Delay(50);
 80063a8:	2032      	movs	r0, #50	; 0x32
 80063aa:	f000 ff71 	bl	8007290 <HAL_Delay>
    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 80063ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063b2:	4815      	ldr	r0, [pc, #84]	; (8006408 <calibracion_100mm+0x170>)
 80063b4:	f001 f9fa 	bl	80077ac <HAL_GPIO_ReadPin>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d0f4      	beq.n	80063a8 <calibracion_100mm+0x110>
    }

    // Ahora el botón está seguro de que está presionado, realizar la operación del sensor
    valor_calibracion_100mm = lidar_lee_mm(dir_s1);
 80063be:	2052      	movs	r0, #82	; 0x52
 80063c0:	f7ff fc2e 	bl	8005c20 <lidar_lee_mm>
 80063c4:	4603      	mov	r3, r0
 80063c6:	ee07 3a90 	vmov	s15, r3
 80063ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ce:	4b0f      	ldr	r3, [pc, #60]	; (800640c <calibracion_100mm+0x174>)
 80063d0:	edc3 7a00 	vstr	s15, [r3]
}
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	0800ca80 	.word	0x0800ca80
 80063e0:	2000083c 	.word	0x2000083c
 80063e4:	20000774 	.word	0x20000774
 80063e8:	200002d0 	.word	0x200002d0
 80063ec:	200007bc 	.word	0x200007bc
 80063f0:	51eb851f 	.word	0x51eb851f
 80063f4:	200007d4 	.word	0x200007d4
 80063f8:	0800ca50 	.word	0x0800ca50
 80063fc:	0800ca68 	.word	0x0800ca68
 8006400:	200008a0 	.word	0x200008a0
 8006404:	200002d8 	.word	0x200002d8
 8006408:	40020800 	.word	0x40020800
 800640c:	200007c4 	.word	0x200007c4

08006410 <calibracion_1900mm>:

void calibracion_1900mm(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
	unsigned int acumulador = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]
	unsigned int contador = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	60bb      	str	r3, [r7, #8]
	unsigned int milimetros_promedio = 0;
 800641e:	2300      	movs	r3, #0
 8006420:	607b      	str	r3, [r7, #4]

	sprintf(texto2,"C 1900 mm OK");
 8006422:	494c      	ldr	r1, [pc, #304]	; (8006554 <calibracion_1900mm+0x144>)
 8006424:	484c      	ldr	r0, [pc, #304]	; (8006558 <calibracion_1900mm+0x148>)
 8006426:	f004 f8ad 	bl	800a584 <siprintf>
		//uartx_write_text(&huart2, texto2);
		HAL_UART_Transmit(&huart2, (uint8_t*)texto2, strlen(texto2), HAL_MAX_DELAY);
 800642a:	484b      	ldr	r0, [pc, #300]	; (8006558 <calibracion_1900mm+0x148>)
 800642c:	f7f9 fed8 	bl	80001e0 <strlen>
 8006430:	4603      	mov	r3, r0
 8006432:	b29a      	uxth	r2, r3
 8006434:	f04f 33ff 	mov.w	r3, #4294967295
 8006438:	4947      	ldr	r1, [pc, #284]	; (8006558 <calibracion_1900mm+0x148>)
 800643a:	4848      	ldr	r0, [pc, #288]	; (800655c <calibracion_1900mm+0x14c>)
 800643c:	f002 fff3 	bl	8009426 <HAL_UART_Transmit>

		ssd1306_Reset();
 8006440:	f000 fa49 	bl	80068d6 <ssd1306_Reset>

		uint8_t y = 0;
 8006444:	2300      	movs	r3, #0
 8006446:	70fb      	strb	r3, [r7, #3]
		ssd1306_Fill(Black);
 8006448:	2000      	movs	r0, #0
 800644a:	f000 fae7 	bl	8006a1c <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	       ssd1306_SetCursor(2, y);
 800644e:	78fb      	ldrb	r3, [r7, #3]
 8006450:	4619      	mov	r1, r3
 8006452:	2002      	movs	r0, #2
 8006454:	f000 fc24 	bl	8006ca0 <ssd1306_SetCursor>
	       ssd1306_WriteString(&texto2, Font_11x18, White);
 8006458:	4a41      	ldr	r2, [pc, #260]	; (8006560 <calibracion_1900mm+0x150>)
 800645a:	2301      	movs	r3, #1
 800645c:	ca06      	ldmia	r2, {r1, r2}
 800645e:	483e      	ldr	r0, [pc, #248]	; (8006558 <calibracion_1900mm+0x148>)
 8006460:	f000 fbf8 	bl	8006c54 <ssd1306_WriteString>
	       y += 26;
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	331a      	adds	r3, #26
 8006468:	70fb      	strb	r3, [r7, #3]
		#endif

	ssd1306_UpdateScreen();
 800646a:	f000 faef 	bl	8006a4c <ssd1306_UpdateScreen>

	 // Esperar hasta que el botón esté presionado
	    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 800646e:	e04b      	b.n	8006508 <calibracion_1900mm+0xf8>
	        // Puedes agregar un pequeño retardo aquí para evitar lecturas rápidas
	        HAL_Delay(50);
 8006470:	2032      	movs	r0, #50	; 0x32
 8006472:	f000 ff0d 	bl	8007290 <HAL_Delay>
	        medicion=lidar_lee_mm(dir_s1);
 8006476:	2052      	movs	r0, #82	; 0x52
 8006478:	f7ff fbd2 	bl	8005c20 <lidar_lee_mm>
 800647c:	4603      	mov	r3, r0
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006486:	4b37      	ldr	r3, [pc, #220]	; (8006564 <calibracion_1900mm+0x154>)
 8006488:	edc3 7a00 	vstr	s15, [r3]
	        acumulador += medicion;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006496:	4b33      	ldr	r3, [pc, #204]	; (8006564 <calibracion_1900mm+0x154>)
 8006498:	edd3 7a00 	vldr	s15, [r3]
 800649c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064a4:	ee17 3a90 	vmov	r3, s15
 80064a8:	60fb      	str	r3, [r7, #12]
	        contador++;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	3301      	adds	r3, #1
 80064ae:	60bb      	str	r3, [r7, #8]

	        // Cada 20 muestras, calcular el promedio y reiniciar el acumulador y contador
	        if (contador == MAX_MUESTRAS) {
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b19      	cmp	r3, #25
 80064b4:	d109      	bne.n	80064ca <calibracion_1900mm+0xba>
	        	milimetros_promedio = acumulador / MAX_MUESTRAS;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4a2b      	ldr	r2, [pc, #172]	; (8006568 <calibracion_1900mm+0x158>)
 80064ba:	fba2 2303 	umull	r2, r3, r2, r3
 80064be:	08db      	lsrs	r3, r3, #3
 80064c0:	607b      	str	r3, [r7, #4]

	          // Reiniciar el acumulador y el contador
	            acumulador = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
	            contador = 0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60bb      	str	r3, [r7, #8]
	             }

	            if (distancia<0)  uartx_write_text(&huart2, "SENSOR NO CONECTADO\r\n");
 80064ca:	4b28      	ldr	r3, [pc, #160]	; (800656c <calibracion_1900mm+0x15c>)
 80064cc:	edd3 7a00 	vldr	s15, [r3]
 80064d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d8:	d504      	bpl.n	80064e4 <calibracion_1900mm+0xd4>
 80064da:	4925      	ldr	r1, [pc, #148]	; (8006570 <calibracion_1900mm+0x160>)
 80064dc:	481f      	ldr	r0, [pc, #124]	; (800655c <calibracion_1900mm+0x14c>)
 80064de:	f7ff fda1 	bl	8006024 <uartx_write_text>
 80064e2:	e004      	b.n	80064ee <calibracion_1900mm+0xde>
	            else
	            {
	               sprintf(texto3,"%u mm\r\n",milimetros_promedio);
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	4923      	ldr	r1, [pc, #140]	; (8006574 <calibracion_1900mm+0x164>)
 80064e8:	4823      	ldr	r0, [pc, #140]	; (8006578 <calibracion_1900mm+0x168>)
 80064ea:	f004 f84b 	bl	800a584 <siprintf>
	            }

	        #ifdef SSD1306_INCLUDE_FONT_16x26
	           ssd1306_SetCursor(2, y);
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	4619      	mov	r1, r3
 80064f2:	2002      	movs	r0, #2
 80064f4:	f000 fbd4 	bl	8006ca0 <ssd1306_SetCursor>
	           ssd1306_WriteString(&texto3, Font_16x26, White);
 80064f8:	4a20      	ldr	r2, [pc, #128]	; (800657c <calibracion_1900mm+0x16c>)
 80064fa:	2301      	movs	r3, #1
 80064fc:	ca06      	ldmia	r2, {r1, r2}
 80064fe:	481e      	ldr	r0, [pc, #120]	; (8006578 <calibracion_1900mm+0x168>)
 8006500:	f000 fba8 	bl	8006c54 <ssd1306_WriteString>
	           //y += 26; // Puedes ajustar esta cantidad según el tamaño de fuente que estés usando
	        #endif
	           ssd1306_UpdateScreen();
 8006504:	f000 faa2 	bl	8006a4c <ssd1306_UpdateScreen>
	    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8006508:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800650c:	481c      	ldr	r0, [pc, #112]	; (8006580 <calibracion_1900mm+0x170>)
 800650e:	f001 f94d 	bl	80077ac <HAL_GPIO_ReadPin>
 8006512:	4603      	mov	r3, r0
 8006514:	2b01      	cmp	r3, #1
 8006516:	d0ab      	beq.n	8006470 <calibracion_1900mm+0x60>
	    }

	    // Debounce del botón
	    HAL_Delay(100);
 8006518:	2064      	movs	r0, #100	; 0x64
 800651a:	f000 feb9 	bl	8007290 <HAL_Delay>

	    // Esperar hasta que el botón esté presionado de nuevo
	    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 800651e:	e002      	b.n	8006526 <calibracion_1900mm+0x116>
	        // Puedes agregar un pequeño retardo aquí para evitar lecturas rápidas
	        HAL_Delay(50);
 8006520:	2032      	movs	r0, #50	; 0x32
 8006522:	f000 feb5 	bl	8007290 <HAL_Delay>
	    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8006526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800652a:	4815      	ldr	r0, [pc, #84]	; (8006580 <calibracion_1900mm+0x170>)
 800652c:	f001 f93e 	bl	80077ac <HAL_GPIO_ReadPin>
 8006530:	4603      	mov	r3, r0
 8006532:	2b01      	cmp	r3, #1
 8006534:	d0f4      	beq.n	8006520 <calibracion_1900mm+0x110>
	    }

	    // Ahora el botón está seguro de que está presionado, realizar la operación del sensor
	    valor_calibracion_1900mm = lidar_lee_mm(dir_s1);
 8006536:	2052      	movs	r0, #82	; 0x52
 8006538:	f7ff fb72 	bl	8005c20 <lidar_lee_mm>
 800653c:	4603      	mov	r3, r0
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006546:	4b0f      	ldr	r3, [pc, #60]	; (8006584 <calibracion_1900mm+0x174>)
 8006548:	edc3 7a00 	vstr	s15, [r3]
}
 800654c:	bf00      	nop
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	0800ca8c 	.word	0x0800ca8c
 8006558:	2000083c 	.word	0x2000083c
 800655c:	20000774 	.word	0x20000774
 8006560:	200002d0 	.word	0x200002d0
 8006564:	200007bc 	.word	0x200007bc
 8006568:	51eb851f 	.word	0x51eb851f
 800656c:	200007d4 	.word	0x200007d4
 8006570:	0800ca50 	.word	0x0800ca50
 8006574:	0800ca68 	.word	0x0800ca68
 8006578:	200008a0 	.word	0x200008a0
 800657c:	200002d8 	.word	0x200002d8
 8006580:	40020800 	.word	0x40020800
 8006584:	200007c8 	.word	0x200007c8

08006588 <Factor_Calibracion>:

// Función para resolver el sistema de ecuaciones
void Factor_Calibracion(float x1, float x2, float y1, float y2, float *A, float *B) {
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	ed87 0a05 	vstr	s0, [r7, #20]
 8006592:	edc7 0a04 	vstr	s1, [r7, #16]
 8006596:	ed87 1a03 	vstr	s2, [r7, #12]
 800659a:	edc7 1a02 	vstr	s3, [r7, #8]
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
    // Verificamos que (x2 - x1) no sea cero para evitar divisiones por cero
    if (x2 - x1 != 0) {
 80065a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80065a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80065aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80065b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b6:	d01f      	beq.n	80065f8 <Factor_Calibracion+0x70>
        // Resolvemos las ecuaciones para A y B
        *A = (y2 - y1) / (x2 - x1);
 80065b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80065bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80065c0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80065c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80065c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80065cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	edc3 7a00 	vstr	s15, [r3]
        *B = y1 - (*A * x1);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	ed93 7a00 	vldr	s14, [r3]
 80065e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80065e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80065ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	edc3 7a00 	vstr	s15, [r3]
    } else {
        printf("Error: (x2 - x1) no puede ser cero.\n");
    }
}
 80065f6:	e002      	b.n	80065fe <Factor_Calibracion+0x76>
        printf("Error: (x2 - x1) no puede ser cero.\n");
 80065f8:	4803      	ldr	r0, [pc, #12]	; (8006608 <Factor_Calibracion+0x80>)
 80065fa:	f003 ffbb 	bl	800a574 <puts>
}
 80065fe:	bf00      	nop
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	0800ca9c 	.word	0x0800ca9c

0800660c <SystemClock_Config>:


void SystemClock_Config(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b094      	sub	sp, #80	; 0x50
 8006610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006612:	f107 0320 	add.w	r3, r7, #32
 8006616:	2230      	movs	r2, #48	; 0x30
 8006618:	2100      	movs	r1, #0
 800661a:	4618      	mov	r0, r3
 800661c:	f003 faca 	bl	8009bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006620:	f107 030c 	add.w	r3, r7, #12
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	605a      	str	r2, [r3, #4]
 800662a:	609a      	str	r2, [r3, #8]
 800662c:	60da      	str	r2, [r3, #12]
 800662e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006630:	2300      	movs	r3, #0
 8006632:	60bb      	str	r3, [r7, #8]
 8006634:	4b29      	ldr	r3, [pc, #164]	; (80066dc <SystemClock_Config+0xd0>)
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	4a28      	ldr	r2, [pc, #160]	; (80066dc <SystemClock_Config+0xd0>)
 800663a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663e:	6413      	str	r3, [r2, #64]	; 0x40
 8006640:	4b26      	ldr	r3, [pc, #152]	; (80066dc <SystemClock_Config+0xd0>)
 8006642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800664c:	2300      	movs	r3, #0
 800664e:	607b      	str	r3, [r7, #4]
 8006650:	4b23      	ldr	r3, [pc, #140]	; (80066e0 <SystemClock_Config+0xd4>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006658:	4a21      	ldr	r2, [pc, #132]	; (80066e0 <SystemClock_Config+0xd4>)
 800665a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	4b1f      	ldr	r3, [pc, #124]	; (80066e0 <SystemClock_Config+0xd4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006668:	607b      	str	r3, [r7, #4]
 800666a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800666c:	2302      	movs	r3, #2
 800666e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006670:	2301      	movs	r3, #1
 8006672:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006674:	2310      	movs	r3, #16
 8006676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006678:	2302      	movs	r3, #2
 800667a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800667c:	2300      	movs	r3, #0
 800667e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8006680:	2310      	movs	r3, #16
 8006682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006684:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006688:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800668a:	2304      	movs	r3, #4
 800668c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800668e:	2307      	movs	r3, #7
 8006690:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006692:	f107 0320 	add.w	r3, r7, #32
 8006696:	4618      	mov	r0, r3
 8006698:	f002 f9e0 	bl	8008a5c <HAL_RCC_OscConfig>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80066a2:	f000 f913 	bl	80068cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80066a6:	230f      	movs	r3, #15
 80066a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80066aa:	2302      	movs	r3, #2
 80066ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80066ae:	2300      	movs	r3, #0
 80066b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80066b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80066b8:	2300      	movs	r3, #0
 80066ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80066bc:	f107 030c 	add.w	r3, r7, #12
 80066c0:	2102      	movs	r1, #2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f002 fc42 	bl	8008f4c <HAL_RCC_ClockConfig>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80066ce:	f000 f8fd 	bl	80068cc <Error_Handler>
  }
}
 80066d2:	bf00      	nop
 80066d4:	3750      	adds	r7, #80	; 0x50
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40023800 	.word	0x40023800
 80066e0:	40007000 	.word	0x40007000

080066e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80066e8:	4b12      	ldr	r3, [pc, #72]	; (8006734 <MX_I2C1_Init+0x50>)
 80066ea:	4a13      	ldr	r2, [pc, #76]	; (8006738 <MX_I2C1_Init+0x54>)
 80066ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80066ee:	4b11      	ldr	r3, [pc, #68]	; (8006734 <MX_I2C1_Init+0x50>)
 80066f0:	4a12      	ldr	r2, [pc, #72]	; (800673c <MX_I2C1_Init+0x58>)
 80066f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80066f4:	4b0f      	ldr	r3, [pc, #60]	; (8006734 <MX_I2C1_Init+0x50>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80066fa:	4b0e      	ldr	r3, [pc, #56]	; (8006734 <MX_I2C1_Init+0x50>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006700:	4b0c      	ldr	r3, [pc, #48]	; (8006734 <MX_I2C1_Init+0x50>)
 8006702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006708:	4b0a      	ldr	r3, [pc, #40]	; (8006734 <MX_I2C1_Init+0x50>)
 800670a:	2200      	movs	r2, #0
 800670c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800670e:	4b09      	ldr	r3, [pc, #36]	; (8006734 <MX_I2C1_Init+0x50>)
 8006710:	2200      	movs	r2, #0
 8006712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006714:	4b07      	ldr	r3, [pc, #28]	; (8006734 <MX_I2C1_Init+0x50>)
 8006716:	2200      	movs	r2, #0
 8006718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800671a:	4b06      	ldr	r3, [pc, #24]	; (8006734 <MX_I2C1_Init+0x50>)
 800671c:	2200      	movs	r2, #0
 800671e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006720:	4804      	ldr	r0, [pc, #16]	; (8006734 <MX_I2C1_Init+0x50>)
 8006722:	f001 f875 	bl	8007810 <HAL_I2C_Init>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800672c:	f000 f8ce 	bl	80068cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006730:	bf00      	nop
 8006732:	bd80      	pop	{r7, pc}
 8006734:	200006cc 	.word	0x200006cc
 8006738:	40005400 	.word	0x40005400
 800673c:	000186a0 	.word	0x000186a0

08006740 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8006744:	4b12      	ldr	r3, [pc, #72]	; (8006790 <MX_I2C3_Init+0x50>)
 8006746:	4a13      	ldr	r2, [pc, #76]	; (8006794 <MX_I2C3_Init+0x54>)
 8006748:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800674a:	4b11      	ldr	r3, [pc, #68]	; (8006790 <MX_I2C3_Init+0x50>)
 800674c:	4a12      	ldr	r2, [pc, #72]	; (8006798 <MX_I2C3_Init+0x58>)
 800674e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006750:	4b0f      	ldr	r3, [pc, #60]	; (8006790 <MX_I2C3_Init+0x50>)
 8006752:	2200      	movs	r2, #0
 8006754:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8006756:	4b0e      	ldr	r3, [pc, #56]	; (8006790 <MX_I2C3_Init+0x50>)
 8006758:	2200      	movs	r2, #0
 800675a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800675c:	4b0c      	ldr	r3, [pc, #48]	; (8006790 <MX_I2C3_Init+0x50>)
 800675e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006762:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006764:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <MX_I2C3_Init+0x50>)
 8006766:	2200      	movs	r2, #0
 8006768:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800676a:	4b09      	ldr	r3, [pc, #36]	; (8006790 <MX_I2C3_Init+0x50>)
 800676c:	2200      	movs	r2, #0
 800676e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006770:	4b07      	ldr	r3, [pc, #28]	; (8006790 <MX_I2C3_Init+0x50>)
 8006772:	2200      	movs	r2, #0
 8006774:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006776:	4b06      	ldr	r3, [pc, #24]	; (8006790 <MX_I2C3_Init+0x50>)
 8006778:	2200      	movs	r2, #0
 800677a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800677c:	4804      	ldr	r0, [pc, #16]	; (8006790 <MX_I2C3_Init+0x50>)
 800677e:	f001 f847 	bl	8007810 <HAL_I2C_Init>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8006788:	f000 f8a0 	bl	80068cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800678c:	bf00      	nop
 800678e:	bd80      	pop	{r7, pc}
 8006790:	20000720 	.word	0x20000720
 8006794:	40005c00 	.word	0x40005c00
 8006798:	000186a0 	.word	0x000186a0

0800679c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80067a0:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <MX_USART2_UART_Init+0x4c>)
 80067a2:	4a12      	ldr	r2, [pc, #72]	; (80067ec <MX_USART2_UART_Init+0x50>)
 80067a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80067a6:	4b10      	ldr	r3, [pc, #64]	; (80067e8 <MX_USART2_UART_Init+0x4c>)
 80067a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80067ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80067ae:	4b0e      	ldr	r3, [pc, #56]	; (80067e8 <MX_USART2_UART_Init+0x4c>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80067b4:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <MX_USART2_UART_Init+0x4c>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80067ba:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <MX_USART2_UART_Init+0x4c>)
 80067bc:	2200      	movs	r2, #0
 80067be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80067c0:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <MX_USART2_UART_Init+0x4c>)
 80067c2:	220c      	movs	r2, #12
 80067c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067c6:	4b08      	ldr	r3, [pc, #32]	; (80067e8 <MX_USART2_UART_Init+0x4c>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80067cc:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <MX_USART2_UART_Init+0x4c>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80067d2:	4805      	ldr	r0, [pc, #20]	; (80067e8 <MX_USART2_UART_Init+0x4c>)
 80067d4:	f002 fdda 	bl	800938c <HAL_UART_Init>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80067de:	f000 f875 	bl	80068cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80067e2:	bf00      	nop
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000774 	.word	0x20000774
 80067ec:	40004400 	.word	0x40004400

080067f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08a      	sub	sp, #40	; 0x28
 80067f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f6:	f107 0314 	add.w	r3, r7, #20
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	605a      	str	r2, [r3, #4]
 8006800:	609a      	str	r2, [r3, #8]
 8006802:	60da      	str	r2, [r3, #12]
 8006804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006806:	2300      	movs	r3, #0
 8006808:	613b      	str	r3, [r7, #16]
 800680a:	4b2d      	ldr	r3, [pc, #180]	; (80068c0 <MX_GPIO_Init+0xd0>)
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	4a2c      	ldr	r2, [pc, #176]	; (80068c0 <MX_GPIO_Init+0xd0>)
 8006810:	f043 0304 	orr.w	r3, r3, #4
 8006814:	6313      	str	r3, [r2, #48]	; 0x30
 8006816:	4b2a      	ldr	r3, [pc, #168]	; (80068c0 <MX_GPIO_Init+0xd0>)
 8006818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681a:	f003 0304 	and.w	r3, r3, #4
 800681e:	613b      	str	r3, [r7, #16]
 8006820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	4b26      	ldr	r3, [pc, #152]	; (80068c0 <MX_GPIO_Init+0xd0>)
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	4a25      	ldr	r2, [pc, #148]	; (80068c0 <MX_GPIO_Init+0xd0>)
 800682c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006830:	6313      	str	r3, [r2, #48]	; 0x30
 8006832:	4b23      	ldr	r3, [pc, #140]	; (80068c0 <MX_GPIO_Init+0xd0>)
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800683e:	2300      	movs	r3, #0
 8006840:	60bb      	str	r3, [r7, #8]
 8006842:	4b1f      	ldr	r3, [pc, #124]	; (80068c0 <MX_GPIO_Init+0xd0>)
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	4a1e      	ldr	r2, [pc, #120]	; (80068c0 <MX_GPIO_Init+0xd0>)
 8006848:	f043 0301 	orr.w	r3, r3, #1
 800684c:	6313      	str	r3, [r2, #48]	; 0x30
 800684e:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <MX_GPIO_Init+0xd0>)
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	60bb      	str	r3, [r7, #8]
 8006858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800685a:	2300      	movs	r3, #0
 800685c:	607b      	str	r3, [r7, #4]
 800685e:	4b18      	ldr	r3, [pc, #96]	; (80068c0 <MX_GPIO_Init+0xd0>)
 8006860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006862:	4a17      	ldr	r2, [pc, #92]	; (80068c0 <MX_GPIO_Init+0xd0>)
 8006864:	f043 0302 	orr.w	r3, r3, #2
 8006868:	6313      	str	r3, [r2, #48]	; 0x30
 800686a:	4b15      	ldr	r3, [pc, #84]	; (80068c0 <MX_GPIO_Init+0xd0>)
 800686c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	607b      	str	r3, [r7, #4]
 8006874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8006876:	2200      	movs	r2, #0
 8006878:	2120      	movs	r1, #32
 800687a:	4812      	ldr	r0, [pc, #72]	; (80068c4 <MX_GPIO_Init+0xd4>)
 800687c:	f000 ffae 	bl	80077dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006886:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800688a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800688c:	2300      	movs	r3, #0
 800688e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006890:	f107 0314 	add.w	r3, r7, #20
 8006894:	4619      	mov	r1, r3
 8006896:	480c      	ldr	r0, [pc, #48]	; (80068c8 <MX_GPIO_Init+0xd8>)
 8006898:	f000 fe04 	bl	80074a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800689c:	2320      	movs	r3, #32
 800689e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068a0:	2301      	movs	r3, #1
 80068a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068a8:	2300      	movs	r3, #0
 80068aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80068ac:	f107 0314 	add.w	r3, r7, #20
 80068b0:	4619      	mov	r1, r3
 80068b2:	4804      	ldr	r0, [pc, #16]	; (80068c4 <MX_GPIO_Init+0xd4>)
 80068b4:	f000 fdf6 	bl	80074a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80068b8:	bf00      	nop
 80068ba:	3728      	adds	r7, #40	; 0x28
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	40023800 	.word	0x40023800
 80068c4:	40020000 	.word	0x40020000
 80068c8:	40020800 	.word	0x40020800

080068cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80068d0:	b672      	cpsid	i
}
 80068d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80068d4:	e7fe      	b.n	80068d4 <Error_Handler+0x8>

080068d6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80068d6:	b480      	push	{r7}
 80068d8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80068da:	bf00      	nop
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af04      	add	r7, sp, #16
 80068ea:	4603      	mov	r3, r0
 80068ec:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80068ee:	f04f 33ff 	mov.w	r3, #4294967295
 80068f2:	9302      	str	r3, [sp, #8]
 80068f4:	2301      	movs	r3, #1
 80068f6:	9301      	str	r3, [sp, #4]
 80068f8:	1dfb      	adds	r3, r7, #7
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	2301      	movs	r3, #1
 80068fe:	2200      	movs	r2, #0
 8006900:	2178      	movs	r1, #120	; 0x78
 8006902:	4803      	ldr	r0, [pc, #12]	; (8006910 <ssd1306_WriteCommand+0x2c>)
 8006904:	f001 fbec 	bl	80080e0 <HAL_I2C_Mem_Write>
}
 8006908:	bf00      	nop
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	200006cc 	.word	0x200006cc

08006914 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af04      	add	r7, sp, #16
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	b29b      	uxth	r3, r3
 8006922:	f04f 32ff 	mov.w	r2, #4294967295
 8006926:	9202      	str	r2, [sp, #8]
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	2301      	movs	r3, #1
 8006930:	2240      	movs	r2, #64	; 0x40
 8006932:	2178      	movs	r1, #120	; 0x78
 8006934:	4803      	ldr	r0, [pc, #12]	; (8006944 <ssd1306_WriteData+0x30>)
 8006936:	f001 fbd3 	bl	80080e0 <HAL_I2C_Mem_Write>
}
 800693a:	bf00      	nop
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	200006cc 	.word	0x200006cc

08006948 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800694c:	f7ff ffc3 	bl	80068d6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8006950:	2064      	movs	r0, #100	; 0x64
 8006952:	f000 fc9d 	bl	8007290 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8006956:	2000      	movs	r0, #0
 8006958:	f000 f9ce 	bl	8006cf8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800695c:	2020      	movs	r0, #32
 800695e:	f7ff ffc1 	bl	80068e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8006962:	2000      	movs	r0, #0
 8006964:	f7ff ffbe 	bl	80068e4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006968:	20b0      	movs	r0, #176	; 0xb0
 800696a:	f7ff ffbb 	bl	80068e4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800696e:	20c8      	movs	r0, #200	; 0xc8
 8006970:	f7ff ffb8 	bl	80068e4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8006974:	2000      	movs	r0, #0
 8006976:	f7ff ffb5 	bl	80068e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800697a:	2010      	movs	r0, #16
 800697c:	f7ff ffb2 	bl	80068e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8006980:	2040      	movs	r0, #64	; 0x40
 8006982:	f7ff ffaf 	bl	80068e4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8006986:	20ff      	movs	r0, #255	; 0xff
 8006988:	f000 f9a2 	bl	8006cd0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800698c:	20a1      	movs	r0, #161	; 0xa1
 800698e:	f7ff ffa9 	bl	80068e4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8006992:	20a6      	movs	r0, #166	; 0xa6
 8006994:	f7ff ffa6 	bl	80068e4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8006998:	20a8      	movs	r0, #168	; 0xa8
 800699a:	f7ff ffa3 	bl	80068e4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800699e:	203f      	movs	r0, #63	; 0x3f
 80069a0:	f7ff ffa0 	bl	80068e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80069a4:	20a4      	movs	r0, #164	; 0xa4
 80069a6:	f7ff ff9d 	bl	80068e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80069aa:	20d3      	movs	r0, #211	; 0xd3
 80069ac:	f7ff ff9a 	bl	80068e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80069b0:	2000      	movs	r0, #0
 80069b2:	f7ff ff97 	bl	80068e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80069b6:	20d5      	movs	r0, #213	; 0xd5
 80069b8:	f7ff ff94 	bl	80068e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80069bc:	20f0      	movs	r0, #240	; 0xf0
 80069be:	f7ff ff91 	bl	80068e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80069c2:	20d9      	movs	r0, #217	; 0xd9
 80069c4:	f7ff ff8e 	bl	80068e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80069c8:	2022      	movs	r0, #34	; 0x22
 80069ca:	f7ff ff8b 	bl	80068e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80069ce:	20da      	movs	r0, #218	; 0xda
 80069d0:	f7ff ff88 	bl	80068e4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80069d4:	2012      	movs	r0, #18
 80069d6:	f7ff ff85 	bl	80068e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80069da:	20db      	movs	r0, #219	; 0xdb
 80069dc:	f7ff ff82 	bl	80068e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80069e0:	2020      	movs	r0, #32
 80069e2:	f7ff ff7f 	bl	80068e4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80069e6:	208d      	movs	r0, #141	; 0x8d
 80069e8:	f7ff ff7c 	bl	80068e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80069ec:	2014      	movs	r0, #20
 80069ee:	f7ff ff79 	bl	80068e4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80069f2:	2001      	movs	r0, #1
 80069f4:	f000 f980 	bl	8006cf8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80069f8:	2000      	movs	r0, #0
 80069fa:	f000 f80f 	bl	8006a1c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80069fe:	f000 f825 	bl	8006a4c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8006a02:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <ssd1306_Init+0xd0>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006a08:	4b03      	ldr	r3, [pc, #12]	; (8006a18 <ssd1306_Init+0xd0>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8006a0e:	4b02      	ldr	r3, [pc, #8]	; (8006a18 <ssd1306_Init+0xd0>)
 8006a10:	2201      	movs	r2, #1
 8006a12:	711a      	strb	r2, [r3, #4]
}
 8006a14:	bf00      	nop
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	20000d04 	.word	0x20000d04

08006a1c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	4603      	mov	r3, r0
 8006a24:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8006a26:	79fb      	ldrb	r3, [r7, #7]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <ssd1306_Fill+0x14>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	e000      	b.n	8006a32 <ssd1306_Fill+0x16>
 8006a30:	23ff      	movs	r3, #255	; 0xff
 8006a32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a36:	4619      	mov	r1, r3
 8006a38:	4803      	ldr	r0, [pc, #12]	; (8006a48 <ssd1306_Fill+0x2c>)
 8006a3a:	f003 f8bb 	bl	8009bb4 <memset>
}
 8006a3e:	bf00      	nop
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20000904 	.word	0x20000904

08006a4c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006a52:	2300      	movs	r3, #0
 8006a54:	71fb      	strb	r3, [r7, #7]
 8006a56:	e016      	b.n	8006a86 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8006a58:	79fb      	ldrb	r3, [r7, #7]
 8006a5a:	3b50      	subs	r3, #80	; 0x50
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7ff ff40 	bl	80068e4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8006a64:	2000      	movs	r0, #0
 8006a66:	f7ff ff3d 	bl	80068e4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8006a6a:	2010      	movs	r0, #16
 8006a6c:	f7ff ff3a 	bl	80068e4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8006a70:	79fb      	ldrb	r3, [r7, #7]
 8006a72:	01db      	lsls	r3, r3, #7
 8006a74:	4a08      	ldr	r2, [pc, #32]	; (8006a98 <ssd1306_UpdateScreen+0x4c>)
 8006a76:	4413      	add	r3, r2
 8006a78:	2180      	movs	r1, #128	; 0x80
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff ff4a 	bl	8006914 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006a80:	79fb      	ldrb	r3, [r7, #7]
 8006a82:	3301      	adds	r3, #1
 8006a84:	71fb      	strb	r3, [r7, #7]
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	2b07      	cmp	r3, #7
 8006a8a:	d9e5      	bls.n	8006a58 <ssd1306_UpdateScreen+0xc>
    }
}
 8006a8c:	bf00      	nop
 8006a8e:	bf00      	nop
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000904 	.word	0x20000904

08006a9c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	71fb      	strb	r3, [r7, #7]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	71bb      	strb	r3, [r7, #6]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8006aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	db3d      	blt.n	8006b32 <ssd1306_DrawPixel+0x96>
 8006ab6:	79bb      	ldrb	r3, [r7, #6]
 8006ab8:	2b3f      	cmp	r3, #63	; 0x3f
 8006aba:	d83a      	bhi.n	8006b32 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8006abc:	797b      	ldrb	r3, [r7, #5]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d11a      	bne.n	8006af8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006ac2:	79fa      	ldrb	r2, [r7, #7]
 8006ac4:	79bb      	ldrb	r3, [r7, #6]
 8006ac6:	08db      	lsrs	r3, r3, #3
 8006ac8:	b2d8      	uxtb	r0, r3
 8006aca:	4603      	mov	r3, r0
 8006acc:	01db      	lsls	r3, r3, #7
 8006ace:	4413      	add	r3, r2
 8006ad0:	4a1b      	ldr	r2, [pc, #108]	; (8006b40 <ssd1306_DrawPixel+0xa4>)
 8006ad2:	5cd3      	ldrb	r3, [r2, r3]
 8006ad4:	b25a      	sxtb	r2, r3
 8006ad6:	79bb      	ldrb	r3, [r7, #6]
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	2101      	movs	r1, #1
 8006ade:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae2:	b25b      	sxtb	r3, r3
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	b259      	sxtb	r1, r3
 8006ae8:	79fa      	ldrb	r2, [r7, #7]
 8006aea:	4603      	mov	r3, r0
 8006aec:	01db      	lsls	r3, r3, #7
 8006aee:	4413      	add	r3, r2
 8006af0:	b2c9      	uxtb	r1, r1
 8006af2:	4a13      	ldr	r2, [pc, #76]	; (8006b40 <ssd1306_DrawPixel+0xa4>)
 8006af4:	54d1      	strb	r1, [r2, r3]
 8006af6:	e01d      	b.n	8006b34 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006af8:	79fa      	ldrb	r2, [r7, #7]
 8006afa:	79bb      	ldrb	r3, [r7, #6]
 8006afc:	08db      	lsrs	r3, r3, #3
 8006afe:	b2d8      	uxtb	r0, r3
 8006b00:	4603      	mov	r3, r0
 8006b02:	01db      	lsls	r3, r3, #7
 8006b04:	4413      	add	r3, r2
 8006b06:	4a0e      	ldr	r2, [pc, #56]	; (8006b40 <ssd1306_DrawPixel+0xa4>)
 8006b08:	5cd3      	ldrb	r3, [r2, r3]
 8006b0a:	b25a      	sxtb	r2, r3
 8006b0c:	79bb      	ldrb	r3, [r7, #6]
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	2101      	movs	r1, #1
 8006b14:	fa01 f303 	lsl.w	r3, r1, r3
 8006b18:	b25b      	sxtb	r3, r3
 8006b1a:	43db      	mvns	r3, r3
 8006b1c:	b25b      	sxtb	r3, r3
 8006b1e:	4013      	ands	r3, r2
 8006b20:	b259      	sxtb	r1, r3
 8006b22:	79fa      	ldrb	r2, [r7, #7]
 8006b24:	4603      	mov	r3, r0
 8006b26:	01db      	lsls	r3, r3, #7
 8006b28:	4413      	add	r3, r2
 8006b2a:	b2c9      	uxtb	r1, r1
 8006b2c:	4a04      	ldr	r2, [pc, #16]	; (8006b40 <ssd1306_DrawPixel+0xa4>)
 8006b2e:	54d1      	strb	r1, [r2, r3]
 8006b30:	e000      	b.n	8006b34 <ssd1306_DrawPixel+0x98>
        return;
 8006b32:	bf00      	nop
    }
}
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	20000904 	.word	0x20000904

08006b44 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8006b44:	b590      	push	{r4, r7, lr}
 8006b46:	b089      	sub	sp, #36	; 0x24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	1d38      	adds	r0, r7, #4
 8006b4e:	e880 0006 	stmia.w	r0, {r1, r2}
 8006b52:	461a      	mov	r2, r3
 8006b54:	4623      	mov	r3, r4
 8006b56:	73fb      	strb	r3, [r7, #15]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2b1f      	cmp	r3, #31
 8006b60:	d902      	bls.n	8006b68 <ssd1306_WriteChar+0x24>
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	2b7e      	cmp	r3, #126	; 0x7e
 8006b66:	d901      	bls.n	8006b6c <ssd1306_WriteChar+0x28>
        return 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e06d      	b.n	8006c48 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006b6c:	4b38      	ldr	r3, [pc, #224]	; (8006c50 <ssd1306_WriteChar+0x10c>)
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	793b      	ldrb	r3, [r7, #4]
 8006b74:	4413      	add	r3, r2
 8006b76:	2b80      	cmp	r3, #128	; 0x80
 8006b78:	dc06      	bgt.n	8006b88 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8006b7a:	4b35      	ldr	r3, [pc, #212]	; (8006c50 <ssd1306_WriteChar+0x10c>)
 8006b7c:	885b      	ldrh	r3, [r3, #2]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	797b      	ldrb	r3, [r7, #5]
 8006b82:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006b84:	2b40      	cmp	r3, #64	; 0x40
 8006b86:	dd01      	ble.n	8006b8c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	e05d      	b.n	8006c48 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61fb      	str	r3, [r7, #28]
 8006b90:	e04c      	b.n	8006c2c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	3b20      	subs	r3, #32
 8006b98:	7979      	ldrb	r1, [r7, #5]
 8006b9a:	fb01 f303 	mul.w	r3, r1, r3
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	440b      	add	r3, r1
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	4413      	add	r3, r2
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8006bac:	2300      	movs	r3, #0
 8006bae:	61bb      	str	r3, [r7, #24]
 8006bb0:	e034      	b.n	8006c1c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d012      	beq.n	8006be8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8006bc2:	4b23      	ldr	r3, [pc, #140]	; (8006c50 <ssd1306_WriteChar+0x10c>)
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	4413      	add	r3, r2
 8006bce:	b2d8      	uxtb	r0, r3
 8006bd0:	4b1f      	ldr	r3, [pc, #124]	; (8006c50 <ssd1306_WriteChar+0x10c>)
 8006bd2:	885b      	ldrh	r3, [r3, #2]
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	4413      	add	r3, r2
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	7bba      	ldrb	r2, [r7, #14]
 8006be0:	4619      	mov	r1, r3
 8006be2:	f7ff ff5b 	bl	8006a9c <ssd1306_DrawPixel>
 8006be6:	e016      	b.n	8006c16 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006be8:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <ssd1306_WriteChar+0x10c>)
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	4413      	add	r3, r2
 8006bf4:	b2d8      	uxtb	r0, r3
 8006bf6:	4b16      	ldr	r3, [pc, #88]	; (8006c50 <ssd1306_WriteChar+0x10c>)
 8006bf8:	885b      	ldrh	r3, [r3, #2]
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	4413      	add	r3, r2
 8006c02:	b2d9      	uxtb	r1, r3
 8006c04:	7bbb      	ldrb	r3, [r7, #14]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	bf0c      	ite	eq
 8006c0a:	2301      	moveq	r3, #1
 8006c0c:	2300      	movne	r3, #0
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	f7ff ff43 	bl	8006a9c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	61bb      	str	r3, [r7, #24]
 8006c1c:	793b      	ldrb	r3, [r7, #4]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d3c5      	bcc.n	8006bb2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	61fb      	str	r3, [r7, #28]
 8006c2c:	797b      	ldrb	r3, [r7, #5]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d3ad      	bcc.n	8006b92 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8006c36:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <ssd1306_WriteChar+0x10c>)
 8006c38:	881a      	ldrh	r2, [r3, #0]
 8006c3a:	793b      	ldrb	r3, [r7, #4]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	4413      	add	r3, r2
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	4b03      	ldr	r3, [pc, #12]	; (8006c50 <ssd1306_WriteChar+0x10c>)
 8006c44:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3724      	adds	r7, #36	; 0x24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd90      	pop	{r4, r7, pc}
 8006c50:	20000d04 	.word	0x20000d04

08006c54 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	1d38      	adds	r0, r7, #4
 8006c5e:	e880 0006 	stmia.w	r0, {r1, r2}
 8006c62:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8006c64:	e012      	b.n	8006c8c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	7818      	ldrb	r0, [r3, #0]
 8006c6a:	78fb      	ldrb	r3, [r7, #3]
 8006c6c:	1d3a      	adds	r2, r7, #4
 8006c6e:	ca06      	ldmia	r2, {r1, r2}
 8006c70:	f7ff ff68 	bl	8006b44 <ssd1306_WriteChar>
 8006c74:	4603      	mov	r3, r0
 8006c76:	461a      	mov	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d002      	beq.n	8006c86 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	e008      	b.n	8006c98 <ssd1306_WriteString+0x44>
        }
        str++;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e8      	bne.n	8006c66 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	781b      	ldrb	r3, [r3, #0]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	460a      	mov	r2, r1
 8006caa:	71fb      	strb	r3, [r7, #7]
 8006cac:	4613      	mov	r3, r2
 8006cae:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8006cb0:	79fb      	ldrb	r3, [r7, #7]
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <ssd1306_SetCursor+0x2c>)
 8006cb6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8006cb8:	79bb      	ldrb	r3, [r7, #6]
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	4b03      	ldr	r3, [pc, #12]	; (8006ccc <ssd1306_SetCursor+0x2c>)
 8006cbe:	805a      	strh	r2, [r3, #2]
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	20000d04 	.word	0x20000d04

08006cd0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8006cda:	2381      	movs	r3, #129	; 0x81
 8006cdc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff fdff 	bl	80068e4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff fdfb 	bl	80068e4 <ssd1306_WriteCommand>
}
 8006cee:	bf00      	nop
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	4603      	mov	r3, r0
 8006d00:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8006d02:	79fb      	ldrb	r3, [r7, #7]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d005      	beq.n	8006d14 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8006d08:	23af      	movs	r3, #175	; 0xaf
 8006d0a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8006d0c:	4b08      	ldr	r3, [pc, #32]	; (8006d30 <ssd1306_SetDisplayOn+0x38>)
 8006d0e:	2201      	movs	r2, #1
 8006d10:	715a      	strb	r2, [r3, #5]
 8006d12:	e004      	b.n	8006d1e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8006d14:	23ae      	movs	r3, #174	; 0xae
 8006d16:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8006d18:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <ssd1306_SetDisplayOn+0x38>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff fddf 	bl	80068e4 <ssd1306_WriteCommand>
}
 8006d26:	bf00      	nop
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000d04 	.word	0x20000d04

08006d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	607b      	str	r3, [r7, #4]
 8006d3e:	4b10      	ldr	r3, [pc, #64]	; (8006d80 <HAL_MspInit+0x4c>)
 8006d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d42:	4a0f      	ldr	r2, [pc, #60]	; (8006d80 <HAL_MspInit+0x4c>)
 8006d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d48:	6453      	str	r3, [r2, #68]	; 0x44
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <HAL_MspInit+0x4c>)
 8006d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d52:	607b      	str	r3, [r7, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d56:	2300      	movs	r3, #0
 8006d58:	603b      	str	r3, [r7, #0]
 8006d5a:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <HAL_MspInit+0x4c>)
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	4a08      	ldr	r2, [pc, #32]	; (8006d80 <HAL_MspInit+0x4c>)
 8006d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d64:	6413      	str	r3, [r2, #64]	; 0x40
 8006d66:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <HAL_MspInit+0x4c>)
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006d72:	2007      	movs	r0, #7
 8006d74:	f000 fb62 	bl	800743c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d78:	bf00      	nop
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	40023800 	.word	0x40023800

08006d84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b08c      	sub	sp, #48	; 0x30
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d8c:	f107 031c 	add.w	r3, r7, #28
 8006d90:	2200      	movs	r2, #0
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	605a      	str	r2, [r3, #4]
 8006d96:	609a      	str	r2, [r3, #8]
 8006d98:	60da      	str	r2, [r3, #12]
 8006d9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a42      	ldr	r2, [pc, #264]	; (8006eac <HAL_I2C_MspInit+0x128>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d12c      	bne.n	8006e00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006da6:	2300      	movs	r3, #0
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	4b41      	ldr	r3, [pc, #260]	; (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dae:	4a40      	ldr	r2, [pc, #256]	; (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006db0:	f043 0302 	orr.w	r3, r3, #2
 8006db4:	6313      	str	r3, [r2, #48]	; 0x30
 8006db6:	4b3e      	ldr	r3, [pc, #248]	; (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006dc2:	23c0      	movs	r3, #192	; 0xc0
 8006dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006dc6:	2312      	movs	r3, #18
 8006dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006dd2:	2304      	movs	r3, #4
 8006dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dd6:	f107 031c 	add.w	r3, r7, #28
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4835      	ldr	r0, [pc, #212]	; (8006eb4 <HAL_I2C_MspInit+0x130>)
 8006dde:	f000 fb61 	bl	80074a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006de2:	2300      	movs	r3, #0
 8006de4:	617b      	str	r3, [r7, #20]
 8006de6:	4b32      	ldr	r3, [pc, #200]	; (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	4a31      	ldr	r2, [pc, #196]	; (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006dec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006df0:	6413      	str	r3, [r2, #64]	; 0x40
 8006df2:	4b2f      	ldr	r3, [pc, #188]	; (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006dfe:	e050      	b.n	8006ea2 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a2c      	ldr	r2, [pc, #176]	; (8006eb8 <HAL_I2C_MspInit+0x134>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d14b      	bne.n	8006ea2 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	613b      	str	r3, [r7, #16]
 8006e0e:	4b28      	ldr	r3, [pc, #160]	; (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e12:	4a27      	ldr	r2, [pc, #156]	; (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e14:	f043 0304 	orr.w	r3, r3, #4
 8006e18:	6313      	str	r3, [r2, #48]	; 0x30
 8006e1a:	4b25      	ldr	r3, [pc, #148]	; (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1e:	f003 0304 	and.w	r3, r3, #4
 8006e22:	613b      	str	r3, [r7, #16]
 8006e24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	4b21      	ldr	r3, [pc, #132]	; (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2e:	4a20      	ldr	r2, [pc, #128]	; (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e30:	f043 0301 	orr.w	r3, r3, #1
 8006e34:	6313      	str	r3, [r2, #48]	; 0x30
 8006e36:	4b1e      	ldr	r3, [pc, #120]	; (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e48:	2312      	movs	r3, #18
 8006e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e50:	2303      	movs	r3, #3
 8006e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006e54:	2304      	movs	r3, #4
 8006e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e58:	f107 031c 	add.w	r3, r7, #28
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4817      	ldr	r0, [pc, #92]	; (8006ebc <HAL_I2C_MspInit+0x138>)
 8006e60:	f000 fb20 	bl	80074a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e6a:	2312      	movs	r3, #18
 8006e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e72:	2303      	movs	r3, #3
 8006e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006e76:	2304      	movs	r3, #4
 8006e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e7a:	f107 031c 	add.w	r3, r7, #28
 8006e7e:	4619      	mov	r1, r3
 8006e80:	480f      	ldr	r0, [pc, #60]	; (8006ec0 <HAL_I2C_MspInit+0x13c>)
 8006e82:	f000 fb0f 	bl	80074a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006e86:	2300      	movs	r3, #0
 8006e88:	60bb      	str	r3, [r7, #8]
 8006e8a:	4b09      	ldr	r3, [pc, #36]	; (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	4a08      	ldr	r2, [pc, #32]	; (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e94:	6413      	str	r3, [r2, #64]	; 0x40
 8006e96:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e9e:	60bb      	str	r3, [r7, #8]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
}
 8006ea2:	bf00      	nop
 8006ea4:	3730      	adds	r7, #48	; 0x30
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	40005400 	.word	0x40005400
 8006eb0:	40023800 	.word	0x40023800
 8006eb4:	40020400 	.word	0x40020400
 8006eb8:	40005c00 	.word	0x40005c00
 8006ebc:	40020800 	.word	0x40020800
 8006ec0:	40020000 	.word	0x40020000

08006ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	; 0x28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ecc:	f107 0314 	add.w	r3, r7, #20
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	605a      	str	r2, [r3, #4]
 8006ed6:	609a      	str	r2, [r3, #8]
 8006ed8:	60da      	str	r2, [r3, #12]
 8006eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a19      	ldr	r2, [pc, #100]	; (8006f48 <HAL_UART_MspInit+0x84>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d12b      	bne.n	8006f3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	613b      	str	r3, [r7, #16]
 8006eea:	4b18      	ldr	r3, [pc, #96]	; (8006f4c <HAL_UART_MspInit+0x88>)
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	4a17      	ldr	r2, [pc, #92]	; (8006f4c <HAL_UART_MspInit+0x88>)
 8006ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ef6:	4b15      	ldr	r3, [pc, #84]	; (8006f4c <HAL_UART_MspInit+0x88>)
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006efe:	613b      	str	r3, [r7, #16]
 8006f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f02:	2300      	movs	r3, #0
 8006f04:	60fb      	str	r3, [r7, #12]
 8006f06:	4b11      	ldr	r3, [pc, #68]	; (8006f4c <HAL_UART_MspInit+0x88>)
 8006f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0a:	4a10      	ldr	r2, [pc, #64]	; (8006f4c <HAL_UART_MspInit+0x88>)
 8006f0c:	f043 0301 	orr.w	r3, r3, #1
 8006f10:	6313      	str	r3, [r2, #48]	; 0x30
 8006f12:	4b0e      	ldr	r3, [pc, #56]	; (8006f4c <HAL_UART_MspInit+0x88>)
 8006f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006f1e:	230c      	movs	r3, #12
 8006f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f22:	2302      	movs	r3, #2
 8006f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006f2e:	2307      	movs	r3, #7
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f32:	f107 0314 	add.w	r3, r7, #20
 8006f36:	4619      	mov	r1, r3
 8006f38:	4805      	ldr	r0, [pc, #20]	; (8006f50 <HAL_UART_MspInit+0x8c>)
 8006f3a:	f000 fab3 	bl	80074a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006f3e:	bf00      	nop
 8006f40:	3728      	adds	r7, #40	; 0x28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	40004400 	.word	0x40004400
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	40020000 	.word	0x40020000

08006f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006f58:	e7fe      	b.n	8006f58 <NMI_Handler+0x4>

08006f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f5e:	e7fe      	b.n	8006f5e <HardFault_Handler+0x4>

08006f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f64:	e7fe      	b.n	8006f64 <MemManage_Handler+0x4>

08006f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f66:	b480      	push	{r7}
 8006f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f6a:	e7fe      	b.n	8006f6a <BusFault_Handler+0x4>

08006f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f70:	e7fe      	b.n	8006f70 <UsageFault_Handler+0x4>

08006f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f72:	b480      	push	{r7}
 8006f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f76:	bf00      	nop
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f80:	b480      	push	{r7}
 8006f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f84:	bf00      	nop
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f92:	bf00      	nop
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006fa0:	f000 f956 	bl	8007250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006fa4:	bf00      	nop
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	af00      	add	r7, sp, #0
  return 1;
 8006fac:	2301      	movs	r3, #1
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <_kill>:

int _kill(int pid, int sig)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006fc2:	f002 fda5 	bl	8009b10 <__errno>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2216      	movs	r2, #22
 8006fca:	601a      	str	r2, [r3, #0]
  return -1;
 8006fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <_exit>:

void _exit (int status)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff ffe7 	bl	8006fb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006fea:	e7fe      	b.n	8006fea <_exit+0x12>

08006fec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	e00a      	b.n	8007014 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006ffe:	f3af 8000 	nop.w
 8007002:	4601      	mov	r1, r0
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	60ba      	str	r2, [r7, #8]
 800700a:	b2ca      	uxtb	r2, r1
 800700c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	3301      	adds	r3, #1
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	429a      	cmp	r2, r3
 800701a:	dbf0      	blt.n	8006ffe <_read+0x12>
  }

  return len;
 800701c:	687b      	ldr	r3, [r7, #4]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3718      	adds	r7, #24
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b086      	sub	sp, #24
 800702a:	af00      	add	r7, sp, #0
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007032:	2300      	movs	r3, #0
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	e009      	b.n	800704c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	60ba      	str	r2, [r7, #8]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	4618      	mov	r0, r3
 8007042:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	3301      	adds	r3, #1
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	429a      	cmp	r2, r3
 8007052:	dbf1      	blt.n	8007038 <_write+0x12>
  }
  return len;
 8007054:	687b      	ldr	r3, [r7, #4]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <_close>:

int _close(int file)
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007066:	f04f 33ff 	mov.w	r3, #4294967295
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007076:	b480      	push	{r7}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007086:	605a      	str	r2, [r3, #4]
  return 0;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <_isatty>:

int _isatty(int file)
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800709e:	2301      	movs	r3, #1
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
	...

080070c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80070d0:	4a14      	ldr	r2, [pc, #80]	; (8007124 <_sbrk+0x5c>)
 80070d2:	4b15      	ldr	r3, [pc, #84]	; (8007128 <_sbrk+0x60>)
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80070dc:	4b13      	ldr	r3, [pc, #76]	; (800712c <_sbrk+0x64>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d102      	bne.n	80070ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80070e4:	4b11      	ldr	r3, [pc, #68]	; (800712c <_sbrk+0x64>)
 80070e6:	4a12      	ldr	r2, [pc, #72]	; (8007130 <_sbrk+0x68>)
 80070e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80070ea:	4b10      	ldr	r3, [pc, #64]	; (800712c <_sbrk+0x64>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4413      	add	r3, r2
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d207      	bcs.n	8007108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80070f8:	f002 fd0a 	bl	8009b10 <__errno>
 80070fc:	4603      	mov	r3, r0
 80070fe:	220c      	movs	r2, #12
 8007100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007102:	f04f 33ff 	mov.w	r3, #4294967295
 8007106:	e009      	b.n	800711c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007108:	4b08      	ldr	r3, [pc, #32]	; (800712c <_sbrk+0x64>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800710e:	4b07      	ldr	r3, [pc, #28]	; (800712c <_sbrk+0x64>)
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4413      	add	r3, r2
 8007116:	4a05      	ldr	r2, [pc, #20]	; (800712c <_sbrk+0x64>)
 8007118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800711a:	68fb      	ldr	r3, [r7, #12]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	20018000 	.word	0x20018000
 8007128:	00000400 	.word	0x00000400
 800712c:	20000d0c 	.word	0x20000d0c
 8007130:	20000d28 	.word	0x20000d28

08007134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007134:	b480      	push	{r7}
 8007136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007138:	4b06      	ldr	r3, [pc, #24]	; (8007154 <SystemInit+0x20>)
 800713a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713e:	4a05      	ldr	r2, [pc, #20]	; (8007154 <SystemInit+0x20>)
 8007140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007148:	bf00      	nop
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	e000ed00 	.word	0xe000ed00

08007158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007190 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800715c:	480d      	ldr	r0, [pc, #52]	; (8007194 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800715e:	490e      	ldr	r1, [pc, #56]	; (8007198 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007160:	4a0e      	ldr	r2, [pc, #56]	; (800719c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007164:	e002      	b.n	800716c <LoopCopyDataInit>

08007166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800716a:	3304      	adds	r3, #4

0800716c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800716c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800716e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007170:	d3f9      	bcc.n	8007166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007172:	4a0b      	ldr	r2, [pc, #44]	; (80071a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007174:	4c0b      	ldr	r4, [pc, #44]	; (80071a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007178:	e001      	b.n	800717e <LoopFillZerobss>

0800717a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800717a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800717c:	3204      	adds	r2, #4

0800717e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800717e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007180:	d3fb      	bcc.n	800717a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007182:	f7ff ffd7 	bl	8007134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007186:	f002 fcc9 	bl	8009b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800718a:	f7fe ff63 	bl	8006054 <main>
  bx  lr    
 800718e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007190:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8007194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007198:	200004bc 	.word	0x200004bc
  ldr r2, =_sidata
 800719c:	0800ef6c 	.word	0x0800ef6c
  ldr r2, =_sbss
 80071a0:	200004bc 	.word	0x200004bc
  ldr r4, =_ebss
 80071a4:	20000d24 	.word	0x20000d24

080071a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80071a8:	e7fe      	b.n	80071a8 <ADC_IRQHandler>
	...

080071ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80071b0:	4b0e      	ldr	r3, [pc, #56]	; (80071ec <HAL_Init+0x40>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a0d      	ldr	r2, [pc, #52]	; (80071ec <HAL_Init+0x40>)
 80071b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80071bc:	4b0b      	ldr	r3, [pc, #44]	; (80071ec <HAL_Init+0x40>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a0a      	ldr	r2, [pc, #40]	; (80071ec <HAL_Init+0x40>)
 80071c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80071c8:	4b08      	ldr	r3, [pc, #32]	; (80071ec <HAL_Init+0x40>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a07      	ldr	r2, [pc, #28]	; (80071ec <HAL_Init+0x40>)
 80071ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071d4:	2003      	movs	r0, #3
 80071d6:	f000 f931 	bl	800743c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80071da:	2000      	movs	r0, #0
 80071dc:	f000 f808 	bl	80071f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80071e0:	f7ff fda8 	bl	8006d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	40023c00 	.word	0x40023c00

080071f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80071f8:	4b12      	ldr	r3, [pc, #72]	; (8007244 <HAL_InitTick+0x54>)
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	4b12      	ldr	r3, [pc, #72]	; (8007248 <HAL_InitTick+0x58>)
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	4619      	mov	r1, r3
 8007202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007206:	fbb3 f3f1 	udiv	r3, r3, r1
 800720a:	fbb2 f3f3 	udiv	r3, r2, r3
 800720e:	4618      	mov	r0, r3
 8007210:	f000 f93b 	bl	800748a <HAL_SYSTICK_Config>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e00e      	b.n	800723c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b0f      	cmp	r3, #15
 8007222:	d80a      	bhi.n	800723a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007224:	2200      	movs	r2, #0
 8007226:	6879      	ldr	r1, [r7, #4]
 8007228:	f04f 30ff 	mov.w	r0, #4294967295
 800722c:	f000 f911 	bl	8007452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007230:	4a06      	ldr	r2, [pc, #24]	; (800724c <HAL_InitTick+0x5c>)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	e000      	b.n	800723c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	200002e0 	.word	0x200002e0
 8007248:	200002e8 	.word	0x200002e8
 800724c:	200002e4 	.word	0x200002e4

08007250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007254:	4b06      	ldr	r3, [pc, #24]	; (8007270 <HAL_IncTick+0x20>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	461a      	mov	r2, r3
 800725a:	4b06      	ldr	r3, [pc, #24]	; (8007274 <HAL_IncTick+0x24>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4413      	add	r3, r2
 8007260:	4a04      	ldr	r2, [pc, #16]	; (8007274 <HAL_IncTick+0x24>)
 8007262:	6013      	str	r3, [r2, #0]
}
 8007264:	bf00      	nop
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	200002e8 	.word	0x200002e8
 8007274:	20000d10 	.word	0x20000d10

08007278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007278:	b480      	push	{r7}
 800727a:	af00      	add	r7, sp, #0
  return uwTick;
 800727c:	4b03      	ldr	r3, [pc, #12]	; (800728c <HAL_GetTick+0x14>)
 800727e:	681b      	ldr	r3, [r3, #0]
}
 8007280:	4618      	mov	r0, r3
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	20000d10 	.word	0x20000d10

08007290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007298:	f7ff ffee 	bl	8007278 <HAL_GetTick>
 800729c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a8:	d005      	beq.n	80072b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80072aa:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <HAL_Delay+0x44>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4413      	add	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80072b6:	bf00      	nop
 80072b8:	f7ff ffde 	bl	8007278 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d8f7      	bhi.n	80072b8 <HAL_Delay+0x28>
  {
  }
}
 80072c8:	bf00      	nop
 80072ca:	bf00      	nop
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	200002e8 	.word	0x200002e8

080072d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80072e8:	4b0c      	ldr	r3, [pc, #48]	; (800731c <__NVIC_SetPriorityGrouping+0x44>)
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80072f4:	4013      	ands	r3, r2
 80072f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800730a:	4a04      	ldr	r2, [pc, #16]	; (800731c <__NVIC_SetPriorityGrouping+0x44>)
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	60d3      	str	r3, [r2, #12]
}
 8007310:	bf00      	nop
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	e000ed00 	.word	0xe000ed00

08007320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007320:	b480      	push	{r7}
 8007322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007324:	4b04      	ldr	r3, [pc, #16]	; (8007338 <__NVIC_GetPriorityGrouping+0x18>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	0a1b      	lsrs	r3, r3, #8
 800732a:	f003 0307 	and.w	r3, r3, #7
}
 800732e:	4618      	mov	r0, r3
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	e000ed00 	.word	0xe000ed00

0800733c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	4603      	mov	r3, r0
 8007344:	6039      	str	r1, [r7, #0]
 8007346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800734c:	2b00      	cmp	r3, #0
 800734e:	db0a      	blt.n	8007366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	b2da      	uxtb	r2, r3
 8007354:	490c      	ldr	r1, [pc, #48]	; (8007388 <__NVIC_SetPriority+0x4c>)
 8007356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800735a:	0112      	lsls	r2, r2, #4
 800735c:	b2d2      	uxtb	r2, r2
 800735e:	440b      	add	r3, r1
 8007360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007364:	e00a      	b.n	800737c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	b2da      	uxtb	r2, r3
 800736a:	4908      	ldr	r1, [pc, #32]	; (800738c <__NVIC_SetPriority+0x50>)
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	3b04      	subs	r3, #4
 8007374:	0112      	lsls	r2, r2, #4
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	440b      	add	r3, r1
 800737a:	761a      	strb	r2, [r3, #24]
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	e000e100 	.word	0xe000e100
 800738c:	e000ed00 	.word	0xe000ed00

08007390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007390:	b480      	push	{r7}
 8007392:	b089      	sub	sp, #36	; 0x24
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	f1c3 0307 	rsb	r3, r3, #7
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	bf28      	it	cs
 80073ae:	2304      	movcs	r3, #4
 80073b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	3304      	adds	r3, #4
 80073b6:	2b06      	cmp	r3, #6
 80073b8:	d902      	bls.n	80073c0 <NVIC_EncodePriority+0x30>
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	3b03      	subs	r3, #3
 80073be:	e000      	b.n	80073c2 <NVIC_EncodePriority+0x32>
 80073c0:	2300      	movs	r3, #0
 80073c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073c4:	f04f 32ff 	mov.w	r2, #4294967295
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	fa02 f303 	lsl.w	r3, r2, r3
 80073ce:	43da      	mvns	r2, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	401a      	ands	r2, r3
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073d8:	f04f 31ff 	mov.w	r1, #4294967295
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	fa01 f303 	lsl.w	r3, r1, r3
 80073e2:	43d9      	mvns	r1, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073e8:	4313      	orrs	r3, r2
         );
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3724      	adds	r7, #36	; 0x24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	3b01      	subs	r3, #1
 8007404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007408:	d301      	bcc.n	800740e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800740a:	2301      	movs	r3, #1
 800740c:	e00f      	b.n	800742e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800740e:	4a0a      	ldr	r2, [pc, #40]	; (8007438 <SysTick_Config+0x40>)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3b01      	subs	r3, #1
 8007414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007416:	210f      	movs	r1, #15
 8007418:	f04f 30ff 	mov.w	r0, #4294967295
 800741c:	f7ff ff8e 	bl	800733c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007420:	4b05      	ldr	r3, [pc, #20]	; (8007438 <SysTick_Config+0x40>)
 8007422:	2200      	movs	r2, #0
 8007424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007426:	4b04      	ldr	r3, [pc, #16]	; (8007438 <SysTick_Config+0x40>)
 8007428:	2207      	movs	r2, #7
 800742a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	e000e010 	.word	0xe000e010

0800743c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff ff47 	bl	80072d8 <__NVIC_SetPriorityGrouping>
}
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007452:	b580      	push	{r7, lr}
 8007454:	b086      	sub	sp, #24
 8007456:	af00      	add	r7, sp, #0
 8007458:	4603      	mov	r3, r0
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
 800745e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007460:	2300      	movs	r3, #0
 8007462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007464:	f7ff ff5c 	bl	8007320 <__NVIC_GetPriorityGrouping>
 8007468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	6978      	ldr	r0, [r7, #20]
 8007470:	f7ff ff8e 	bl	8007390 <NVIC_EncodePriority>
 8007474:	4602      	mov	r2, r0
 8007476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800747a:	4611      	mov	r1, r2
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff ff5d 	bl	800733c <__NVIC_SetPriority>
}
 8007482:	bf00      	nop
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff ffb0 	bl	80073f8 <SysTick_Config>
 8007498:	4603      	mov	r3, r0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
	...

080074a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b089      	sub	sp, #36	; 0x24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80074ba:	2300      	movs	r3, #0
 80074bc:	61fb      	str	r3, [r7, #28]
 80074be:	e159      	b.n	8007774 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80074c0:	2201      	movs	r2, #1
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	fa02 f303 	lsl.w	r3, r2, r3
 80074c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	4013      	ands	r3, r2
 80074d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	429a      	cmp	r2, r3
 80074da:	f040 8148 	bne.w	800776e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f003 0303 	and.w	r3, r3, #3
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d005      	beq.n	80074f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d130      	bne.n	8007558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	2203      	movs	r2, #3
 8007502:	fa02 f303 	lsl.w	r3, r2, r3
 8007506:	43db      	mvns	r3, r3
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	4013      	ands	r3, r2
 800750c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	fa02 f303 	lsl.w	r3, r2, r3
 800751a:	69ba      	ldr	r2, [r7, #24]
 800751c:	4313      	orrs	r3, r2
 800751e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800752c:	2201      	movs	r2, #1
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	fa02 f303 	lsl.w	r3, r2, r3
 8007534:	43db      	mvns	r3, r3
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	4013      	ands	r3, r2
 800753a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	091b      	lsrs	r3, r3, #4
 8007542:	f003 0201 	and.w	r2, r3, #1
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	fa02 f303 	lsl.w	r3, r2, r3
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	4313      	orrs	r3, r2
 8007550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f003 0303 	and.w	r3, r3, #3
 8007560:	2b03      	cmp	r3, #3
 8007562:	d017      	beq.n	8007594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	2203      	movs	r2, #3
 8007570:	fa02 f303 	lsl.w	r3, r2, r3
 8007574:	43db      	mvns	r3, r3
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	4013      	ands	r3, r2
 800757a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	005b      	lsls	r3, r3, #1
 8007584:	fa02 f303 	lsl.w	r3, r2, r3
 8007588:	69ba      	ldr	r2, [r7, #24]
 800758a:	4313      	orrs	r3, r2
 800758c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f003 0303 	and.w	r3, r3, #3
 800759c:	2b02      	cmp	r3, #2
 800759e:	d123      	bne.n	80075e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	08da      	lsrs	r2, r3, #3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3208      	adds	r2, #8
 80075a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	220f      	movs	r2, #15
 80075b8:	fa02 f303 	lsl.w	r3, r2, r3
 80075bc:	43db      	mvns	r3, r3
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	4013      	ands	r3, r2
 80075c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	691a      	ldr	r2, [r3, #16]
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	fa02 f303 	lsl.w	r3, r2, r3
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	08da      	lsrs	r2, r3, #3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3208      	adds	r2, #8
 80075e2:	69b9      	ldr	r1, [r7, #24]
 80075e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	005b      	lsls	r3, r3, #1
 80075f2:	2203      	movs	r2, #3
 80075f4:	fa02 f303 	lsl.w	r3, r2, r3
 80075f8:	43db      	mvns	r3, r3
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	4013      	ands	r3, r2
 80075fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f003 0203 	and.w	r2, r3, #3
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	005b      	lsls	r3, r3, #1
 800760c:	fa02 f303 	lsl.w	r3, r2, r3
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	4313      	orrs	r3, r2
 8007614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	69ba      	ldr	r2, [r7, #24]
 800761a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 80a2 	beq.w	800776e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800762a:	2300      	movs	r3, #0
 800762c:	60fb      	str	r3, [r7, #12]
 800762e:	4b57      	ldr	r3, [pc, #348]	; (800778c <HAL_GPIO_Init+0x2e8>)
 8007630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007632:	4a56      	ldr	r2, [pc, #344]	; (800778c <HAL_GPIO_Init+0x2e8>)
 8007634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007638:	6453      	str	r3, [r2, #68]	; 0x44
 800763a:	4b54      	ldr	r3, [pc, #336]	; (800778c <HAL_GPIO_Init+0x2e8>)
 800763c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007646:	4a52      	ldr	r2, [pc, #328]	; (8007790 <HAL_GPIO_Init+0x2ec>)
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	089b      	lsrs	r3, r3, #2
 800764c:	3302      	adds	r3, #2
 800764e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	220f      	movs	r2, #15
 800765e:	fa02 f303 	lsl.w	r3, r2, r3
 8007662:	43db      	mvns	r3, r3
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	4013      	ands	r3, r2
 8007668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a49      	ldr	r2, [pc, #292]	; (8007794 <HAL_GPIO_Init+0x2f0>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d019      	beq.n	80076a6 <HAL_GPIO_Init+0x202>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a48      	ldr	r2, [pc, #288]	; (8007798 <HAL_GPIO_Init+0x2f4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d013      	beq.n	80076a2 <HAL_GPIO_Init+0x1fe>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a47      	ldr	r2, [pc, #284]	; (800779c <HAL_GPIO_Init+0x2f8>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d00d      	beq.n	800769e <HAL_GPIO_Init+0x1fa>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a46      	ldr	r2, [pc, #280]	; (80077a0 <HAL_GPIO_Init+0x2fc>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d007      	beq.n	800769a <HAL_GPIO_Init+0x1f6>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a45      	ldr	r2, [pc, #276]	; (80077a4 <HAL_GPIO_Init+0x300>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d101      	bne.n	8007696 <HAL_GPIO_Init+0x1f2>
 8007692:	2304      	movs	r3, #4
 8007694:	e008      	b.n	80076a8 <HAL_GPIO_Init+0x204>
 8007696:	2307      	movs	r3, #7
 8007698:	e006      	b.n	80076a8 <HAL_GPIO_Init+0x204>
 800769a:	2303      	movs	r3, #3
 800769c:	e004      	b.n	80076a8 <HAL_GPIO_Init+0x204>
 800769e:	2302      	movs	r3, #2
 80076a0:	e002      	b.n	80076a8 <HAL_GPIO_Init+0x204>
 80076a2:	2301      	movs	r3, #1
 80076a4:	e000      	b.n	80076a8 <HAL_GPIO_Init+0x204>
 80076a6:	2300      	movs	r3, #0
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	f002 0203 	and.w	r2, r2, #3
 80076ae:	0092      	lsls	r2, r2, #2
 80076b0:	4093      	lsls	r3, r2
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076b8:	4935      	ldr	r1, [pc, #212]	; (8007790 <HAL_GPIO_Init+0x2ec>)
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	089b      	lsrs	r3, r3, #2
 80076be:	3302      	adds	r3, #2
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80076c6:	4b38      	ldr	r3, [pc, #224]	; (80077a8 <HAL_GPIO_Init+0x304>)
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	43db      	mvns	r3, r3
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	4013      	ands	r3, r2
 80076d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80076e2:	69ba      	ldr	r2, [r7, #24]
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80076ea:	4a2f      	ldr	r2, [pc, #188]	; (80077a8 <HAL_GPIO_Init+0x304>)
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80076f0:	4b2d      	ldr	r3, [pc, #180]	; (80077a8 <HAL_GPIO_Init+0x304>)
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	43db      	mvns	r3, r3
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	4013      	ands	r3, r2
 80076fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	4313      	orrs	r3, r2
 8007712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007714:	4a24      	ldr	r2, [pc, #144]	; (80077a8 <HAL_GPIO_Init+0x304>)
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800771a:	4b23      	ldr	r3, [pc, #140]	; (80077a8 <HAL_GPIO_Init+0x304>)
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	43db      	mvns	r3, r3
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	4013      	ands	r3, r2
 8007728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	4313      	orrs	r3, r2
 800773c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800773e:	4a1a      	ldr	r2, [pc, #104]	; (80077a8 <HAL_GPIO_Init+0x304>)
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007744:	4b18      	ldr	r3, [pc, #96]	; (80077a8 <HAL_GPIO_Init+0x304>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	43db      	mvns	r3, r3
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	4013      	ands	r3, r2
 8007752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d003      	beq.n	8007768 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	4313      	orrs	r3, r2
 8007766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007768:	4a0f      	ldr	r2, [pc, #60]	; (80077a8 <HAL_GPIO_Init+0x304>)
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	3301      	adds	r3, #1
 8007772:	61fb      	str	r3, [r7, #28]
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	2b0f      	cmp	r3, #15
 8007778:	f67f aea2 	bls.w	80074c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800777c:	bf00      	nop
 800777e:	bf00      	nop
 8007780:	3724      	adds	r7, #36	; 0x24
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40023800 	.word	0x40023800
 8007790:	40013800 	.word	0x40013800
 8007794:	40020000 	.word	0x40020000
 8007798:	40020400 	.word	0x40020400
 800779c:	40020800 	.word	0x40020800
 80077a0:	40020c00 	.word	0x40020c00
 80077a4:	40021000 	.word	0x40021000
 80077a8:	40013c00 	.word	0x40013c00

080077ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	887b      	ldrh	r3, [r7, #2]
 80077be:	4013      	ands	r3, r2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077c4:	2301      	movs	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]
 80077c8:	e001      	b.n	80077ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077ca:	2300      	movs	r3, #0
 80077cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	807b      	strh	r3, [r7, #2]
 80077e8:	4613      	mov	r3, r2
 80077ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80077ec:	787b      	ldrb	r3, [r7, #1]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077f2:	887a      	ldrh	r2, [r7, #2]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80077f8:	e003      	b.n	8007802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80077fa:	887b      	ldrh	r3, [r7, #2]
 80077fc:	041a      	lsls	r2, r3, #16
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	619a      	str	r2, [r3, #24]
}
 8007802:	bf00      	nop
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
	...

08007810 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e12b      	b.n	8007a7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d106      	bne.n	800783c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7ff faa4 	bl	8006d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2224      	movs	r2, #36	; 0x24
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0201 	bic.w	r2, r2, #1
 8007852:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007862:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007872:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007874:	f001 fd62 	bl	800933c <HAL_RCC_GetPCLK1Freq>
 8007878:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	4a81      	ldr	r2, [pc, #516]	; (8007a84 <HAL_I2C_Init+0x274>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d807      	bhi.n	8007894 <HAL_I2C_Init+0x84>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4a80      	ldr	r2, [pc, #512]	; (8007a88 <HAL_I2C_Init+0x278>)
 8007888:	4293      	cmp	r3, r2
 800788a:	bf94      	ite	ls
 800788c:	2301      	movls	r3, #1
 800788e:	2300      	movhi	r3, #0
 8007890:	b2db      	uxtb	r3, r3
 8007892:	e006      	b.n	80078a2 <HAL_I2C_Init+0x92>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4a7d      	ldr	r2, [pc, #500]	; (8007a8c <HAL_I2C_Init+0x27c>)
 8007898:	4293      	cmp	r3, r2
 800789a:	bf94      	ite	ls
 800789c:	2301      	movls	r3, #1
 800789e:	2300      	movhi	r3, #0
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e0e7      	b.n	8007a7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	4a78      	ldr	r2, [pc, #480]	; (8007a90 <HAL_I2C_Init+0x280>)
 80078ae:	fba2 2303 	umull	r2, r3, r2, r3
 80078b2:	0c9b      	lsrs	r3, r3, #18
 80078b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6a1b      	ldr	r3, [r3, #32]
 80078d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	4a6a      	ldr	r2, [pc, #424]	; (8007a84 <HAL_I2C_Init+0x274>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d802      	bhi.n	80078e4 <HAL_I2C_Init+0xd4>
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	3301      	adds	r3, #1
 80078e2:	e009      	b.n	80078f8 <HAL_I2C_Init+0xe8>
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80078ea:	fb02 f303 	mul.w	r3, r2, r3
 80078ee:	4a69      	ldr	r2, [pc, #420]	; (8007a94 <HAL_I2C_Init+0x284>)
 80078f0:	fba2 2303 	umull	r2, r3, r2, r3
 80078f4:	099b      	lsrs	r3, r3, #6
 80078f6:	3301      	adds	r3, #1
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	6812      	ldr	r2, [r2, #0]
 80078fc:	430b      	orrs	r3, r1
 80078fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800790a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	495c      	ldr	r1, [pc, #368]	; (8007a84 <HAL_I2C_Init+0x274>)
 8007914:	428b      	cmp	r3, r1
 8007916:	d819      	bhi.n	800794c <HAL_I2C_Init+0x13c>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	1e59      	subs	r1, r3, #1
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	fbb1 f3f3 	udiv	r3, r1, r3
 8007926:	1c59      	adds	r1, r3, #1
 8007928:	f640 73fc 	movw	r3, #4092	; 0xffc
 800792c:	400b      	ands	r3, r1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <HAL_I2C_Init+0x138>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	1e59      	subs	r1, r3, #1
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007940:	3301      	adds	r3, #1
 8007942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007946:	e051      	b.n	80079ec <HAL_I2C_Init+0x1dc>
 8007948:	2304      	movs	r3, #4
 800794a:	e04f      	b.n	80079ec <HAL_I2C_Init+0x1dc>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d111      	bne.n	8007978 <HAL_I2C_Init+0x168>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	1e58      	subs	r0, r3, #1
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6859      	ldr	r1, [r3, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	440b      	add	r3, r1
 8007962:	fbb0 f3f3 	udiv	r3, r0, r3
 8007966:	3301      	adds	r3, #1
 8007968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800796c:	2b00      	cmp	r3, #0
 800796e:	bf0c      	ite	eq
 8007970:	2301      	moveq	r3, #1
 8007972:	2300      	movne	r3, #0
 8007974:	b2db      	uxtb	r3, r3
 8007976:	e012      	b.n	800799e <HAL_I2C_Init+0x18e>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	1e58      	subs	r0, r3, #1
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6859      	ldr	r1, [r3, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	440b      	add	r3, r1
 8007986:	0099      	lsls	r1, r3, #2
 8007988:	440b      	add	r3, r1
 800798a:	fbb0 f3f3 	udiv	r3, r0, r3
 800798e:	3301      	adds	r3, #1
 8007990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007994:	2b00      	cmp	r3, #0
 8007996:	bf0c      	ite	eq
 8007998:	2301      	moveq	r3, #1
 800799a:	2300      	movne	r3, #0
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <HAL_I2C_Init+0x196>
 80079a2:	2301      	movs	r3, #1
 80079a4:	e022      	b.n	80079ec <HAL_I2C_Init+0x1dc>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10e      	bne.n	80079cc <HAL_I2C_Init+0x1bc>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	1e58      	subs	r0, r3, #1
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6859      	ldr	r1, [r3, #4]
 80079b6:	460b      	mov	r3, r1
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	440b      	add	r3, r1
 80079bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80079c0:	3301      	adds	r3, #1
 80079c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ca:	e00f      	b.n	80079ec <HAL_I2C_Init+0x1dc>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	1e58      	subs	r0, r3, #1
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6859      	ldr	r1, [r3, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	440b      	add	r3, r1
 80079da:	0099      	lsls	r1, r3, #2
 80079dc:	440b      	add	r3, r1
 80079de:	fbb0 f3f3 	udiv	r3, r0, r3
 80079e2:	3301      	adds	r3, #1
 80079e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079ec:	6879      	ldr	r1, [r7, #4]
 80079ee:	6809      	ldr	r1, [r1, #0]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	69da      	ldr	r2, [r3, #28]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	431a      	orrs	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007a1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6911      	ldr	r1, [r2, #16]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	68d2      	ldr	r2, [r2, #12]
 8007a26:	4311      	orrs	r1, r2
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6812      	ldr	r2, [r2, #0]
 8007a2c:	430b      	orrs	r3, r1
 8007a2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	695a      	ldr	r2, [r3, #20]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	431a      	orrs	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0201 	orr.w	r2, r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	000186a0 	.word	0x000186a0
 8007a88:	001e847f 	.word	0x001e847f
 8007a8c:	003d08ff 	.word	0x003d08ff
 8007a90:	431bde83 	.word	0x431bde83
 8007a94:	10624dd3 	.word	0x10624dd3

08007a98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b088      	sub	sp, #32
 8007a9c:	af02      	add	r7, sp, #8
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	607a      	str	r2, [r7, #4]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	817b      	strh	r3, [r7, #10]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007aac:	f7ff fbe4 	bl	8007278 <HAL_GetTick>
 8007ab0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b20      	cmp	r3, #32
 8007abc:	f040 80e0 	bne.w	8007c80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	2319      	movs	r3, #25
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	4970      	ldr	r1, [pc, #448]	; (8007c8c <HAL_I2C_Master_Transmit+0x1f4>)
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 fde8 	bl	80086a0 <I2C_WaitOnFlagUntilTimeout>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	e0d3      	b.n	8007c82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d101      	bne.n	8007ae8 <HAL_I2C_Master_Transmit+0x50>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	e0cc      	b.n	8007c82 <HAL_I2C_Master_Transmit+0x1ea>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d007      	beq.n	8007b0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f042 0201 	orr.w	r2, r2, #1
 8007b0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2221      	movs	r2, #33	; 0x21
 8007b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2210      	movs	r2, #16
 8007b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	893a      	ldrh	r2, [r7, #8]
 8007b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	4a50      	ldr	r2, [pc, #320]	; (8007c90 <HAL_I2C_Master_Transmit+0x1f8>)
 8007b4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007b50:	8979      	ldrh	r1, [r7, #10]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	6a3a      	ldr	r2, [r7, #32]
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 fbbc 	bl	80082d4 <I2C_MasterRequestWrite>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e08d      	b.n	8007c82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b66:	2300      	movs	r3, #0
 8007b68:	613b      	str	r3, [r7, #16]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	613b      	str	r3, [r7, #16]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007b7c:	e066      	b.n	8007c4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	6a39      	ldr	r1, [r7, #32]
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 fe62 	bl	800884c <I2C_WaitOnTXEFlagUntilTimeout>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00d      	beq.n	8007baa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d107      	bne.n	8007ba6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ba4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e06b      	b.n	8007c82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	781a      	ldrb	r2, [r3, #0]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	f003 0304 	and.w	r3, r3, #4
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d11b      	bne.n	8007c20 <HAL_I2C_Master_Transmit+0x188>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d017      	beq.n	8007c20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	781a      	ldrb	r2, [r3, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	6a39      	ldr	r1, [r7, #32]
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 fe52 	bl	80088ce <I2C_WaitOnBTFFlagUntilTimeout>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00d      	beq.n	8007c4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	d107      	bne.n	8007c48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e01a      	b.n	8007c82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d194      	bne.n	8007b7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2220      	movs	r2, #32
 8007c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	e000      	b.n	8007c82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007c80:	2302      	movs	r3, #2
  }
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	00100002 	.word	0x00100002
 8007c90:	ffff0000 	.word	0xffff0000

08007c94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08c      	sub	sp, #48	; 0x30
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	607a      	str	r2, [r7, #4]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	817b      	strh	r3, [r7, #10]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ca8:	f7ff fae6 	bl	8007278 <HAL_GetTick>
 8007cac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	f040 820b 	bne.w	80080d2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	2319      	movs	r3, #25
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	497c      	ldr	r1, [pc, #496]	; (8007eb8 <HAL_I2C_Master_Receive+0x224>)
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 fcea 	bl	80086a0 <I2C_WaitOnFlagUntilTimeout>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	e1fe      	b.n	80080d4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d101      	bne.n	8007ce4 <HAL_I2C_Master_Receive+0x50>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e1f7      	b.n	80080d4 <HAL_I2C_Master_Receive+0x440>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d007      	beq.n	8007d0a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f042 0201 	orr.w	r2, r2, #1
 8007d08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2222      	movs	r2, #34	; 0x22
 8007d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2210      	movs	r2, #16
 8007d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	893a      	ldrh	r2, [r7, #8]
 8007d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4a5c      	ldr	r2, [pc, #368]	; (8007ebc <HAL_I2C_Master_Receive+0x228>)
 8007d4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007d4c:	8979      	ldrh	r1, [r7, #10]
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 fb40 	bl	80083d8 <I2C_MasterRequestRead>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e1b8      	b.n	80080d4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d113      	bne.n	8007d92 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	623b      	str	r3, [r7, #32]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	623b      	str	r3, [r7, #32]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	623b      	str	r3, [r7, #32]
 8007d7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	e18c      	b.n	80080ac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d11b      	bne.n	8007dd2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007da8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007daa:	2300      	movs	r3, #0
 8007dac:	61fb      	str	r3, [r7, #28]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	61fb      	str	r3, [r7, #28]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	61fb      	str	r3, [r7, #28]
 8007dbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	e16c      	b.n	80080ac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d11b      	bne.n	8007e12 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007de8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007df8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	61bb      	str	r3, [r7, #24]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	61bb      	str	r3, [r7, #24]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	61bb      	str	r3, [r7, #24]
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	e14c      	b.n	80080ac <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e22:	2300      	movs	r3, #0
 8007e24:	617b      	str	r3, [r7, #20]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	617b      	str	r3, [r7, #20]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	617b      	str	r3, [r7, #20]
 8007e36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007e38:	e138      	b.n	80080ac <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	f200 80f1 	bhi.w	8008026 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d123      	bne.n	8007e94 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 fd7d 	bl	8008950 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e139      	b.n	80080d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	691a      	ldr	r2, [r3, #16]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	b2d2      	uxtb	r2, r2
 8007e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	1c5a      	adds	r2, r3, #1
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e92:	e10b      	b.n	80080ac <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d14e      	bne.n	8007f3a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	4906      	ldr	r1, [pc, #24]	; (8007ec0 <HAL_I2C_Master_Receive+0x22c>)
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 fbfa 	bl	80086a0 <I2C_WaitOnFlagUntilTimeout>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d008      	beq.n	8007ec4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e10e      	b.n	80080d4 <HAL_I2C_Master_Receive+0x440>
 8007eb6:	bf00      	nop
 8007eb8:	00100002 	.word	0x00100002
 8007ebc:	ffff0000 	.word	0xffff0000
 8007ec0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ed2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691a      	ldr	r2, [r3, #16]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	3b01      	subs	r3, #1
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	691a      	ldr	r2, [r3, #16]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f10:	b2d2      	uxtb	r2, r2
 8007f12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f22:	3b01      	subs	r3, #1
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f38:	e0b8      	b.n	80080ac <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	2200      	movs	r2, #0
 8007f42:	4966      	ldr	r1, [pc, #408]	; (80080dc <HAL_I2C_Master_Receive+0x448>)
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 fbab 	bl	80086a0 <I2C_WaitOnFlagUntilTimeout>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e0bf      	b.n	80080d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	691a      	ldr	r2, [r3, #16]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	b2d2      	uxtb	r2, r2
 8007f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	494f      	ldr	r1, [pc, #316]	; (80080dc <HAL_I2C_Master_Receive+0x448>)
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 fb7d 	bl	80086a0 <I2C_WaitOnFlagUntilTimeout>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e091      	b.n	80080d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	691a      	ldr	r2, [r3, #16]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fca:	b2d2      	uxtb	r2, r2
 8007fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	3b01      	subs	r3, #1
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	691a      	ldr	r2, [r3, #16]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	b2d2      	uxtb	r2, r2
 8007ffe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800800e:	3b01      	subs	r3, #1
 8008010:	b29a      	uxth	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800801a:	b29b      	uxth	r3, r3
 800801c:	3b01      	subs	r3, #1
 800801e:	b29a      	uxth	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008024:	e042      	b.n	80080ac <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f000 fc90 	bl	8008950 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e04c      	b.n	80080d4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	691a      	ldr	r2, [r3, #16]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	b2d2      	uxtb	r2, r2
 8008046:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008056:	3b01      	subs	r3, #1
 8008058:	b29a      	uxth	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008062:	b29b      	uxth	r3, r3
 8008064:	3b01      	subs	r3, #1
 8008066:	b29a      	uxth	r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b04      	cmp	r3, #4
 8008078:	d118      	bne.n	80080ac <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	691a      	ldr	r2, [r3, #16]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008084:	b2d2      	uxtb	r2, r2
 8008086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	1c5a      	adds	r2, r3, #1
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008096:	3b01      	subs	r3, #1
 8008098:	b29a      	uxth	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	3b01      	subs	r3, #1
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f47f aec2 	bne.w	8007e3a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2220      	movs	r2, #32
 80080ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	e000      	b.n	80080d4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80080d2:	2302      	movs	r3, #2
  }
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3728      	adds	r7, #40	; 0x28
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	00010004 	.word	0x00010004

080080e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b088      	sub	sp, #32
 80080e4:	af02      	add	r7, sp, #8
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	4608      	mov	r0, r1
 80080ea:	4611      	mov	r1, r2
 80080ec:	461a      	mov	r2, r3
 80080ee:	4603      	mov	r3, r0
 80080f0:	817b      	strh	r3, [r7, #10]
 80080f2:	460b      	mov	r3, r1
 80080f4:	813b      	strh	r3, [r7, #8]
 80080f6:	4613      	mov	r3, r2
 80080f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80080fa:	f7ff f8bd 	bl	8007278 <HAL_GetTick>
 80080fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b20      	cmp	r3, #32
 800810a:	f040 80d9 	bne.w	80082c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	2319      	movs	r3, #25
 8008114:	2201      	movs	r2, #1
 8008116:	496d      	ldr	r1, [pc, #436]	; (80082cc <HAL_I2C_Mem_Write+0x1ec>)
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 fac1 	bl	80086a0 <I2C_WaitOnFlagUntilTimeout>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008124:	2302      	movs	r3, #2
 8008126:	e0cc      	b.n	80082c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800812e:	2b01      	cmp	r3, #1
 8008130:	d101      	bne.n	8008136 <HAL_I2C_Mem_Write+0x56>
 8008132:	2302      	movs	r3, #2
 8008134:	e0c5      	b.n	80082c2 <HAL_I2C_Mem_Write+0x1e2>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0301 	and.w	r3, r3, #1
 8008148:	2b01      	cmp	r3, #1
 800814a:	d007      	beq.n	800815c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f042 0201 	orr.w	r2, r2, #1
 800815a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800816a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2221      	movs	r2, #33	; 0x21
 8008170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2240      	movs	r2, #64	; 0x40
 8008178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6a3a      	ldr	r2, [r7, #32]
 8008186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800818c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008192:	b29a      	uxth	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4a4d      	ldr	r2, [pc, #308]	; (80082d0 <HAL_I2C_Mem_Write+0x1f0>)
 800819c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800819e:	88f8      	ldrh	r0, [r7, #6]
 80081a0:	893a      	ldrh	r2, [r7, #8]
 80081a2:	8979      	ldrh	r1, [r7, #10]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	4603      	mov	r3, r0
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 f9e0 	bl	8008574 <I2C_RequestMemoryWrite>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d052      	beq.n	8008260 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e081      	b.n	80082c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 fb42 	bl	800884c <I2C_WaitOnTXEFlagUntilTimeout>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00d      	beq.n	80081ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d107      	bne.n	80081e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e06b      	b.n	80082c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ee:	781a      	ldrb	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008204:	3b01      	subs	r3, #1
 8008206:	b29a      	uxth	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008210:	b29b      	uxth	r3, r3
 8008212:	3b01      	subs	r3, #1
 8008214:	b29a      	uxth	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	f003 0304 	and.w	r3, r3, #4
 8008224:	2b04      	cmp	r3, #4
 8008226:	d11b      	bne.n	8008260 <HAL_I2C_Mem_Write+0x180>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822c:	2b00      	cmp	r3, #0
 800822e:	d017      	beq.n	8008260 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008234:	781a      	ldrb	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800824a:	3b01      	subs	r3, #1
 800824c:	b29a      	uxth	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008256:	b29b      	uxth	r3, r3
 8008258:	3b01      	subs	r3, #1
 800825a:	b29a      	uxth	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1aa      	bne.n	80081be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 fb2e 	bl	80088ce <I2C_WaitOnBTFFlagUntilTimeout>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00d      	beq.n	8008294 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827c:	2b04      	cmp	r3, #4
 800827e:	d107      	bne.n	8008290 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800828e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e016      	b.n	80082c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	e000      	b.n	80082c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80082c0:	2302      	movs	r3, #2
  }
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3718      	adds	r7, #24
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	00100002 	.word	0x00100002
 80082d0:	ffff0000 	.word	0xffff0000

080082d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b088      	sub	sp, #32
 80082d8:	af02      	add	r7, sp, #8
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	607a      	str	r2, [r7, #4]
 80082de:	603b      	str	r3, [r7, #0]
 80082e0:	460b      	mov	r3, r1
 80082e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b08      	cmp	r3, #8
 80082ee:	d006      	beq.n	80082fe <I2C_MasterRequestWrite+0x2a>
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d003      	beq.n	80082fe <I2C_MasterRequestWrite+0x2a>
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082fc:	d108      	bne.n	8008310 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	e00b      	b.n	8008328 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008314:	2b12      	cmp	r3, #18
 8008316:	d107      	bne.n	8008328 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008326:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 f9b3 	bl	80086a0 <I2C_WaitOnFlagUntilTimeout>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00d      	beq.n	800835c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800834a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800834e:	d103      	bne.n	8008358 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008356:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e035      	b.n	80083c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008364:	d108      	bne.n	8008378 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008366:	897b      	ldrh	r3, [r7, #10]
 8008368:	b2db      	uxtb	r3, r3
 800836a:	461a      	mov	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008374:	611a      	str	r2, [r3, #16]
 8008376:	e01b      	b.n	80083b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008378:	897b      	ldrh	r3, [r7, #10]
 800837a:	11db      	asrs	r3, r3, #7
 800837c:	b2db      	uxtb	r3, r3
 800837e:	f003 0306 	and.w	r3, r3, #6
 8008382:	b2db      	uxtb	r3, r3
 8008384:	f063 030f 	orn	r3, r3, #15
 8008388:	b2da      	uxtb	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	490e      	ldr	r1, [pc, #56]	; (80083d0 <I2C_MasterRequestWrite+0xfc>)
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 f9d9 	bl	800874e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e010      	b.n	80083c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80083a6:	897b      	ldrh	r3, [r7, #10]
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	4907      	ldr	r1, [pc, #28]	; (80083d4 <I2C_MasterRequestWrite+0x100>)
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 f9c9 	bl	800874e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e000      	b.n	80083c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	00010008 	.word	0x00010008
 80083d4:	00010002 	.word	0x00010002

080083d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af02      	add	r7, sp, #8
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	607a      	str	r2, [r7, #4]
 80083e2:	603b      	str	r3, [r7, #0]
 80083e4:	460b      	mov	r3, r1
 80083e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2b08      	cmp	r3, #8
 8008402:	d006      	beq.n	8008412 <I2C_MasterRequestRead+0x3a>
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d003      	beq.n	8008412 <I2C_MasterRequestRead+0x3a>
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008410:	d108      	bne.n	8008424 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	e00b      	b.n	800843c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008428:	2b11      	cmp	r3, #17
 800842a:	d107      	bne.n	800843c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800843a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 f929 	bl	80086a0 <I2C_WaitOnFlagUntilTimeout>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00d      	beq.n	8008470 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800845e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008462:	d103      	bne.n	800846c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800846a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e079      	b.n	8008564 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008478:	d108      	bne.n	800848c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800847a:	897b      	ldrh	r3, [r7, #10]
 800847c:	b2db      	uxtb	r3, r3
 800847e:	f043 0301 	orr.w	r3, r3, #1
 8008482:	b2da      	uxtb	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	611a      	str	r2, [r3, #16]
 800848a:	e05f      	b.n	800854c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800848c:	897b      	ldrh	r3, [r7, #10]
 800848e:	11db      	asrs	r3, r3, #7
 8008490:	b2db      	uxtb	r3, r3
 8008492:	f003 0306 	and.w	r3, r3, #6
 8008496:	b2db      	uxtb	r3, r3
 8008498:	f063 030f 	orn	r3, r3, #15
 800849c:	b2da      	uxtb	r2, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	4930      	ldr	r1, [pc, #192]	; (800856c <I2C_MasterRequestRead+0x194>)
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 f94f 	bl	800874e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e054      	b.n	8008564 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80084ba:	897b      	ldrh	r3, [r7, #10]
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	4929      	ldr	r1, [pc, #164]	; (8008570 <I2C_MasterRequestRead+0x198>)
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f000 f93f 	bl	800874e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e044      	b.n	8008564 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084da:	2300      	movs	r3, #0
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	613b      	str	r3, [r7, #16]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	613b      	str	r3, [r7, #16]
 80084ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f000 f8c7 	bl	80086a0 <I2C_WaitOnFlagUntilTimeout>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00d      	beq.n	8008534 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008526:	d103      	bne.n	8008530 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800852e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008530:	2303      	movs	r3, #3
 8008532:	e017      	b.n	8008564 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008534:	897b      	ldrh	r3, [r7, #10]
 8008536:	11db      	asrs	r3, r3, #7
 8008538:	b2db      	uxtb	r3, r3
 800853a:	f003 0306 	and.w	r3, r3, #6
 800853e:	b2db      	uxtb	r3, r3
 8008540:	f063 030e 	orn	r3, r3, #14
 8008544:	b2da      	uxtb	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	4907      	ldr	r1, [pc, #28]	; (8008570 <I2C_MasterRequestRead+0x198>)
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f000 f8fb 	bl	800874e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e000      	b.n	8008564 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3718      	adds	r7, #24
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	00010008 	.word	0x00010008
 8008570:	00010002 	.word	0x00010002

08008574 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af02      	add	r7, sp, #8
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	4608      	mov	r0, r1
 800857e:	4611      	mov	r1, r2
 8008580:	461a      	mov	r2, r3
 8008582:	4603      	mov	r3, r0
 8008584:	817b      	strh	r3, [r7, #10]
 8008586:	460b      	mov	r3, r1
 8008588:	813b      	strh	r3, [r7, #8]
 800858a:	4613      	mov	r3, r2
 800858c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800859c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f000 f878 	bl	80086a0 <I2C_WaitOnFlagUntilTimeout>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00d      	beq.n	80085d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c4:	d103      	bne.n	80085ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e05f      	b.n	8008692 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085d2:	897b      	ldrh	r3, [r7, #10]
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	461a      	mov	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80085e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	6a3a      	ldr	r2, [r7, #32]
 80085e6:	492d      	ldr	r1, [pc, #180]	; (800869c <I2C_RequestMemoryWrite+0x128>)
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 f8b0 	bl	800874e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e04c      	b.n	8008692 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085f8:	2300      	movs	r3, #0
 80085fa:	617b      	str	r3, [r7, #20]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	617b      	str	r3, [r7, #20]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	617b      	str	r3, [r7, #20]
 800860c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800860e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008610:	6a39      	ldr	r1, [r7, #32]
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f000 f91a 	bl	800884c <I2C_WaitOnTXEFlagUntilTimeout>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00d      	beq.n	800863a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008622:	2b04      	cmp	r3, #4
 8008624:	d107      	bne.n	8008636 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008634:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e02b      	b.n	8008692 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800863a:	88fb      	ldrh	r3, [r7, #6]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d105      	bne.n	800864c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008640:	893b      	ldrh	r3, [r7, #8]
 8008642:	b2da      	uxtb	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	611a      	str	r2, [r3, #16]
 800864a:	e021      	b.n	8008690 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800864c:	893b      	ldrh	r3, [r7, #8]
 800864e:	0a1b      	lsrs	r3, r3, #8
 8008650:	b29b      	uxth	r3, r3
 8008652:	b2da      	uxtb	r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800865a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865c:	6a39      	ldr	r1, [r7, #32]
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 f8f4 	bl	800884c <I2C_WaitOnTXEFlagUntilTimeout>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00d      	beq.n	8008686 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	2b04      	cmp	r3, #4
 8008670:	d107      	bne.n	8008682 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008680:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e005      	b.n	8008692 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008686:	893b      	ldrh	r3, [r7, #8]
 8008688:	b2da      	uxtb	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	00010002 	.word	0x00010002

080086a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	603b      	str	r3, [r7, #0]
 80086ac:	4613      	mov	r3, r2
 80086ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086b0:	e025      	b.n	80086fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b8:	d021      	beq.n	80086fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ba:	f7fe fddd 	bl	8007278 <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d302      	bcc.n	80086d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d116      	bne.n	80086fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2220      	movs	r2, #32
 80086da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ea:	f043 0220 	orr.w	r2, r3, #32
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e023      	b.n	8008746 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	0c1b      	lsrs	r3, r3, #16
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b01      	cmp	r3, #1
 8008706:	d10d      	bne.n	8008724 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	43da      	mvns	r2, r3
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	4013      	ands	r3, r2
 8008714:	b29b      	uxth	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	bf0c      	ite	eq
 800871a:	2301      	moveq	r3, #1
 800871c:	2300      	movne	r3, #0
 800871e:	b2db      	uxtb	r3, r3
 8008720:	461a      	mov	r2, r3
 8008722:	e00c      	b.n	800873e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	43da      	mvns	r2, r3
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	4013      	ands	r3, r2
 8008730:	b29b      	uxth	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	bf0c      	ite	eq
 8008736:	2301      	moveq	r3, #1
 8008738:	2300      	movne	r3, #0
 800873a:	b2db      	uxtb	r3, r3
 800873c:	461a      	mov	r2, r3
 800873e:	79fb      	ldrb	r3, [r7, #7]
 8008740:	429a      	cmp	r2, r3
 8008742:	d0b6      	beq.n	80086b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	60f8      	str	r0, [r7, #12]
 8008756:	60b9      	str	r1, [r7, #8]
 8008758:	607a      	str	r2, [r7, #4]
 800875a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800875c:	e051      	b.n	8008802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800876c:	d123      	bne.n	80087b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800877c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008786:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2220      	movs	r2, #32
 8008792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a2:	f043 0204 	orr.w	r2, r3, #4
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e046      	b.n	8008844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087bc:	d021      	beq.n	8008802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087be:	f7fe fd5b 	bl	8007278 <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d302      	bcc.n	80087d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d116      	bne.n	8008802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2220      	movs	r2, #32
 80087de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ee:	f043 0220 	orr.w	r2, r3, #32
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e020      	b.n	8008844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	0c1b      	lsrs	r3, r3, #16
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b01      	cmp	r3, #1
 800880a:	d10c      	bne.n	8008826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	43da      	mvns	r2, r3
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	4013      	ands	r3, r2
 8008818:	b29b      	uxth	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	bf14      	ite	ne
 800881e:	2301      	movne	r3, #1
 8008820:	2300      	moveq	r3, #0
 8008822:	b2db      	uxtb	r3, r3
 8008824:	e00b      	b.n	800883e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	43da      	mvns	r2, r3
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	4013      	ands	r3, r2
 8008832:	b29b      	uxth	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	bf14      	ite	ne
 8008838:	2301      	movne	r3, #1
 800883a:	2300      	moveq	r3, #0
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d18d      	bne.n	800875e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008858:	e02d      	b.n	80088b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f000 f8ce 	bl	80089fc <I2C_IsAcknowledgeFailed>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e02d      	b.n	80088c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008870:	d021      	beq.n	80088b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008872:	f7fe fd01 	bl	8007278 <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	429a      	cmp	r2, r3
 8008880:	d302      	bcc.n	8008888 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d116      	bne.n	80088b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2220      	movs	r2, #32
 8008892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a2:	f043 0220 	orr.w	r2, r3, #32
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e007      	b.n	80088c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	695b      	ldr	r3, [r3, #20]
 80088bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c0:	2b80      	cmp	r3, #128	; 0x80
 80088c2:	d1ca      	bne.n	800885a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	60f8      	str	r0, [r7, #12]
 80088d6:	60b9      	str	r1, [r7, #8]
 80088d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088da:	e02d      	b.n	8008938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 f88d 	bl	80089fc <I2C_IsAcknowledgeFailed>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e02d      	b.n	8008948 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f2:	d021      	beq.n	8008938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088f4:	f7fe fcc0 	bl	8007278 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	429a      	cmp	r2, r3
 8008902:	d302      	bcc.n	800890a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d116      	bne.n	8008938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2220      	movs	r2, #32
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008924:	f043 0220 	orr.w	r2, r3, #32
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e007      	b.n	8008948 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	f003 0304 	and.w	r3, r3, #4
 8008942:	2b04      	cmp	r3, #4
 8008944:	d1ca      	bne.n	80088dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800895c:	e042      	b.n	80089e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	f003 0310 	and.w	r3, r3, #16
 8008968:	2b10      	cmp	r3, #16
 800896a:	d119      	bne.n	80089a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f06f 0210 	mvn.w	r2, #16
 8008974:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2220      	movs	r2, #32
 8008980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e029      	b.n	80089f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089a0:	f7fe fc6a 	bl	8007278 <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d302      	bcc.n	80089b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d116      	bne.n	80089e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2220      	movs	r2, #32
 80089c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d0:	f043 0220 	orr.w	r2, r3, #32
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e007      	b.n	80089f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ee:	2b40      	cmp	r3, #64	; 0x40
 80089f0:	d1b5      	bne.n	800895e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a12:	d11b      	bne.n	8008a4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2220      	movs	r2, #32
 8008a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a38:	f043 0204 	orr.w	r2, r3, #4
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e000      	b.n	8008a4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
	...

08008a5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e267      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d075      	beq.n	8008b66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008a7a:	4b88      	ldr	r3, [pc, #544]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f003 030c 	and.w	r3, r3, #12
 8008a82:	2b04      	cmp	r3, #4
 8008a84:	d00c      	beq.n	8008aa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a86:	4b85      	ldr	r3, [pc, #532]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008a8e:	2b08      	cmp	r3, #8
 8008a90:	d112      	bne.n	8008ab8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a92:	4b82      	ldr	r3, [pc, #520]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a9e:	d10b      	bne.n	8008ab8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008aa0:	4b7e      	ldr	r3, [pc, #504]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d05b      	beq.n	8008b64 <HAL_RCC_OscConfig+0x108>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d157      	bne.n	8008b64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e242      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac0:	d106      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x74>
 8008ac2:	4b76      	ldr	r3, [pc, #472]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a75      	ldr	r2, [pc, #468]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008acc:	6013      	str	r3, [r2, #0]
 8008ace:	e01d      	b.n	8008b0c <HAL_RCC_OscConfig+0xb0>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ad8:	d10c      	bne.n	8008af4 <HAL_RCC_OscConfig+0x98>
 8008ada:	4b70      	ldr	r3, [pc, #448]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a6f      	ldr	r2, [pc, #444]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ae4:	6013      	str	r3, [r2, #0]
 8008ae6:	4b6d      	ldr	r3, [pc, #436]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a6c      	ldr	r2, [pc, #432]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008af0:	6013      	str	r3, [r2, #0]
 8008af2:	e00b      	b.n	8008b0c <HAL_RCC_OscConfig+0xb0>
 8008af4:	4b69      	ldr	r3, [pc, #420]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a68      	ldr	r2, [pc, #416]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008afe:	6013      	str	r3, [r2, #0]
 8008b00:	4b66      	ldr	r3, [pc, #408]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a65      	ldr	r2, [pc, #404]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d013      	beq.n	8008b3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b14:	f7fe fbb0 	bl	8007278 <HAL_GetTick>
 8008b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b1a:	e008      	b.n	8008b2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b1c:	f7fe fbac 	bl	8007278 <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	2b64      	cmp	r3, #100	; 0x64
 8008b28:	d901      	bls.n	8008b2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e207      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b2e:	4b5b      	ldr	r3, [pc, #364]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0f0      	beq.n	8008b1c <HAL_RCC_OscConfig+0xc0>
 8008b3a:	e014      	b.n	8008b66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b3c:	f7fe fb9c 	bl	8007278 <HAL_GetTick>
 8008b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b42:	e008      	b.n	8008b56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b44:	f7fe fb98 	bl	8007278 <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	2b64      	cmp	r3, #100	; 0x64
 8008b50:	d901      	bls.n	8008b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e1f3      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b56:	4b51      	ldr	r3, [pc, #324]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1f0      	bne.n	8008b44 <HAL_RCC_OscConfig+0xe8>
 8008b62:	e000      	b.n	8008b66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0302 	and.w	r3, r3, #2
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d063      	beq.n	8008c3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b72:	4b4a      	ldr	r3, [pc, #296]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f003 030c 	and.w	r3, r3, #12
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00b      	beq.n	8008b96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b7e:	4b47      	ldr	r3, [pc, #284]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b86:	2b08      	cmp	r3, #8
 8008b88:	d11c      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b8a:	4b44      	ldr	r3, [pc, #272]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d116      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b96:	4b41      	ldr	r3, [pc, #260]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 0302 	and.w	r3, r3, #2
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d005      	beq.n	8008bae <HAL_RCC_OscConfig+0x152>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d001      	beq.n	8008bae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e1c7      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bae:	4b3b      	ldr	r3, [pc, #236]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	4937      	ldr	r1, [pc, #220]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bc2:	e03a      	b.n	8008c3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d020      	beq.n	8008c0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bcc:	4b34      	ldr	r3, [pc, #208]	; (8008ca0 <HAL_RCC_OscConfig+0x244>)
 8008bce:	2201      	movs	r2, #1
 8008bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd2:	f7fe fb51 	bl	8007278 <HAL_GetTick>
 8008bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bd8:	e008      	b.n	8008bec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bda:	f7fe fb4d 	bl	8007278 <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d901      	bls.n	8008bec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e1a8      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bec:	4b2b      	ldr	r3, [pc, #172]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0302 	and.w	r3, r3, #2
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0f0      	beq.n	8008bda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bf8:	4b28      	ldr	r3, [pc, #160]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	00db      	lsls	r3, r3, #3
 8008c06:	4925      	ldr	r1, [pc, #148]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	600b      	str	r3, [r1, #0]
 8008c0c:	e015      	b.n	8008c3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c0e:	4b24      	ldr	r3, [pc, #144]	; (8008ca0 <HAL_RCC_OscConfig+0x244>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c14:	f7fe fb30 	bl	8007278 <HAL_GetTick>
 8008c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c1a:	e008      	b.n	8008c2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c1c:	f7fe fb2c 	bl	8007278 <HAL_GetTick>
 8008c20:	4602      	mov	r2, r0
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d901      	bls.n	8008c2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e187      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c2e:	4b1b      	ldr	r3, [pc, #108]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0302 	and.w	r3, r3, #2
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1f0      	bne.n	8008c1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0308 	and.w	r3, r3, #8
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d036      	beq.n	8008cb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d016      	beq.n	8008c7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c4e:	4b15      	ldr	r3, [pc, #84]	; (8008ca4 <HAL_RCC_OscConfig+0x248>)
 8008c50:	2201      	movs	r2, #1
 8008c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c54:	f7fe fb10 	bl	8007278 <HAL_GetTick>
 8008c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c5a:	e008      	b.n	8008c6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c5c:	f7fe fb0c 	bl	8007278 <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d901      	bls.n	8008c6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e167      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c6e:	4b0b      	ldr	r3, [pc, #44]	; (8008c9c <HAL_RCC_OscConfig+0x240>)
 8008c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d0f0      	beq.n	8008c5c <HAL_RCC_OscConfig+0x200>
 8008c7a:	e01b      	b.n	8008cb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c7c:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <HAL_RCC_OscConfig+0x248>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c82:	f7fe faf9 	bl	8007278 <HAL_GetTick>
 8008c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c88:	e00e      	b.n	8008ca8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c8a:	f7fe faf5 	bl	8007278 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d907      	bls.n	8008ca8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e150      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
 8008c9c:	40023800 	.word	0x40023800
 8008ca0:	42470000 	.word	0x42470000
 8008ca4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ca8:	4b88      	ldr	r3, [pc, #544]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cac:	f003 0302 	and.w	r3, r3, #2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1ea      	bne.n	8008c8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 0304 	and.w	r3, r3, #4
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 8097 	beq.w	8008df0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cc6:	4b81      	ldr	r3, [pc, #516]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10f      	bne.n	8008cf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60bb      	str	r3, [r7, #8]
 8008cd6:	4b7d      	ldr	r3, [pc, #500]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cda:	4a7c      	ldr	r2, [pc, #496]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8008ce2:	4b7a      	ldr	r3, [pc, #488]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cea:	60bb      	str	r3, [r7, #8]
 8008cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cf2:	4b77      	ldr	r3, [pc, #476]	; (8008ed0 <HAL_RCC_OscConfig+0x474>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d118      	bne.n	8008d30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008cfe:	4b74      	ldr	r3, [pc, #464]	; (8008ed0 <HAL_RCC_OscConfig+0x474>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a73      	ldr	r2, [pc, #460]	; (8008ed0 <HAL_RCC_OscConfig+0x474>)
 8008d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d0a:	f7fe fab5 	bl	8007278 <HAL_GetTick>
 8008d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d10:	e008      	b.n	8008d24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d12:	f7fe fab1 	bl	8007278 <HAL_GetTick>
 8008d16:	4602      	mov	r2, r0
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d901      	bls.n	8008d24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e10c      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d24:	4b6a      	ldr	r3, [pc, #424]	; (8008ed0 <HAL_RCC_OscConfig+0x474>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d0f0      	beq.n	8008d12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d106      	bne.n	8008d46 <HAL_RCC_OscConfig+0x2ea>
 8008d38:	4b64      	ldr	r3, [pc, #400]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3c:	4a63      	ldr	r2, [pc, #396]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008d3e:	f043 0301 	orr.w	r3, r3, #1
 8008d42:	6713      	str	r3, [r2, #112]	; 0x70
 8008d44:	e01c      	b.n	8008d80 <HAL_RCC_OscConfig+0x324>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	2b05      	cmp	r3, #5
 8008d4c:	d10c      	bne.n	8008d68 <HAL_RCC_OscConfig+0x30c>
 8008d4e:	4b5f      	ldr	r3, [pc, #380]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d52:	4a5e      	ldr	r2, [pc, #376]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008d54:	f043 0304 	orr.w	r3, r3, #4
 8008d58:	6713      	str	r3, [r2, #112]	; 0x70
 8008d5a:	4b5c      	ldr	r3, [pc, #368]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d5e:	4a5b      	ldr	r2, [pc, #364]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008d60:	f043 0301 	orr.w	r3, r3, #1
 8008d64:	6713      	str	r3, [r2, #112]	; 0x70
 8008d66:	e00b      	b.n	8008d80 <HAL_RCC_OscConfig+0x324>
 8008d68:	4b58      	ldr	r3, [pc, #352]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6c:	4a57      	ldr	r2, [pc, #348]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008d6e:	f023 0301 	bic.w	r3, r3, #1
 8008d72:	6713      	str	r3, [r2, #112]	; 0x70
 8008d74:	4b55      	ldr	r3, [pc, #340]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d78:	4a54      	ldr	r2, [pc, #336]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008d7a:	f023 0304 	bic.w	r3, r3, #4
 8008d7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d015      	beq.n	8008db4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d88:	f7fe fa76 	bl	8007278 <HAL_GetTick>
 8008d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d8e:	e00a      	b.n	8008da6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d90:	f7fe fa72 	bl	8007278 <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d901      	bls.n	8008da6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	e0cb      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008da6:	4b49      	ldr	r3, [pc, #292]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008daa:	f003 0302 	and.w	r3, r3, #2
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0ee      	beq.n	8008d90 <HAL_RCC_OscConfig+0x334>
 8008db2:	e014      	b.n	8008dde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008db4:	f7fe fa60 	bl	8007278 <HAL_GetTick>
 8008db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dba:	e00a      	b.n	8008dd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008dbc:	f7fe fa5c 	bl	8007278 <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d901      	bls.n	8008dd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e0b5      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dd2:	4b3e      	ldr	r3, [pc, #248]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1ee      	bne.n	8008dbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d105      	bne.n	8008df0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008de4:	4b39      	ldr	r3, [pc, #228]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de8:	4a38      	ldr	r2, [pc, #224]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 80a1 	beq.w	8008f3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008dfa:	4b34      	ldr	r3, [pc, #208]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f003 030c 	and.w	r3, r3, #12
 8008e02:	2b08      	cmp	r3, #8
 8008e04:	d05c      	beq.n	8008ec0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d141      	bne.n	8008e92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e0e:	4b31      	ldr	r3, [pc, #196]	; (8008ed4 <HAL_RCC_OscConfig+0x478>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e14:	f7fe fa30 	bl	8007278 <HAL_GetTick>
 8008e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e1a:	e008      	b.n	8008e2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e1c:	f7fe fa2c 	bl	8007278 <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d901      	bls.n	8008e2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e087      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e2e:	4b27      	ldr	r3, [pc, #156]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1f0      	bne.n	8008e1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	69da      	ldr	r2, [r3, #28]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	431a      	orrs	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e48:	019b      	lsls	r3, r3, #6
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e50:	085b      	lsrs	r3, r3, #1
 8008e52:	3b01      	subs	r3, #1
 8008e54:	041b      	lsls	r3, r3, #16
 8008e56:	431a      	orrs	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5c:	061b      	lsls	r3, r3, #24
 8008e5e:	491b      	ldr	r1, [pc, #108]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008e60:	4313      	orrs	r3, r2
 8008e62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e64:	4b1b      	ldr	r3, [pc, #108]	; (8008ed4 <HAL_RCC_OscConfig+0x478>)
 8008e66:	2201      	movs	r2, #1
 8008e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e6a:	f7fe fa05 	bl	8007278 <HAL_GetTick>
 8008e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e70:	e008      	b.n	8008e84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e72:	f7fe fa01 	bl	8007278 <HAL_GetTick>
 8008e76:	4602      	mov	r2, r0
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d901      	bls.n	8008e84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e05c      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e84:	4b11      	ldr	r3, [pc, #68]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d0f0      	beq.n	8008e72 <HAL_RCC_OscConfig+0x416>
 8008e90:	e054      	b.n	8008f3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e92:	4b10      	ldr	r3, [pc, #64]	; (8008ed4 <HAL_RCC_OscConfig+0x478>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e98:	f7fe f9ee 	bl	8007278 <HAL_GetTick>
 8008e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e9e:	e008      	b.n	8008eb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ea0:	f7fe f9ea 	bl	8007278 <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d901      	bls.n	8008eb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e045      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eb2:	4b06      	ldr	r3, [pc, #24]	; (8008ecc <HAL_RCC_OscConfig+0x470>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1f0      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x444>
 8008ebe:	e03d      	b.n	8008f3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d107      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e038      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
 8008ecc:	40023800 	.word	0x40023800
 8008ed0:	40007000 	.word	0x40007000
 8008ed4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ed8:	4b1b      	ldr	r3, [pc, #108]	; (8008f48 <HAL_RCC_OscConfig+0x4ec>)
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d028      	beq.n	8008f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d121      	bne.n	8008f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d11a      	bne.n	8008f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008f08:	4013      	ands	r3, r2
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d111      	bne.n	8008f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1e:	085b      	lsrs	r3, r3, #1
 8008f20:	3b01      	subs	r3, #1
 8008f22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d107      	bne.n	8008f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d001      	beq.n	8008f3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e000      	b.n	8008f3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	40023800 	.word	0x40023800

08008f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e0cc      	b.n	80090fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f60:	4b68      	ldr	r3, [pc, #416]	; (8009104 <HAL_RCC_ClockConfig+0x1b8>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0307 	and.w	r3, r3, #7
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d90c      	bls.n	8008f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f6e:	4b65      	ldr	r3, [pc, #404]	; (8009104 <HAL_RCC_ClockConfig+0x1b8>)
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	b2d2      	uxtb	r2, r2
 8008f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f76:	4b63      	ldr	r3, [pc, #396]	; (8009104 <HAL_RCC_ClockConfig+0x1b8>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 0307 	and.w	r3, r3, #7
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d001      	beq.n	8008f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e0b8      	b.n	80090fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0302 	and.w	r3, r3, #2
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d020      	beq.n	8008fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0304 	and.w	r3, r3, #4
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d005      	beq.n	8008fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008fa0:	4b59      	ldr	r3, [pc, #356]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	4a58      	ldr	r2, [pc, #352]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 8008fa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008faa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 0308 	and.w	r3, r3, #8
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d005      	beq.n	8008fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008fb8:	4b53      	ldr	r3, [pc, #332]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	4a52      	ldr	r2, [pc, #328]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 8008fbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fc4:	4b50      	ldr	r3, [pc, #320]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	494d      	ldr	r1, [pc, #308]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d044      	beq.n	800906c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d107      	bne.n	8008ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fea:	4b47      	ldr	r3, [pc, #284]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d119      	bne.n	800902a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e07f      	b.n	80090fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d003      	beq.n	800900a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009006:	2b03      	cmp	r3, #3
 8009008:	d107      	bne.n	800901a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800900a:	4b3f      	ldr	r3, [pc, #252]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d109      	bne.n	800902a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e06f      	b.n	80090fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800901a:	4b3b      	ldr	r3, [pc, #236]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e067      	b.n	80090fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800902a:	4b37      	ldr	r3, [pc, #220]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f023 0203 	bic.w	r2, r3, #3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	4934      	ldr	r1, [pc, #208]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 8009038:	4313      	orrs	r3, r2
 800903a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800903c:	f7fe f91c 	bl	8007278 <HAL_GetTick>
 8009040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009042:	e00a      	b.n	800905a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009044:	f7fe f918 	bl	8007278 <HAL_GetTick>
 8009048:	4602      	mov	r2, r0
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009052:	4293      	cmp	r3, r2
 8009054:	d901      	bls.n	800905a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e04f      	b.n	80090fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800905a:	4b2b      	ldr	r3, [pc, #172]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f003 020c 	and.w	r2, r3, #12
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	429a      	cmp	r2, r3
 800906a:	d1eb      	bne.n	8009044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800906c:	4b25      	ldr	r3, [pc, #148]	; (8009104 <HAL_RCC_ClockConfig+0x1b8>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0307 	and.w	r3, r3, #7
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	429a      	cmp	r2, r3
 8009078:	d20c      	bcs.n	8009094 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800907a:	4b22      	ldr	r3, [pc, #136]	; (8009104 <HAL_RCC_ClockConfig+0x1b8>)
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	b2d2      	uxtb	r2, r2
 8009080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009082:	4b20      	ldr	r3, [pc, #128]	; (8009104 <HAL_RCC_ClockConfig+0x1b8>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	429a      	cmp	r2, r3
 800908e:	d001      	beq.n	8009094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e032      	b.n	80090fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0304 	and.w	r3, r3, #4
 800909c:	2b00      	cmp	r3, #0
 800909e:	d008      	beq.n	80090b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090a0:	4b19      	ldr	r3, [pc, #100]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	4916      	ldr	r1, [pc, #88]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 80090ae:	4313      	orrs	r3, r2
 80090b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0308 	and.w	r3, r3, #8
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d009      	beq.n	80090d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80090be:	4b12      	ldr	r3, [pc, #72]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	490e      	ldr	r1, [pc, #56]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80090d2:	f000 f821 	bl	8009118 <HAL_RCC_GetSysClockFreq>
 80090d6:	4602      	mov	r2, r0
 80090d8:	4b0b      	ldr	r3, [pc, #44]	; (8009108 <HAL_RCC_ClockConfig+0x1bc>)
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	091b      	lsrs	r3, r3, #4
 80090de:	f003 030f 	and.w	r3, r3, #15
 80090e2:	490a      	ldr	r1, [pc, #40]	; (800910c <HAL_RCC_ClockConfig+0x1c0>)
 80090e4:	5ccb      	ldrb	r3, [r1, r3]
 80090e6:	fa22 f303 	lsr.w	r3, r2, r3
 80090ea:	4a09      	ldr	r2, [pc, #36]	; (8009110 <HAL_RCC_ClockConfig+0x1c4>)
 80090ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80090ee:	4b09      	ldr	r3, [pc, #36]	; (8009114 <HAL_RCC_ClockConfig+0x1c8>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe f87c 	bl	80071f0 <HAL_InitTick>

  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	40023c00 	.word	0x40023c00
 8009108:	40023800 	.word	0x40023800
 800910c:	0800eb68 	.word	0x0800eb68
 8009110:	200002e0 	.word	0x200002e0
 8009114:	200002e4 	.word	0x200002e4

08009118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800911c:	b094      	sub	sp, #80	; 0x50
 800911e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	647b      	str	r3, [r7, #68]	; 0x44
 8009124:	2300      	movs	r3, #0
 8009126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009128:	2300      	movs	r3, #0
 800912a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009130:	4b79      	ldr	r3, [pc, #484]	; (8009318 <HAL_RCC_GetSysClockFreq+0x200>)
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f003 030c 	and.w	r3, r3, #12
 8009138:	2b08      	cmp	r3, #8
 800913a:	d00d      	beq.n	8009158 <HAL_RCC_GetSysClockFreq+0x40>
 800913c:	2b08      	cmp	r3, #8
 800913e:	f200 80e1 	bhi.w	8009304 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009142:	2b00      	cmp	r3, #0
 8009144:	d002      	beq.n	800914c <HAL_RCC_GetSysClockFreq+0x34>
 8009146:	2b04      	cmp	r3, #4
 8009148:	d003      	beq.n	8009152 <HAL_RCC_GetSysClockFreq+0x3a>
 800914a:	e0db      	b.n	8009304 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800914c:	4b73      	ldr	r3, [pc, #460]	; (800931c <HAL_RCC_GetSysClockFreq+0x204>)
 800914e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009150:	e0db      	b.n	800930a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009152:	4b73      	ldr	r3, [pc, #460]	; (8009320 <HAL_RCC_GetSysClockFreq+0x208>)
 8009154:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009156:	e0d8      	b.n	800930a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009158:	4b6f      	ldr	r3, [pc, #444]	; (8009318 <HAL_RCC_GetSysClockFreq+0x200>)
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009160:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009162:	4b6d      	ldr	r3, [pc, #436]	; (8009318 <HAL_RCC_GetSysClockFreq+0x200>)
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800916a:	2b00      	cmp	r3, #0
 800916c:	d063      	beq.n	8009236 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800916e:	4b6a      	ldr	r3, [pc, #424]	; (8009318 <HAL_RCC_GetSysClockFreq+0x200>)
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	099b      	lsrs	r3, r3, #6
 8009174:	2200      	movs	r2, #0
 8009176:	63bb      	str	r3, [r7, #56]	; 0x38
 8009178:	63fa      	str	r2, [r7, #60]	; 0x3c
 800917a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009180:	633b      	str	r3, [r7, #48]	; 0x30
 8009182:	2300      	movs	r3, #0
 8009184:	637b      	str	r3, [r7, #52]	; 0x34
 8009186:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800918a:	4622      	mov	r2, r4
 800918c:	462b      	mov	r3, r5
 800918e:	f04f 0000 	mov.w	r0, #0
 8009192:	f04f 0100 	mov.w	r1, #0
 8009196:	0159      	lsls	r1, r3, #5
 8009198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800919c:	0150      	lsls	r0, r2, #5
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	4621      	mov	r1, r4
 80091a4:	1a51      	subs	r1, r2, r1
 80091a6:	6139      	str	r1, [r7, #16]
 80091a8:	4629      	mov	r1, r5
 80091aa:	eb63 0301 	sbc.w	r3, r3, r1
 80091ae:	617b      	str	r3, [r7, #20]
 80091b0:	f04f 0200 	mov.w	r2, #0
 80091b4:	f04f 0300 	mov.w	r3, #0
 80091b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091bc:	4659      	mov	r1, fp
 80091be:	018b      	lsls	r3, r1, #6
 80091c0:	4651      	mov	r1, sl
 80091c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80091c6:	4651      	mov	r1, sl
 80091c8:	018a      	lsls	r2, r1, #6
 80091ca:	4651      	mov	r1, sl
 80091cc:	ebb2 0801 	subs.w	r8, r2, r1
 80091d0:	4659      	mov	r1, fp
 80091d2:	eb63 0901 	sbc.w	r9, r3, r1
 80091d6:	f04f 0200 	mov.w	r2, #0
 80091da:	f04f 0300 	mov.w	r3, #0
 80091de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091ea:	4690      	mov	r8, r2
 80091ec:	4699      	mov	r9, r3
 80091ee:	4623      	mov	r3, r4
 80091f0:	eb18 0303 	adds.w	r3, r8, r3
 80091f4:	60bb      	str	r3, [r7, #8]
 80091f6:	462b      	mov	r3, r5
 80091f8:	eb49 0303 	adc.w	r3, r9, r3
 80091fc:	60fb      	str	r3, [r7, #12]
 80091fe:	f04f 0200 	mov.w	r2, #0
 8009202:	f04f 0300 	mov.w	r3, #0
 8009206:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800920a:	4629      	mov	r1, r5
 800920c:	024b      	lsls	r3, r1, #9
 800920e:	4621      	mov	r1, r4
 8009210:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009214:	4621      	mov	r1, r4
 8009216:	024a      	lsls	r2, r1, #9
 8009218:	4610      	mov	r0, r2
 800921a:	4619      	mov	r1, r3
 800921c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800921e:	2200      	movs	r2, #0
 8009220:	62bb      	str	r3, [r7, #40]	; 0x28
 8009222:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009224:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009228:	f7f7 fcc6 	bl	8000bb8 <__aeabi_uldivmod>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	4613      	mov	r3, r2
 8009232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009234:	e058      	b.n	80092e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009236:	4b38      	ldr	r3, [pc, #224]	; (8009318 <HAL_RCC_GetSysClockFreq+0x200>)
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	099b      	lsrs	r3, r3, #6
 800923c:	2200      	movs	r2, #0
 800923e:	4618      	mov	r0, r3
 8009240:	4611      	mov	r1, r2
 8009242:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009246:	623b      	str	r3, [r7, #32]
 8009248:	2300      	movs	r3, #0
 800924a:	627b      	str	r3, [r7, #36]	; 0x24
 800924c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009250:	4642      	mov	r2, r8
 8009252:	464b      	mov	r3, r9
 8009254:	f04f 0000 	mov.w	r0, #0
 8009258:	f04f 0100 	mov.w	r1, #0
 800925c:	0159      	lsls	r1, r3, #5
 800925e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009262:	0150      	lsls	r0, r2, #5
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	4641      	mov	r1, r8
 800926a:	ebb2 0a01 	subs.w	sl, r2, r1
 800926e:	4649      	mov	r1, r9
 8009270:	eb63 0b01 	sbc.w	fp, r3, r1
 8009274:	f04f 0200 	mov.w	r2, #0
 8009278:	f04f 0300 	mov.w	r3, #0
 800927c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009280:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009284:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009288:	ebb2 040a 	subs.w	r4, r2, sl
 800928c:	eb63 050b 	sbc.w	r5, r3, fp
 8009290:	f04f 0200 	mov.w	r2, #0
 8009294:	f04f 0300 	mov.w	r3, #0
 8009298:	00eb      	lsls	r3, r5, #3
 800929a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800929e:	00e2      	lsls	r2, r4, #3
 80092a0:	4614      	mov	r4, r2
 80092a2:	461d      	mov	r5, r3
 80092a4:	4643      	mov	r3, r8
 80092a6:	18e3      	adds	r3, r4, r3
 80092a8:	603b      	str	r3, [r7, #0]
 80092aa:	464b      	mov	r3, r9
 80092ac:	eb45 0303 	adc.w	r3, r5, r3
 80092b0:	607b      	str	r3, [r7, #4]
 80092b2:	f04f 0200 	mov.w	r2, #0
 80092b6:	f04f 0300 	mov.w	r3, #0
 80092ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80092be:	4629      	mov	r1, r5
 80092c0:	028b      	lsls	r3, r1, #10
 80092c2:	4621      	mov	r1, r4
 80092c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80092c8:	4621      	mov	r1, r4
 80092ca:	028a      	lsls	r2, r1, #10
 80092cc:	4610      	mov	r0, r2
 80092ce:	4619      	mov	r1, r3
 80092d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092d2:	2200      	movs	r2, #0
 80092d4:	61bb      	str	r3, [r7, #24]
 80092d6:	61fa      	str	r2, [r7, #28]
 80092d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092dc:	f7f7 fc6c 	bl	8000bb8 <__aeabi_uldivmod>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4613      	mov	r3, r2
 80092e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80092e8:	4b0b      	ldr	r3, [pc, #44]	; (8009318 <HAL_RCC_GetSysClockFreq+0x200>)
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	0c1b      	lsrs	r3, r3, #16
 80092ee:	f003 0303 	and.w	r3, r3, #3
 80092f2:	3301      	adds	r3, #1
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80092f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009300:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009302:	e002      	b.n	800930a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009304:	4b05      	ldr	r3, [pc, #20]	; (800931c <HAL_RCC_GetSysClockFreq+0x204>)
 8009306:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800930a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800930c:	4618      	mov	r0, r3
 800930e:	3750      	adds	r7, #80	; 0x50
 8009310:	46bd      	mov	sp, r7
 8009312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009316:	bf00      	nop
 8009318:	40023800 	.word	0x40023800
 800931c:	00f42400 	.word	0x00f42400
 8009320:	007a1200 	.word	0x007a1200

08009324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009324:	b480      	push	{r7}
 8009326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009328:	4b03      	ldr	r3, [pc, #12]	; (8009338 <HAL_RCC_GetHCLKFreq+0x14>)
 800932a:	681b      	ldr	r3, [r3, #0]
}
 800932c:	4618      	mov	r0, r3
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	200002e0 	.word	0x200002e0

0800933c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009340:	f7ff fff0 	bl	8009324 <HAL_RCC_GetHCLKFreq>
 8009344:	4602      	mov	r2, r0
 8009346:	4b05      	ldr	r3, [pc, #20]	; (800935c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	0a9b      	lsrs	r3, r3, #10
 800934c:	f003 0307 	and.w	r3, r3, #7
 8009350:	4903      	ldr	r1, [pc, #12]	; (8009360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009352:	5ccb      	ldrb	r3, [r1, r3]
 8009354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009358:	4618      	mov	r0, r3
 800935a:	bd80      	pop	{r7, pc}
 800935c:	40023800 	.word	0x40023800
 8009360:	0800eb78 	.word	0x0800eb78

08009364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009368:	f7ff ffdc 	bl	8009324 <HAL_RCC_GetHCLKFreq>
 800936c:	4602      	mov	r2, r0
 800936e:	4b05      	ldr	r3, [pc, #20]	; (8009384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	0b5b      	lsrs	r3, r3, #13
 8009374:	f003 0307 	and.w	r3, r3, #7
 8009378:	4903      	ldr	r1, [pc, #12]	; (8009388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800937a:	5ccb      	ldrb	r3, [r1, r3]
 800937c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009380:	4618      	mov	r0, r3
 8009382:	bd80      	pop	{r7, pc}
 8009384:	40023800 	.word	0x40023800
 8009388:	0800eb78 	.word	0x0800eb78

0800938c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e03f      	b.n	800941e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d106      	bne.n	80093b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7fd fd86 	bl	8006ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2224      	movs	r2, #36	; 0x24
 80093bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68da      	ldr	r2, [r3, #12]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f929 	bl	8009628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	691a      	ldr	r2, [r3, #16]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	695a      	ldr	r2, [r3, #20]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68da      	ldr	r2, [r3, #12]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009404:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2220      	movs	r2, #32
 8009410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2220      	movs	r2, #32
 8009418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b08a      	sub	sp, #40	; 0x28
 800942a:	af02      	add	r7, sp, #8
 800942c:	60f8      	str	r0, [r7, #12]
 800942e:	60b9      	str	r1, [r7, #8]
 8009430:	603b      	str	r3, [r7, #0]
 8009432:	4613      	mov	r3, r2
 8009434:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009436:	2300      	movs	r3, #0
 8009438:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b20      	cmp	r3, #32
 8009444:	d17c      	bne.n	8009540 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <HAL_UART_Transmit+0x2c>
 800944c:	88fb      	ldrh	r3, [r7, #6]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e075      	b.n	8009542 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800945c:	2b01      	cmp	r3, #1
 800945e:	d101      	bne.n	8009464 <HAL_UART_Transmit+0x3e>
 8009460:	2302      	movs	r3, #2
 8009462:	e06e      	b.n	8009542 <HAL_UART_Transmit+0x11c>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2221      	movs	r2, #33	; 0x21
 8009476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800947a:	f7fd fefd 	bl	8007278 <HAL_GetTick>
 800947e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	88fa      	ldrh	r2, [r7, #6]
 8009484:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	88fa      	ldrh	r2, [r7, #6]
 800948a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009494:	d108      	bne.n	80094a8 <HAL_UART_Transmit+0x82>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d104      	bne.n	80094a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800949e:	2300      	movs	r3, #0
 80094a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	61bb      	str	r3, [r7, #24]
 80094a6:	e003      	b.n	80094b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094ac:	2300      	movs	r3, #0
 80094ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80094b8:	e02a      	b.n	8009510 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	2200      	movs	r2, #0
 80094c2:	2180      	movs	r1, #128	; 0x80
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f000 f840 	bl	800954a <UART_WaitOnFlagUntilTimeout>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e036      	b.n	8009542 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10b      	bne.n	80094f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	3302      	adds	r3, #2
 80094ee:	61bb      	str	r3, [r7, #24]
 80094f0:	e007      	b.n	8009502 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	781a      	ldrb	r2, [r3, #0]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	3301      	adds	r3, #1
 8009500:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009506:	b29b      	uxth	r3, r3
 8009508:	3b01      	subs	r3, #1
 800950a:	b29a      	uxth	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009514:	b29b      	uxth	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1cf      	bne.n	80094ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2200      	movs	r2, #0
 8009522:	2140      	movs	r1, #64	; 0x40
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 f810 	bl	800954a <UART_WaitOnFlagUntilTimeout>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d001      	beq.n	8009534 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e006      	b.n	8009542 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2220      	movs	r2, #32
 8009538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	e000      	b.n	8009542 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009540:	2302      	movs	r3, #2
  }
}
 8009542:	4618      	mov	r0, r3
 8009544:	3720      	adds	r7, #32
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b090      	sub	sp, #64	; 0x40
 800954e:	af00      	add	r7, sp, #0
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	60b9      	str	r1, [r7, #8]
 8009554:	603b      	str	r3, [r7, #0]
 8009556:	4613      	mov	r3, r2
 8009558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800955a:	e050      	b.n	80095fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800955c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800955e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009562:	d04c      	beq.n	80095fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009566:	2b00      	cmp	r3, #0
 8009568:	d007      	beq.n	800957a <UART_WaitOnFlagUntilTimeout+0x30>
 800956a:	f7fd fe85 	bl	8007278 <HAL_GetTick>
 800956e:	4602      	mov	r2, r0
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009576:	429a      	cmp	r2, r3
 8009578:	d241      	bcs.n	80095fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	330c      	adds	r3, #12
 8009580:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009584:	e853 3f00 	ldrex	r3, [r3]
 8009588:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	330c      	adds	r3, #12
 8009598:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800959a:	637a      	str	r2, [r7, #52]	; 0x34
 800959c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095a2:	e841 2300 	strex	r3, r2, [r1]
 80095a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1e5      	bne.n	800957a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3314      	adds	r3, #20
 80095b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	e853 3f00 	ldrex	r3, [r3]
 80095bc:	613b      	str	r3, [r7, #16]
   return(result);
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f023 0301 	bic.w	r3, r3, #1
 80095c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3314      	adds	r3, #20
 80095cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095ce:	623a      	str	r2, [r7, #32]
 80095d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d2:	69f9      	ldr	r1, [r7, #28]
 80095d4:	6a3a      	ldr	r2, [r7, #32]
 80095d6:	e841 2300 	strex	r3, r2, [r1]
 80095da:	61bb      	str	r3, [r7, #24]
   return(result);
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1e5      	bne.n	80095ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2220      	movs	r2, #32
 80095e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2220      	movs	r2, #32
 80095ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e00f      	b.n	800961e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	4013      	ands	r3, r2
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	429a      	cmp	r2, r3
 800960c:	bf0c      	ite	eq
 800960e:	2301      	moveq	r3, #1
 8009610:	2300      	movne	r3, #0
 8009612:	b2db      	uxtb	r3, r3
 8009614:	461a      	mov	r2, r3
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	429a      	cmp	r2, r3
 800961a:	d09f      	beq.n	800955c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3740      	adds	r7, #64	; 0x40
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
	...

08009628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800962c:	b0c0      	sub	sp, #256	; 0x100
 800962e:	af00      	add	r7, sp, #0
 8009630:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009644:	68d9      	ldr	r1, [r3, #12]
 8009646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	ea40 0301 	orr.w	r3, r0, r1
 8009650:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009656:	689a      	ldr	r2, [r3, #8]
 8009658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	431a      	orrs	r2, r3
 8009660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	431a      	orrs	r2, r3
 8009668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	4313      	orrs	r3, r2
 8009670:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009680:	f021 010c 	bic.w	r1, r1, #12
 8009684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800968e:	430b      	orrs	r3, r1
 8009690:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800969e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096a2:	6999      	ldr	r1, [r3, #24]
 80096a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	ea40 0301 	orr.w	r3, r0, r1
 80096ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	4b8f      	ldr	r3, [pc, #572]	; (80098f4 <UART_SetConfig+0x2cc>)
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d005      	beq.n	80096c8 <UART_SetConfig+0xa0>
 80096bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	4b8d      	ldr	r3, [pc, #564]	; (80098f8 <UART_SetConfig+0x2d0>)
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d104      	bne.n	80096d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096c8:	f7ff fe4c 	bl	8009364 <HAL_RCC_GetPCLK2Freq>
 80096cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80096d0:	e003      	b.n	80096da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80096d2:	f7ff fe33 	bl	800933c <HAL_RCC_GetPCLK1Freq>
 80096d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096de:	69db      	ldr	r3, [r3, #28]
 80096e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096e4:	f040 810c 	bne.w	8009900 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096ec:	2200      	movs	r2, #0
 80096ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80096f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80096f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80096fa:	4622      	mov	r2, r4
 80096fc:	462b      	mov	r3, r5
 80096fe:	1891      	adds	r1, r2, r2
 8009700:	65b9      	str	r1, [r7, #88]	; 0x58
 8009702:	415b      	adcs	r3, r3
 8009704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009706:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800970a:	4621      	mov	r1, r4
 800970c:	eb12 0801 	adds.w	r8, r2, r1
 8009710:	4629      	mov	r1, r5
 8009712:	eb43 0901 	adc.w	r9, r3, r1
 8009716:	f04f 0200 	mov.w	r2, #0
 800971a:	f04f 0300 	mov.w	r3, #0
 800971e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800972a:	4690      	mov	r8, r2
 800972c:	4699      	mov	r9, r3
 800972e:	4623      	mov	r3, r4
 8009730:	eb18 0303 	adds.w	r3, r8, r3
 8009734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009738:	462b      	mov	r3, r5
 800973a:	eb49 0303 	adc.w	r3, r9, r3
 800973e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800974e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009752:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009756:	460b      	mov	r3, r1
 8009758:	18db      	adds	r3, r3, r3
 800975a:	653b      	str	r3, [r7, #80]	; 0x50
 800975c:	4613      	mov	r3, r2
 800975e:	eb42 0303 	adc.w	r3, r2, r3
 8009762:	657b      	str	r3, [r7, #84]	; 0x54
 8009764:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009768:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800976c:	f7f7 fa24 	bl	8000bb8 <__aeabi_uldivmod>
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	4b61      	ldr	r3, [pc, #388]	; (80098fc <UART_SetConfig+0x2d4>)
 8009776:	fba3 2302 	umull	r2, r3, r3, r2
 800977a:	095b      	lsrs	r3, r3, #5
 800977c:	011c      	lsls	r4, r3, #4
 800977e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009782:	2200      	movs	r2, #0
 8009784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009788:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800978c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009790:	4642      	mov	r2, r8
 8009792:	464b      	mov	r3, r9
 8009794:	1891      	adds	r1, r2, r2
 8009796:	64b9      	str	r1, [r7, #72]	; 0x48
 8009798:	415b      	adcs	r3, r3
 800979a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800979c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80097a0:	4641      	mov	r1, r8
 80097a2:	eb12 0a01 	adds.w	sl, r2, r1
 80097a6:	4649      	mov	r1, r9
 80097a8:	eb43 0b01 	adc.w	fp, r3, r1
 80097ac:	f04f 0200 	mov.w	r2, #0
 80097b0:	f04f 0300 	mov.w	r3, #0
 80097b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80097b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80097bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097c0:	4692      	mov	sl, r2
 80097c2:	469b      	mov	fp, r3
 80097c4:	4643      	mov	r3, r8
 80097c6:	eb1a 0303 	adds.w	r3, sl, r3
 80097ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097ce:	464b      	mov	r3, r9
 80097d0:	eb4b 0303 	adc.w	r3, fp, r3
 80097d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80097d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80097e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80097ec:	460b      	mov	r3, r1
 80097ee:	18db      	adds	r3, r3, r3
 80097f0:	643b      	str	r3, [r7, #64]	; 0x40
 80097f2:	4613      	mov	r3, r2
 80097f4:	eb42 0303 	adc.w	r3, r2, r3
 80097f8:	647b      	str	r3, [r7, #68]	; 0x44
 80097fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80097fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009802:	f7f7 f9d9 	bl	8000bb8 <__aeabi_uldivmod>
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	4611      	mov	r1, r2
 800980c:	4b3b      	ldr	r3, [pc, #236]	; (80098fc <UART_SetConfig+0x2d4>)
 800980e:	fba3 2301 	umull	r2, r3, r3, r1
 8009812:	095b      	lsrs	r3, r3, #5
 8009814:	2264      	movs	r2, #100	; 0x64
 8009816:	fb02 f303 	mul.w	r3, r2, r3
 800981a:	1acb      	subs	r3, r1, r3
 800981c:	00db      	lsls	r3, r3, #3
 800981e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009822:	4b36      	ldr	r3, [pc, #216]	; (80098fc <UART_SetConfig+0x2d4>)
 8009824:	fba3 2302 	umull	r2, r3, r3, r2
 8009828:	095b      	lsrs	r3, r3, #5
 800982a:	005b      	lsls	r3, r3, #1
 800982c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009830:	441c      	add	r4, r3
 8009832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009836:	2200      	movs	r2, #0
 8009838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800983c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009840:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009844:	4642      	mov	r2, r8
 8009846:	464b      	mov	r3, r9
 8009848:	1891      	adds	r1, r2, r2
 800984a:	63b9      	str	r1, [r7, #56]	; 0x38
 800984c:	415b      	adcs	r3, r3
 800984e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009850:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009854:	4641      	mov	r1, r8
 8009856:	1851      	adds	r1, r2, r1
 8009858:	6339      	str	r1, [r7, #48]	; 0x30
 800985a:	4649      	mov	r1, r9
 800985c:	414b      	adcs	r3, r1
 800985e:	637b      	str	r3, [r7, #52]	; 0x34
 8009860:	f04f 0200 	mov.w	r2, #0
 8009864:	f04f 0300 	mov.w	r3, #0
 8009868:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800986c:	4659      	mov	r1, fp
 800986e:	00cb      	lsls	r3, r1, #3
 8009870:	4651      	mov	r1, sl
 8009872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009876:	4651      	mov	r1, sl
 8009878:	00ca      	lsls	r2, r1, #3
 800987a:	4610      	mov	r0, r2
 800987c:	4619      	mov	r1, r3
 800987e:	4603      	mov	r3, r0
 8009880:	4642      	mov	r2, r8
 8009882:	189b      	adds	r3, r3, r2
 8009884:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009888:	464b      	mov	r3, r9
 800988a:	460a      	mov	r2, r1
 800988c:	eb42 0303 	adc.w	r3, r2, r3
 8009890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80098a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80098a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80098a8:	460b      	mov	r3, r1
 80098aa:	18db      	adds	r3, r3, r3
 80098ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80098ae:	4613      	mov	r3, r2
 80098b0:	eb42 0303 	adc.w	r3, r2, r3
 80098b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80098be:	f7f7 f97b 	bl	8000bb8 <__aeabi_uldivmod>
 80098c2:	4602      	mov	r2, r0
 80098c4:	460b      	mov	r3, r1
 80098c6:	4b0d      	ldr	r3, [pc, #52]	; (80098fc <UART_SetConfig+0x2d4>)
 80098c8:	fba3 1302 	umull	r1, r3, r3, r2
 80098cc:	095b      	lsrs	r3, r3, #5
 80098ce:	2164      	movs	r1, #100	; 0x64
 80098d0:	fb01 f303 	mul.w	r3, r1, r3
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	3332      	adds	r3, #50	; 0x32
 80098da:	4a08      	ldr	r2, [pc, #32]	; (80098fc <UART_SetConfig+0x2d4>)
 80098dc:	fba2 2303 	umull	r2, r3, r2, r3
 80098e0:	095b      	lsrs	r3, r3, #5
 80098e2:	f003 0207 	and.w	r2, r3, #7
 80098e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4422      	add	r2, r4
 80098ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80098f0:	e105      	b.n	8009afe <UART_SetConfig+0x4d6>
 80098f2:	bf00      	nop
 80098f4:	40011000 	.word	0x40011000
 80098f8:	40011400 	.word	0x40011400
 80098fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009904:	2200      	movs	r2, #0
 8009906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800990a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800990e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009912:	4642      	mov	r2, r8
 8009914:	464b      	mov	r3, r9
 8009916:	1891      	adds	r1, r2, r2
 8009918:	6239      	str	r1, [r7, #32]
 800991a:	415b      	adcs	r3, r3
 800991c:	627b      	str	r3, [r7, #36]	; 0x24
 800991e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009922:	4641      	mov	r1, r8
 8009924:	1854      	adds	r4, r2, r1
 8009926:	4649      	mov	r1, r9
 8009928:	eb43 0501 	adc.w	r5, r3, r1
 800992c:	f04f 0200 	mov.w	r2, #0
 8009930:	f04f 0300 	mov.w	r3, #0
 8009934:	00eb      	lsls	r3, r5, #3
 8009936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800993a:	00e2      	lsls	r2, r4, #3
 800993c:	4614      	mov	r4, r2
 800993e:	461d      	mov	r5, r3
 8009940:	4643      	mov	r3, r8
 8009942:	18e3      	adds	r3, r4, r3
 8009944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009948:	464b      	mov	r3, r9
 800994a:	eb45 0303 	adc.w	r3, r5, r3
 800994e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800995e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009962:	f04f 0200 	mov.w	r2, #0
 8009966:	f04f 0300 	mov.w	r3, #0
 800996a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800996e:	4629      	mov	r1, r5
 8009970:	008b      	lsls	r3, r1, #2
 8009972:	4621      	mov	r1, r4
 8009974:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009978:	4621      	mov	r1, r4
 800997a:	008a      	lsls	r2, r1, #2
 800997c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009980:	f7f7 f91a 	bl	8000bb8 <__aeabi_uldivmod>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	4b60      	ldr	r3, [pc, #384]	; (8009b0c <UART_SetConfig+0x4e4>)
 800998a:	fba3 2302 	umull	r2, r3, r3, r2
 800998e:	095b      	lsrs	r3, r3, #5
 8009990:	011c      	lsls	r4, r3, #4
 8009992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009996:	2200      	movs	r2, #0
 8009998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800999c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80099a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80099a4:	4642      	mov	r2, r8
 80099a6:	464b      	mov	r3, r9
 80099a8:	1891      	adds	r1, r2, r2
 80099aa:	61b9      	str	r1, [r7, #24]
 80099ac:	415b      	adcs	r3, r3
 80099ae:	61fb      	str	r3, [r7, #28]
 80099b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099b4:	4641      	mov	r1, r8
 80099b6:	1851      	adds	r1, r2, r1
 80099b8:	6139      	str	r1, [r7, #16]
 80099ba:	4649      	mov	r1, r9
 80099bc:	414b      	adcs	r3, r1
 80099be:	617b      	str	r3, [r7, #20]
 80099c0:	f04f 0200 	mov.w	r2, #0
 80099c4:	f04f 0300 	mov.w	r3, #0
 80099c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80099cc:	4659      	mov	r1, fp
 80099ce:	00cb      	lsls	r3, r1, #3
 80099d0:	4651      	mov	r1, sl
 80099d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099d6:	4651      	mov	r1, sl
 80099d8:	00ca      	lsls	r2, r1, #3
 80099da:	4610      	mov	r0, r2
 80099dc:	4619      	mov	r1, r3
 80099de:	4603      	mov	r3, r0
 80099e0:	4642      	mov	r2, r8
 80099e2:	189b      	adds	r3, r3, r2
 80099e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099e8:	464b      	mov	r3, r9
 80099ea:	460a      	mov	r2, r1
 80099ec:	eb42 0303 	adc.w	r3, r2, r3
 80099f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80099fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009a00:	f04f 0200 	mov.w	r2, #0
 8009a04:	f04f 0300 	mov.w	r3, #0
 8009a08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	008b      	lsls	r3, r1, #2
 8009a10:	4641      	mov	r1, r8
 8009a12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a16:	4641      	mov	r1, r8
 8009a18:	008a      	lsls	r2, r1, #2
 8009a1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009a1e:	f7f7 f8cb 	bl	8000bb8 <__aeabi_uldivmod>
 8009a22:	4602      	mov	r2, r0
 8009a24:	460b      	mov	r3, r1
 8009a26:	4b39      	ldr	r3, [pc, #228]	; (8009b0c <UART_SetConfig+0x4e4>)
 8009a28:	fba3 1302 	umull	r1, r3, r3, r2
 8009a2c:	095b      	lsrs	r3, r3, #5
 8009a2e:	2164      	movs	r1, #100	; 0x64
 8009a30:	fb01 f303 	mul.w	r3, r1, r3
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	011b      	lsls	r3, r3, #4
 8009a38:	3332      	adds	r3, #50	; 0x32
 8009a3a:	4a34      	ldr	r2, [pc, #208]	; (8009b0c <UART_SetConfig+0x4e4>)
 8009a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a40:	095b      	lsrs	r3, r3, #5
 8009a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a46:	441c      	add	r4, r3
 8009a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	673b      	str	r3, [r7, #112]	; 0x70
 8009a50:	677a      	str	r2, [r7, #116]	; 0x74
 8009a52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009a56:	4642      	mov	r2, r8
 8009a58:	464b      	mov	r3, r9
 8009a5a:	1891      	adds	r1, r2, r2
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	415b      	adcs	r3, r3
 8009a60:	60fb      	str	r3, [r7, #12]
 8009a62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a66:	4641      	mov	r1, r8
 8009a68:	1851      	adds	r1, r2, r1
 8009a6a:	6039      	str	r1, [r7, #0]
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	414b      	adcs	r3, r1
 8009a70:	607b      	str	r3, [r7, #4]
 8009a72:	f04f 0200 	mov.w	r2, #0
 8009a76:	f04f 0300 	mov.w	r3, #0
 8009a7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a7e:	4659      	mov	r1, fp
 8009a80:	00cb      	lsls	r3, r1, #3
 8009a82:	4651      	mov	r1, sl
 8009a84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a88:	4651      	mov	r1, sl
 8009a8a:	00ca      	lsls	r2, r1, #3
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	4619      	mov	r1, r3
 8009a90:	4603      	mov	r3, r0
 8009a92:	4642      	mov	r2, r8
 8009a94:	189b      	adds	r3, r3, r2
 8009a96:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a98:	464b      	mov	r3, r9
 8009a9a:	460a      	mov	r2, r1
 8009a9c:	eb42 0303 	adc.w	r3, r2, r3
 8009aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	663b      	str	r3, [r7, #96]	; 0x60
 8009aac:	667a      	str	r2, [r7, #100]	; 0x64
 8009aae:	f04f 0200 	mov.w	r2, #0
 8009ab2:	f04f 0300 	mov.w	r3, #0
 8009ab6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009aba:	4649      	mov	r1, r9
 8009abc:	008b      	lsls	r3, r1, #2
 8009abe:	4641      	mov	r1, r8
 8009ac0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ac4:	4641      	mov	r1, r8
 8009ac6:	008a      	lsls	r2, r1, #2
 8009ac8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009acc:	f7f7 f874 	bl	8000bb8 <__aeabi_uldivmod>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4b0d      	ldr	r3, [pc, #52]	; (8009b0c <UART_SetConfig+0x4e4>)
 8009ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8009ada:	095b      	lsrs	r3, r3, #5
 8009adc:	2164      	movs	r1, #100	; 0x64
 8009ade:	fb01 f303 	mul.w	r3, r1, r3
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	011b      	lsls	r3, r3, #4
 8009ae6:	3332      	adds	r3, #50	; 0x32
 8009ae8:	4a08      	ldr	r2, [pc, #32]	; (8009b0c <UART_SetConfig+0x4e4>)
 8009aea:	fba2 2303 	umull	r2, r3, r2, r3
 8009aee:	095b      	lsrs	r3, r3, #5
 8009af0:	f003 020f 	and.w	r2, r3, #15
 8009af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4422      	add	r2, r4
 8009afc:	609a      	str	r2, [r3, #8]
}
 8009afe:	bf00      	nop
 8009b00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009b04:	46bd      	mov	sp, r7
 8009b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b0a:	bf00      	nop
 8009b0c:	51eb851f 	.word	0x51eb851f

08009b10 <__errno>:
 8009b10:	4b01      	ldr	r3, [pc, #4]	; (8009b18 <__errno+0x8>)
 8009b12:	6818      	ldr	r0, [r3, #0]
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	200002ec 	.word	0x200002ec

08009b1c <__libc_init_array>:
 8009b1c:	b570      	push	{r4, r5, r6, lr}
 8009b1e:	4d0d      	ldr	r5, [pc, #52]	; (8009b54 <__libc_init_array+0x38>)
 8009b20:	4c0d      	ldr	r4, [pc, #52]	; (8009b58 <__libc_init_array+0x3c>)
 8009b22:	1b64      	subs	r4, r4, r5
 8009b24:	10a4      	asrs	r4, r4, #2
 8009b26:	2600      	movs	r6, #0
 8009b28:	42a6      	cmp	r6, r4
 8009b2a:	d109      	bne.n	8009b40 <__libc_init_array+0x24>
 8009b2c:	4d0b      	ldr	r5, [pc, #44]	; (8009b5c <__libc_init_array+0x40>)
 8009b2e:	4c0c      	ldr	r4, [pc, #48]	; (8009b60 <__libc_init_array+0x44>)
 8009b30:	f002 ff80 	bl	800ca34 <_init>
 8009b34:	1b64      	subs	r4, r4, r5
 8009b36:	10a4      	asrs	r4, r4, #2
 8009b38:	2600      	movs	r6, #0
 8009b3a:	42a6      	cmp	r6, r4
 8009b3c:	d105      	bne.n	8009b4a <__libc_init_array+0x2e>
 8009b3e:	bd70      	pop	{r4, r5, r6, pc}
 8009b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b44:	4798      	blx	r3
 8009b46:	3601      	adds	r6, #1
 8009b48:	e7ee      	b.n	8009b28 <__libc_init_array+0xc>
 8009b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b4e:	4798      	blx	r3
 8009b50:	3601      	adds	r6, #1
 8009b52:	e7f2      	b.n	8009b3a <__libc_init_array+0x1e>
 8009b54:	0800ef64 	.word	0x0800ef64
 8009b58:	0800ef64 	.word	0x0800ef64
 8009b5c:	0800ef64 	.word	0x0800ef64
 8009b60:	0800ef68 	.word	0x0800ef68

08009b64 <memcpy>:
 8009b64:	440a      	add	r2, r1
 8009b66:	4291      	cmp	r1, r2
 8009b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b6c:	d100      	bne.n	8009b70 <memcpy+0xc>
 8009b6e:	4770      	bx	lr
 8009b70:	b510      	push	{r4, lr}
 8009b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b7a:	4291      	cmp	r1, r2
 8009b7c:	d1f9      	bne.n	8009b72 <memcpy+0xe>
 8009b7e:	bd10      	pop	{r4, pc}

08009b80 <memmove>:
 8009b80:	4288      	cmp	r0, r1
 8009b82:	b510      	push	{r4, lr}
 8009b84:	eb01 0402 	add.w	r4, r1, r2
 8009b88:	d902      	bls.n	8009b90 <memmove+0x10>
 8009b8a:	4284      	cmp	r4, r0
 8009b8c:	4623      	mov	r3, r4
 8009b8e:	d807      	bhi.n	8009ba0 <memmove+0x20>
 8009b90:	1e43      	subs	r3, r0, #1
 8009b92:	42a1      	cmp	r1, r4
 8009b94:	d008      	beq.n	8009ba8 <memmove+0x28>
 8009b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b9e:	e7f8      	b.n	8009b92 <memmove+0x12>
 8009ba0:	4402      	add	r2, r0
 8009ba2:	4601      	mov	r1, r0
 8009ba4:	428a      	cmp	r2, r1
 8009ba6:	d100      	bne.n	8009baa <memmove+0x2a>
 8009ba8:	bd10      	pop	{r4, pc}
 8009baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bb2:	e7f7      	b.n	8009ba4 <memmove+0x24>

08009bb4 <memset>:
 8009bb4:	4402      	add	r2, r0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d100      	bne.n	8009bbe <memset+0xa>
 8009bbc:	4770      	bx	lr
 8009bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8009bc2:	e7f9      	b.n	8009bb8 <memset+0x4>

08009bc4 <__cvt>:
 8009bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc8:	ec55 4b10 	vmov	r4, r5, d0
 8009bcc:	2d00      	cmp	r5, #0
 8009bce:	460e      	mov	r6, r1
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	462b      	mov	r3, r5
 8009bd4:	bfbb      	ittet	lt
 8009bd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009bda:	461d      	movlt	r5, r3
 8009bdc:	2300      	movge	r3, #0
 8009bde:	232d      	movlt	r3, #45	; 0x2d
 8009be0:	700b      	strb	r3, [r1, #0]
 8009be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009be4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009be8:	4691      	mov	r9, r2
 8009bea:	f023 0820 	bic.w	r8, r3, #32
 8009bee:	bfbc      	itt	lt
 8009bf0:	4622      	movlt	r2, r4
 8009bf2:	4614      	movlt	r4, r2
 8009bf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bf8:	d005      	beq.n	8009c06 <__cvt+0x42>
 8009bfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009bfe:	d100      	bne.n	8009c02 <__cvt+0x3e>
 8009c00:	3601      	adds	r6, #1
 8009c02:	2102      	movs	r1, #2
 8009c04:	e000      	b.n	8009c08 <__cvt+0x44>
 8009c06:	2103      	movs	r1, #3
 8009c08:	ab03      	add	r3, sp, #12
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	ab02      	add	r3, sp, #8
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	ec45 4b10 	vmov	d0, r4, r5
 8009c14:	4653      	mov	r3, sl
 8009c16:	4632      	mov	r2, r6
 8009c18:	f000 fe2a 	bl	800a870 <_dtoa_r>
 8009c1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c20:	4607      	mov	r7, r0
 8009c22:	d102      	bne.n	8009c2a <__cvt+0x66>
 8009c24:	f019 0f01 	tst.w	r9, #1
 8009c28:	d022      	beq.n	8009c70 <__cvt+0xac>
 8009c2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c2e:	eb07 0906 	add.w	r9, r7, r6
 8009c32:	d110      	bne.n	8009c56 <__cvt+0x92>
 8009c34:	783b      	ldrb	r3, [r7, #0]
 8009c36:	2b30      	cmp	r3, #48	; 0x30
 8009c38:	d10a      	bne.n	8009c50 <__cvt+0x8c>
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4620      	mov	r0, r4
 8009c40:	4629      	mov	r1, r5
 8009c42:	f7f6 ff49 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c46:	b918      	cbnz	r0, 8009c50 <__cvt+0x8c>
 8009c48:	f1c6 0601 	rsb	r6, r6, #1
 8009c4c:	f8ca 6000 	str.w	r6, [sl]
 8009c50:	f8da 3000 	ldr.w	r3, [sl]
 8009c54:	4499      	add	r9, r3
 8009c56:	2200      	movs	r2, #0
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	4629      	mov	r1, r5
 8009c5e:	f7f6 ff3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c62:	b108      	cbz	r0, 8009c68 <__cvt+0xa4>
 8009c64:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c68:	2230      	movs	r2, #48	; 0x30
 8009c6a:	9b03      	ldr	r3, [sp, #12]
 8009c6c:	454b      	cmp	r3, r9
 8009c6e:	d307      	bcc.n	8009c80 <__cvt+0xbc>
 8009c70:	9b03      	ldr	r3, [sp, #12]
 8009c72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c74:	1bdb      	subs	r3, r3, r7
 8009c76:	4638      	mov	r0, r7
 8009c78:	6013      	str	r3, [r2, #0]
 8009c7a:	b004      	add	sp, #16
 8009c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c80:	1c59      	adds	r1, r3, #1
 8009c82:	9103      	str	r1, [sp, #12]
 8009c84:	701a      	strb	r2, [r3, #0]
 8009c86:	e7f0      	b.n	8009c6a <__cvt+0xa6>

08009c88 <__exponent>:
 8009c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2900      	cmp	r1, #0
 8009c8e:	bfb8      	it	lt
 8009c90:	4249      	neglt	r1, r1
 8009c92:	f803 2b02 	strb.w	r2, [r3], #2
 8009c96:	bfb4      	ite	lt
 8009c98:	222d      	movlt	r2, #45	; 0x2d
 8009c9a:	222b      	movge	r2, #43	; 0x2b
 8009c9c:	2909      	cmp	r1, #9
 8009c9e:	7042      	strb	r2, [r0, #1]
 8009ca0:	dd2a      	ble.n	8009cf8 <__exponent+0x70>
 8009ca2:	f10d 0407 	add.w	r4, sp, #7
 8009ca6:	46a4      	mov	ip, r4
 8009ca8:	270a      	movs	r7, #10
 8009caa:	46a6      	mov	lr, r4
 8009cac:	460a      	mov	r2, r1
 8009cae:	fb91 f6f7 	sdiv	r6, r1, r7
 8009cb2:	fb07 1516 	mls	r5, r7, r6, r1
 8009cb6:	3530      	adds	r5, #48	; 0x30
 8009cb8:	2a63      	cmp	r2, #99	; 0x63
 8009cba:	f104 34ff 	add.w	r4, r4, #4294967295
 8009cbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	dcf1      	bgt.n	8009caa <__exponent+0x22>
 8009cc6:	3130      	adds	r1, #48	; 0x30
 8009cc8:	f1ae 0502 	sub.w	r5, lr, #2
 8009ccc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009cd0:	1c44      	adds	r4, r0, #1
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	4561      	cmp	r1, ip
 8009cd6:	d30a      	bcc.n	8009cee <__exponent+0x66>
 8009cd8:	f10d 0209 	add.w	r2, sp, #9
 8009cdc:	eba2 020e 	sub.w	r2, r2, lr
 8009ce0:	4565      	cmp	r5, ip
 8009ce2:	bf88      	it	hi
 8009ce4:	2200      	movhi	r2, #0
 8009ce6:	4413      	add	r3, r2
 8009ce8:	1a18      	subs	r0, r3, r0
 8009cea:	b003      	add	sp, #12
 8009cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cf2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009cf6:	e7ed      	b.n	8009cd4 <__exponent+0x4c>
 8009cf8:	2330      	movs	r3, #48	; 0x30
 8009cfa:	3130      	adds	r1, #48	; 0x30
 8009cfc:	7083      	strb	r3, [r0, #2]
 8009cfe:	70c1      	strb	r1, [r0, #3]
 8009d00:	1d03      	adds	r3, r0, #4
 8009d02:	e7f1      	b.n	8009ce8 <__exponent+0x60>

08009d04 <_printf_float>:
 8009d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	ed2d 8b02 	vpush	{d8}
 8009d0c:	b08d      	sub	sp, #52	; 0x34
 8009d0e:	460c      	mov	r4, r1
 8009d10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009d14:	4616      	mov	r6, r2
 8009d16:	461f      	mov	r7, r3
 8009d18:	4605      	mov	r5, r0
 8009d1a:	f001 fd4f 	bl	800b7bc <_localeconv_r>
 8009d1e:	f8d0 a000 	ldr.w	sl, [r0]
 8009d22:	4650      	mov	r0, sl
 8009d24:	f7f6 fa5c 	bl	80001e0 <strlen>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d2c:	6823      	ldr	r3, [r4, #0]
 8009d2e:	9305      	str	r3, [sp, #20]
 8009d30:	f8d8 3000 	ldr.w	r3, [r8]
 8009d34:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009d38:	3307      	adds	r3, #7
 8009d3a:	f023 0307 	bic.w	r3, r3, #7
 8009d3e:	f103 0208 	add.w	r2, r3, #8
 8009d42:	f8c8 2000 	str.w	r2, [r8]
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009d52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d56:	9307      	str	r3, [sp, #28]
 8009d58:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d5c:	ee08 0a10 	vmov	s16, r0
 8009d60:	4b9f      	ldr	r3, [pc, #636]	; (8009fe0 <_printf_float+0x2dc>)
 8009d62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d66:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6a:	f7f6 fee7 	bl	8000b3c <__aeabi_dcmpun>
 8009d6e:	bb88      	cbnz	r0, 8009dd4 <_printf_float+0xd0>
 8009d70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d74:	4b9a      	ldr	r3, [pc, #616]	; (8009fe0 <_printf_float+0x2dc>)
 8009d76:	f04f 32ff 	mov.w	r2, #4294967295
 8009d7a:	f7f6 fec1 	bl	8000b00 <__aeabi_dcmple>
 8009d7e:	bb48      	cbnz	r0, 8009dd4 <_printf_float+0xd0>
 8009d80:	2200      	movs	r2, #0
 8009d82:	2300      	movs	r3, #0
 8009d84:	4640      	mov	r0, r8
 8009d86:	4649      	mov	r1, r9
 8009d88:	f7f6 feb0 	bl	8000aec <__aeabi_dcmplt>
 8009d8c:	b110      	cbz	r0, 8009d94 <_printf_float+0x90>
 8009d8e:	232d      	movs	r3, #45	; 0x2d
 8009d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d94:	4b93      	ldr	r3, [pc, #588]	; (8009fe4 <_printf_float+0x2e0>)
 8009d96:	4894      	ldr	r0, [pc, #592]	; (8009fe8 <_printf_float+0x2e4>)
 8009d98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d9c:	bf94      	ite	ls
 8009d9e:	4698      	movls	r8, r3
 8009da0:	4680      	movhi	r8, r0
 8009da2:	2303      	movs	r3, #3
 8009da4:	6123      	str	r3, [r4, #16]
 8009da6:	9b05      	ldr	r3, [sp, #20]
 8009da8:	f023 0204 	bic.w	r2, r3, #4
 8009dac:	6022      	str	r2, [r4, #0]
 8009dae:	f04f 0900 	mov.w	r9, #0
 8009db2:	9700      	str	r7, [sp, #0]
 8009db4:	4633      	mov	r3, r6
 8009db6:	aa0b      	add	r2, sp, #44	; 0x2c
 8009db8:	4621      	mov	r1, r4
 8009dba:	4628      	mov	r0, r5
 8009dbc:	f000 f9d8 	bl	800a170 <_printf_common>
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	f040 8090 	bne.w	8009ee6 <_printf_float+0x1e2>
 8009dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dca:	b00d      	add	sp, #52	; 0x34
 8009dcc:	ecbd 8b02 	vpop	{d8}
 8009dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd4:	4642      	mov	r2, r8
 8009dd6:	464b      	mov	r3, r9
 8009dd8:	4640      	mov	r0, r8
 8009dda:	4649      	mov	r1, r9
 8009ddc:	f7f6 feae 	bl	8000b3c <__aeabi_dcmpun>
 8009de0:	b140      	cbz	r0, 8009df4 <_printf_float+0xf0>
 8009de2:	464b      	mov	r3, r9
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	bfbc      	itt	lt
 8009de8:	232d      	movlt	r3, #45	; 0x2d
 8009dea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009dee:	487f      	ldr	r0, [pc, #508]	; (8009fec <_printf_float+0x2e8>)
 8009df0:	4b7f      	ldr	r3, [pc, #508]	; (8009ff0 <_printf_float+0x2ec>)
 8009df2:	e7d1      	b.n	8009d98 <_printf_float+0x94>
 8009df4:	6863      	ldr	r3, [r4, #4]
 8009df6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009dfa:	9206      	str	r2, [sp, #24]
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	d13f      	bne.n	8009e80 <_printf_float+0x17c>
 8009e00:	2306      	movs	r3, #6
 8009e02:	6063      	str	r3, [r4, #4]
 8009e04:	9b05      	ldr	r3, [sp, #20]
 8009e06:	6861      	ldr	r1, [r4, #4]
 8009e08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	9303      	str	r3, [sp, #12]
 8009e10:	ab0a      	add	r3, sp, #40	; 0x28
 8009e12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009e16:	ab09      	add	r3, sp, #36	; 0x24
 8009e18:	ec49 8b10 	vmov	d0, r8, r9
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	6022      	str	r2, [r4, #0]
 8009e20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e24:	4628      	mov	r0, r5
 8009e26:	f7ff fecd 	bl	8009bc4 <__cvt>
 8009e2a:	9b06      	ldr	r3, [sp, #24]
 8009e2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e2e:	2b47      	cmp	r3, #71	; 0x47
 8009e30:	4680      	mov	r8, r0
 8009e32:	d108      	bne.n	8009e46 <_printf_float+0x142>
 8009e34:	1cc8      	adds	r0, r1, #3
 8009e36:	db02      	blt.n	8009e3e <_printf_float+0x13a>
 8009e38:	6863      	ldr	r3, [r4, #4]
 8009e3a:	4299      	cmp	r1, r3
 8009e3c:	dd41      	ble.n	8009ec2 <_printf_float+0x1be>
 8009e3e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009e42:	fa5f fb8b 	uxtb.w	fp, fp
 8009e46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e4a:	d820      	bhi.n	8009e8e <_printf_float+0x18a>
 8009e4c:	3901      	subs	r1, #1
 8009e4e:	465a      	mov	r2, fp
 8009e50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e54:	9109      	str	r1, [sp, #36]	; 0x24
 8009e56:	f7ff ff17 	bl	8009c88 <__exponent>
 8009e5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e5c:	1813      	adds	r3, r2, r0
 8009e5e:	2a01      	cmp	r2, #1
 8009e60:	4681      	mov	r9, r0
 8009e62:	6123      	str	r3, [r4, #16]
 8009e64:	dc02      	bgt.n	8009e6c <_printf_float+0x168>
 8009e66:	6822      	ldr	r2, [r4, #0]
 8009e68:	07d2      	lsls	r2, r2, #31
 8009e6a:	d501      	bpl.n	8009e70 <_printf_float+0x16c>
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	6123      	str	r3, [r4, #16]
 8009e70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d09c      	beq.n	8009db2 <_printf_float+0xae>
 8009e78:	232d      	movs	r3, #45	; 0x2d
 8009e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e7e:	e798      	b.n	8009db2 <_printf_float+0xae>
 8009e80:	9a06      	ldr	r2, [sp, #24]
 8009e82:	2a47      	cmp	r2, #71	; 0x47
 8009e84:	d1be      	bne.n	8009e04 <_printf_float+0x100>
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1bc      	bne.n	8009e04 <_printf_float+0x100>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e7b9      	b.n	8009e02 <_printf_float+0xfe>
 8009e8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e92:	d118      	bne.n	8009ec6 <_printf_float+0x1c2>
 8009e94:	2900      	cmp	r1, #0
 8009e96:	6863      	ldr	r3, [r4, #4]
 8009e98:	dd0b      	ble.n	8009eb2 <_printf_float+0x1ae>
 8009e9a:	6121      	str	r1, [r4, #16]
 8009e9c:	b913      	cbnz	r3, 8009ea4 <_printf_float+0x1a0>
 8009e9e:	6822      	ldr	r2, [r4, #0]
 8009ea0:	07d0      	lsls	r0, r2, #31
 8009ea2:	d502      	bpl.n	8009eaa <_printf_float+0x1a6>
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	440b      	add	r3, r1
 8009ea8:	6123      	str	r3, [r4, #16]
 8009eaa:	65a1      	str	r1, [r4, #88]	; 0x58
 8009eac:	f04f 0900 	mov.w	r9, #0
 8009eb0:	e7de      	b.n	8009e70 <_printf_float+0x16c>
 8009eb2:	b913      	cbnz	r3, 8009eba <_printf_float+0x1b6>
 8009eb4:	6822      	ldr	r2, [r4, #0]
 8009eb6:	07d2      	lsls	r2, r2, #31
 8009eb8:	d501      	bpl.n	8009ebe <_printf_float+0x1ba>
 8009eba:	3302      	adds	r3, #2
 8009ebc:	e7f4      	b.n	8009ea8 <_printf_float+0x1a4>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e7f2      	b.n	8009ea8 <_printf_float+0x1a4>
 8009ec2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ec8:	4299      	cmp	r1, r3
 8009eca:	db05      	blt.n	8009ed8 <_printf_float+0x1d4>
 8009ecc:	6823      	ldr	r3, [r4, #0]
 8009ece:	6121      	str	r1, [r4, #16]
 8009ed0:	07d8      	lsls	r0, r3, #31
 8009ed2:	d5ea      	bpl.n	8009eaa <_printf_float+0x1a6>
 8009ed4:	1c4b      	adds	r3, r1, #1
 8009ed6:	e7e7      	b.n	8009ea8 <_printf_float+0x1a4>
 8009ed8:	2900      	cmp	r1, #0
 8009eda:	bfd4      	ite	le
 8009edc:	f1c1 0202 	rsble	r2, r1, #2
 8009ee0:	2201      	movgt	r2, #1
 8009ee2:	4413      	add	r3, r2
 8009ee4:	e7e0      	b.n	8009ea8 <_printf_float+0x1a4>
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	055a      	lsls	r2, r3, #21
 8009eea:	d407      	bmi.n	8009efc <_printf_float+0x1f8>
 8009eec:	6923      	ldr	r3, [r4, #16]
 8009eee:	4642      	mov	r2, r8
 8009ef0:	4631      	mov	r1, r6
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	47b8      	blx	r7
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	d12c      	bne.n	8009f54 <_printf_float+0x250>
 8009efa:	e764      	b.n	8009dc6 <_printf_float+0xc2>
 8009efc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f00:	f240 80e0 	bls.w	800a0c4 <_printf_float+0x3c0>
 8009f04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f08:	2200      	movs	r2, #0
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f7f6 fde4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d034      	beq.n	8009f7e <_printf_float+0x27a>
 8009f14:	4a37      	ldr	r2, [pc, #220]	; (8009ff4 <_printf_float+0x2f0>)
 8009f16:	2301      	movs	r3, #1
 8009f18:	4631      	mov	r1, r6
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	47b8      	blx	r7
 8009f1e:	3001      	adds	r0, #1
 8009f20:	f43f af51 	beq.w	8009dc6 <_printf_float+0xc2>
 8009f24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	db02      	blt.n	8009f32 <_printf_float+0x22e>
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	07d8      	lsls	r0, r3, #31
 8009f30:	d510      	bpl.n	8009f54 <_printf_float+0x250>
 8009f32:	ee18 3a10 	vmov	r3, s16
 8009f36:	4652      	mov	r2, sl
 8009f38:	4631      	mov	r1, r6
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	47b8      	blx	r7
 8009f3e:	3001      	adds	r0, #1
 8009f40:	f43f af41 	beq.w	8009dc6 <_printf_float+0xc2>
 8009f44:	f04f 0800 	mov.w	r8, #0
 8009f48:	f104 091a 	add.w	r9, r4, #26
 8009f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	4543      	cmp	r3, r8
 8009f52:	dc09      	bgt.n	8009f68 <_printf_float+0x264>
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	079b      	lsls	r3, r3, #30
 8009f58:	f100 8105 	bmi.w	800a166 <_printf_float+0x462>
 8009f5c:	68e0      	ldr	r0, [r4, #12]
 8009f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f60:	4298      	cmp	r0, r3
 8009f62:	bfb8      	it	lt
 8009f64:	4618      	movlt	r0, r3
 8009f66:	e730      	b.n	8009dca <_printf_float+0xc6>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	464a      	mov	r2, r9
 8009f6c:	4631      	mov	r1, r6
 8009f6e:	4628      	mov	r0, r5
 8009f70:	47b8      	blx	r7
 8009f72:	3001      	adds	r0, #1
 8009f74:	f43f af27 	beq.w	8009dc6 <_printf_float+0xc2>
 8009f78:	f108 0801 	add.w	r8, r8, #1
 8009f7c:	e7e6      	b.n	8009f4c <_printf_float+0x248>
 8009f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	dc39      	bgt.n	8009ff8 <_printf_float+0x2f4>
 8009f84:	4a1b      	ldr	r2, [pc, #108]	; (8009ff4 <_printf_float+0x2f0>)
 8009f86:	2301      	movs	r3, #1
 8009f88:	4631      	mov	r1, r6
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	47b8      	blx	r7
 8009f8e:	3001      	adds	r0, #1
 8009f90:	f43f af19 	beq.w	8009dc6 <_printf_float+0xc2>
 8009f94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	d102      	bne.n	8009fa2 <_printf_float+0x29e>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	07d9      	lsls	r1, r3, #31
 8009fa0:	d5d8      	bpl.n	8009f54 <_printf_float+0x250>
 8009fa2:	ee18 3a10 	vmov	r3, s16
 8009fa6:	4652      	mov	r2, sl
 8009fa8:	4631      	mov	r1, r6
 8009faa:	4628      	mov	r0, r5
 8009fac:	47b8      	blx	r7
 8009fae:	3001      	adds	r0, #1
 8009fb0:	f43f af09 	beq.w	8009dc6 <_printf_float+0xc2>
 8009fb4:	f04f 0900 	mov.w	r9, #0
 8009fb8:	f104 0a1a 	add.w	sl, r4, #26
 8009fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fbe:	425b      	negs	r3, r3
 8009fc0:	454b      	cmp	r3, r9
 8009fc2:	dc01      	bgt.n	8009fc8 <_printf_float+0x2c4>
 8009fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fc6:	e792      	b.n	8009eee <_printf_float+0x1ea>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	4652      	mov	r2, sl
 8009fcc:	4631      	mov	r1, r6
 8009fce:	4628      	mov	r0, r5
 8009fd0:	47b8      	blx	r7
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	f43f aef7 	beq.w	8009dc6 <_printf_float+0xc2>
 8009fd8:	f109 0901 	add.w	r9, r9, #1
 8009fdc:	e7ee      	b.n	8009fbc <_printf_float+0x2b8>
 8009fde:	bf00      	nop
 8009fe0:	7fefffff 	.word	0x7fefffff
 8009fe4:	0800eb84 	.word	0x0800eb84
 8009fe8:	0800eb88 	.word	0x0800eb88
 8009fec:	0800eb90 	.word	0x0800eb90
 8009ff0:	0800eb8c 	.word	0x0800eb8c
 8009ff4:	0800eb94 	.word	0x0800eb94
 8009ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ffa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	bfa8      	it	ge
 800a000:	461a      	movge	r2, r3
 800a002:	2a00      	cmp	r2, #0
 800a004:	4691      	mov	r9, r2
 800a006:	dc37      	bgt.n	800a078 <_printf_float+0x374>
 800a008:	f04f 0b00 	mov.w	fp, #0
 800a00c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a010:	f104 021a 	add.w	r2, r4, #26
 800a014:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a016:	9305      	str	r3, [sp, #20]
 800a018:	eba3 0309 	sub.w	r3, r3, r9
 800a01c:	455b      	cmp	r3, fp
 800a01e:	dc33      	bgt.n	800a088 <_printf_float+0x384>
 800a020:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a024:	429a      	cmp	r2, r3
 800a026:	db3b      	blt.n	800a0a0 <_printf_float+0x39c>
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	07da      	lsls	r2, r3, #31
 800a02c:	d438      	bmi.n	800a0a0 <_printf_float+0x39c>
 800a02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a030:	9a05      	ldr	r2, [sp, #20]
 800a032:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a034:	1a9a      	subs	r2, r3, r2
 800a036:	eba3 0901 	sub.w	r9, r3, r1
 800a03a:	4591      	cmp	r9, r2
 800a03c:	bfa8      	it	ge
 800a03e:	4691      	movge	r9, r2
 800a040:	f1b9 0f00 	cmp.w	r9, #0
 800a044:	dc35      	bgt.n	800a0b2 <_printf_float+0x3ae>
 800a046:	f04f 0800 	mov.w	r8, #0
 800a04a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a04e:	f104 0a1a 	add.w	sl, r4, #26
 800a052:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a056:	1a9b      	subs	r3, r3, r2
 800a058:	eba3 0309 	sub.w	r3, r3, r9
 800a05c:	4543      	cmp	r3, r8
 800a05e:	f77f af79 	ble.w	8009f54 <_printf_float+0x250>
 800a062:	2301      	movs	r3, #1
 800a064:	4652      	mov	r2, sl
 800a066:	4631      	mov	r1, r6
 800a068:	4628      	mov	r0, r5
 800a06a:	47b8      	blx	r7
 800a06c:	3001      	adds	r0, #1
 800a06e:	f43f aeaa 	beq.w	8009dc6 <_printf_float+0xc2>
 800a072:	f108 0801 	add.w	r8, r8, #1
 800a076:	e7ec      	b.n	800a052 <_printf_float+0x34e>
 800a078:	4613      	mov	r3, r2
 800a07a:	4631      	mov	r1, r6
 800a07c:	4642      	mov	r2, r8
 800a07e:	4628      	mov	r0, r5
 800a080:	47b8      	blx	r7
 800a082:	3001      	adds	r0, #1
 800a084:	d1c0      	bne.n	800a008 <_printf_float+0x304>
 800a086:	e69e      	b.n	8009dc6 <_printf_float+0xc2>
 800a088:	2301      	movs	r3, #1
 800a08a:	4631      	mov	r1, r6
 800a08c:	4628      	mov	r0, r5
 800a08e:	9205      	str	r2, [sp, #20]
 800a090:	47b8      	blx	r7
 800a092:	3001      	adds	r0, #1
 800a094:	f43f ae97 	beq.w	8009dc6 <_printf_float+0xc2>
 800a098:	9a05      	ldr	r2, [sp, #20]
 800a09a:	f10b 0b01 	add.w	fp, fp, #1
 800a09e:	e7b9      	b.n	800a014 <_printf_float+0x310>
 800a0a0:	ee18 3a10 	vmov	r3, s16
 800a0a4:	4652      	mov	r2, sl
 800a0a6:	4631      	mov	r1, r6
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	47b8      	blx	r7
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	d1be      	bne.n	800a02e <_printf_float+0x32a>
 800a0b0:	e689      	b.n	8009dc6 <_printf_float+0xc2>
 800a0b2:	9a05      	ldr	r2, [sp, #20]
 800a0b4:	464b      	mov	r3, r9
 800a0b6:	4442      	add	r2, r8
 800a0b8:	4631      	mov	r1, r6
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	47b8      	blx	r7
 800a0be:	3001      	adds	r0, #1
 800a0c0:	d1c1      	bne.n	800a046 <_printf_float+0x342>
 800a0c2:	e680      	b.n	8009dc6 <_printf_float+0xc2>
 800a0c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0c6:	2a01      	cmp	r2, #1
 800a0c8:	dc01      	bgt.n	800a0ce <_printf_float+0x3ca>
 800a0ca:	07db      	lsls	r3, r3, #31
 800a0cc:	d538      	bpl.n	800a140 <_printf_float+0x43c>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	4642      	mov	r2, r8
 800a0d2:	4631      	mov	r1, r6
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	47b8      	blx	r7
 800a0d8:	3001      	adds	r0, #1
 800a0da:	f43f ae74 	beq.w	8009dc6 <_printf_float+0xc2>
 800a0de:	ee18 3a10 	vmov	r3, s16
 800a0e2:	4652      	mov	r2, sl
 800a0e4:	4631      	mov	r1, r6
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	47b8      	blx	r7
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	f43f ae6b 	beq.w	8009dc6 <_printf_float+0xc2>
 800a0f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	f7f6 fcee 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0fc:	b9d8      	cbnz	r0, 800a136 <_printf_float+0x432>
 800a0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a100:	f108 0201 	add.w	r2, r8, #1
 800a104:	3b01      	subs	r3, #1
 800a106:	4631      	mov	r1, r6
 800a108:	4628      	mov	r0, r5
 800a10a:	47b8      	blx	r7
 800a10c:	3001      	adds	r0, #1
 800a10e:	d10e      	bne.n	800a12e <_printf_float+0x42a>
 800a110:	e659      	b.n	8009dc6 <_printf_float+0xc2>
 800a112:	2301      	movs	r3, #1
 800a114:	4652      	mov	r2, sl
 800a116:	4631      	mov	r1, r6
 800a118:	4628      	mov	r0, r5
 800a11a:	47b8      	blx	r7
 800a11c:	3001      	adds	r0, #1
 800a11e:	f43f ae52 	beq.w	8009dc6 <_printf_float+0xc2>
 800a122:	f108 0801 	add.w	r8, r8, #1
 800a126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a128:	3b01      	subs	r3, #1
 800a12a:	4543      	cmp	r3, r8
 800a12c:	dcf1      	bgt.n	800a112 <_printf_float+0x40e>
 800a12e:	464b      	mov	r3, r9
 800a130:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a134:	e6dc      	b.n	8009ef0 <_printf_float+0x1ec>
 800a136:	f04f 0800 	mov.w	r8, #0
 800a13a:	f104 0a1a 	add.w	sl, r4, #26
 800a13e:	e7f2      	b.n	800a126 <_printf_float+0x422>
 800a140:	2301      	movs	r3, #1
 800a142:	4642      	mov	r2, r8
 800a144:	e7df      	b.n	800a106 <_printf_float+0x402>
 800a146:	2301      	movs	r3, #1
 800a148:	464a      	mov	r2, r9
 800a14a:	4631      	mov	r1, r6
 800a14c:	4628      	mov	r0, r5
 800a14e:	47b8      	blx	r7
 800a150:	3001      	adds	r0, #1
 800a152:	f43f ae38 	beq.w	8009dc6 <_printf_float+0xc2>
 800a156:	f108 0801 	add.w	r8, r8, #1
 800a15a:	68e3      	ldr	r3, [r4, #12]
 800a15c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a15e:	1a5b      	subs	r3, r3, r1
 800a160:	4543      	cmp	r3, r8
 800a162:	dcf0      	bgt.n	800a146 <_printf_float+0x442>
 800a164:	e6fa      	b.n	8009f5c <_printf_float+0x258>
 800a166:	f04f 0800 	mov.w	r8, #0
 800a16a:	f104 0919 	add.w	r9, r4, #25
 800a16e:	e7f4      	b.n	800a15a <_printf_float+0x456>

0800a170 <_printf_common>:
 800a170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a174:	4616      	mov	r6, r2
 800a176:	4699      	mov	r9, r3
 800a178:	688a      	ldr	r2, [r1, #8]
 800a17a:	690b      	ldr	r3, [r1, #16]
 800a17c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a180:	4293      	cmp	r3, r2
 800a182:	bfb8      	it	lt
 800a184:	4613      	movlt	r3, r2
 800a186:	6033      	str	r3, [r6, #0]
 800a188:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a18c:	4607      	mov	r7, r0
 800a18e:	460c      	mov	r4, r1
 800a190:	b10a      	cbz	r2, 800a196 <_printf_common+0x26>
 800a192:	3301      	adds	r3, #1
 800a194:	6033      	str	r3, [r6, #0]
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	0699      	lsls	r1, r3, #26
 800a19a:	bf42      	ittt	mi
 800a19c:	6833      	ldrmi	r3, [r6, #0]
 800a19e:	3302      	addmi	r3, #2
 800a1a0:	6033      	strmi	r3, [r6, #0]
 800a1a2:	6825      	ldr	r5, [r4, #0]
 800a1a4:	f015 0506 	ands.w	r5, r5, #6
 800a1a8:	d106      	bne.n	800a1b8 <_printf_common+0x48>
 800a1aa:	f104 0a19 	add.w	sl, r4, #25
 800a1ae:	68e3      	ldr	r3, [r4, #12]
 800a1b0:	6832      	ldr	r2, [r6, #0]
 800a1b2:	1a9b      	subs	r3, r3, r2
 800a1b4:	42ab      	cmp	r3, r5
 800a1b6:	dc26      	bgt.n	800a206 <_printf_common+0x96>
 800a1b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1bc:	1e13      	subs	r3, r2, #0
 800a1be:	6822      	ldr	r2, [r4, #0]
 800a1c0:	bf18      	it	ne
 800a1c2:	2301      	movne	r3, #1
 800a1c4:	0692      	lsls	r2, r2, #26
 800a1c6:	d42b      	bmi.n	800a220 <_printf_common+0xb0>
 800a1c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1cc:	4649      	mov	r1, r9
 800a1ce:	4638      	mov	r0, r7
 800a1d0:	47c0      	blx	r8
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	d01e      	beq.n	800a214 <_printf_common+0xa4>
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	68e5      	ldr	r5, [r4, #12]
 800a1da:	6832      	ldr	r2, [r6, #0]
 800a1dc:	f003 0306 	and.w	r3, r3, #6
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	bf08      	it	eq
 800a1e4:	1aad      	subeq	r5, r5, r2
 800a1e6:	68a3      	ldr	r3, [r4, #8]
 800a1e8:	6922      	ldr	r2, [r4, #16]
 800a1ea:	bf0c      	ite	eq
 800a1ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1f0:	2500      	movne	r5, #0
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	bfc4      	itt	gt
 800a1f6:	1a9b      	subgt	r3, r3, r2
 800a1f8:	18ed      	addgt	r5, r5, r3
 800a1fa:	2600      	movs	r6, #0
 800a1fc:	341a      	adds	r4, #26
 800a1fe:	42b5      	cmp	r5, r6
 800a200:	d11a      	bne.n	800a238 <_printf_common+0xc8>
 800a202:	2000      	movs	r0, #0
 800a204:	e008      	b.n	800a218 <_printf_common+0xa8>
 800a206:	2301      	movs	r3, #1
 800a208:	4652      	mov	r2, sl
 800a20a:	4649      	mov	r1, r9
 800a20c:	4638      	mov	r0, r7
 800a20e:	47c0      	blx	r8
 800a210:	3001      	adds	r0, #1
 800a212:	d103      	bne.n	800a21c <_printf_common+0xac>
 800a214:	f04f 30ff 	mov.w	r0, #4294967295
 800a218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a21c:	3501      	adds	r5, #1
 800a21e:	e7c6      	b.n	800a1ae <_printf_common+0x3e>
 800a220:	18e1      	adds	r1, r4, r3
 800a222:	1c5a      	adds	r2, r3, #1
 800a224:	2030      	movs	r0, #48	; 0x30
 800a226:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a22a:	4422      	add	r2, r4
 800a22c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a230:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a234:	3302      	adds	r3, #2
 800a236:	e7c7      	b.n	800a1c8 <_printf_common+0x58>
 800a238:	2301      	movs	r3, #1
 800a23a:	4622      	mov	r2, r4
 800a23c:	4649      	mov	r1, r9
 800a23e:	4638      	mov	r0, r7
 800a240:	47c0      	blx	r8
 800a242:	3001      	adds	r0, #1
 800a244:	d0e6      	beq.n	800a214 <_printf_common+0xa4>
 800a246:	3601      	adds	r6, #1
 800a248:	e7d9      	b.n	800a1fe <_printf_common+0x8e>
	...

0800a24c <_printf_i>:
 800a24c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a250:	7e0f      	ldrb	r7, [r1, #24]
 800a252:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a254:	2f78      	cmp	r7, #120	; 0x78
 800a256:	4691      	mov	r9, r2
 800a258:	4680      	mov	r8, r0
 800a25a:	460c      	mov	r4, r1
 800a25c:	469a      	mov	sl, r3
 800a25e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a262:	d807      	bhi.n	800a274 <_printf_i+0x28>
 800a264:	2f62      	cmp	r7, #98	; 0x62
 800a266:	d80a      	bhi.n	800a27e <_printf_i+0x32>
 800a268:	2f00      	cmp	r7, #0
 800a26a:	f000 80d8 	beq.w	800a41e <_printf_i+0x1d2>
 800a26e:	2f58      	cmp	r7, #88	; 0x58
 800a270:	f000 80a3 	beq.w	800a3ba <_printf_i+0x16e>
 800a274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a27c:	e03a      	b.n	800a2f4 <_printf_i+0xa8>
 800a27e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a282:	2b15      	cmp	r3, #21
 800a284:	d8f6      	bhi.n	800a274 <_printf_i+0x28>
 800a286:	a101      	add	r1, pc, #4	; (adr r1, 800a28c <_printf_i+0x40>)
 800a288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a28c:	0800a2e5 	.word	0x0800a2e5
 800a290:	0800a2f9 	.word	0x0800a2f9
 800a294:	0800a275 	.word	0x0800a275
 800a298:	0800a275 	.word	0x0800a275
 800a29c:	0800a275 	.word	0x0800a275
 800a2a0:	0800a275 	.word	0x0800a275
 800a2a4:	0800a2f9 	.word	0x0800a2f9
 800a2a8:	0800a275 	.word	0x0800a275
 800a2ac:	0800a275 	.word	0x0800a275
 800a2b0:	0800a275 	.word	0x0800a275
 800a2b4:	0800a275 	.word	0x0800a275
 800a2b8:	0800a405 	.word	0x0800a405
 800a2bc:	0800a329 	.word	0x0800a329
 800a2c0:	0800a3e7 	.word	0x0800a3e7
 800a2c4:	0800a275 	.word	0x0800a275
 800a2c8:	0800a275 	.word	0x0800a275
 800a2cc:	0800a427 	.word	0x0800a427
 800a2d0:	0800a275 	.word	0x0800a275
 800a2d4:	0800a329 	.word	0x0800a329
 800a2d8:	0800a275 	.word	0x0800a275
 800a2dc:	0800a275 	.word	0x0800a275
 800a2e0:	0800a3ef 	.word	0x0800a3ef
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	1d1a      	adds	r2, r3, #4
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	602a      	str	r2, [r5, #0]
 800a2ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e0a3      	b.n	800a440 <_printf_i+0x1f4>
 800a2f8:	6820      	ldr	r0, [r4, #0]
 800a2fa:	6829      	ldr	r1, [r5, #0]
 800a2fc:	0606      	lsls	r6, r0, #24
 800a2fe:	f101 0304 	add.w	r3, r1, #4
 800a302:	d50a      	bpl.n	800a31a <_printf_i+0xce>
 800a304:	680e      	ldr	r6, [r1, #0]
 800a306:	602b      	str	r3, [r5, #0]
 800a308:	2e00      	cmp	r6, #0
 800a30a:	da03      	bge.n	800a314 <_printf_i+0xc8>
 800a30c:	232d      	movs	r3, #45	; 0x2d
 800a30e:	4276      	negs	r6, r6
 800a310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a314:	485e      	ldr	r0, [pc, #376]	; (800a490 <_printf_i+0x244>)
 800a316:	230a      	movs	r3, #10
 800a318:	e019      	b.n	800a34e <_printf_i+0x102>
 800a31a:	680e      	ldr	r6, [r1, #0]
 800a31c:	602b      	str	r3, [r5, #0]
 800a31e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a322:	bf18      	it	ne
 800a324:	b236      	sxthne	r6, r6
 800a326:	e7ef      	b.n	800a308 <_printf_i+0xbc>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	6820      	ldr	r0, [r4, #0]
 800a32c:	1d19      	adds	r1, r3, #4
 800a32e:	6029      	str	r1, [r5, #0]
 800a330:	0601      	lsls	r1, r0, #24
 800a332:	d501      	bpl.n	800a338 <_printf_i+0xec>
 800a334:	681e      	ldr	r6, [r3, #0]
 800a336:	e002      	b.n	800a33e <_printf_i+0xf2>
 800a338:	0646      	lsls	r6, r0, #25
 800a33a:	d5fb      	bpl.n	800a334 <_printf_i+0xe8>
 800a33c:	881e      	ldrh	r6, [r3, #0]
 800a33e:	4854      	ldr	r0, [pc, #336]	; (800a490 <_printf_i+0x244>)
 800a340:	2f6f      	cmp	r7, #111	; 0x6f
 800a342:	bf0c      	ite	eq
 800a344:	2308      	moveq	r3, #8
 800a346:	230a      	movne	r3, #10
 800a348:	2100      	movs	r1, #0
 800a34a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a34e:	6865      	ldr	r5, [r4, #4]
 800a350:	60a5      	str	r5, [r4, #8]
 800a352:	2d00      	cmp	r5, #0
 800a354:	bfa2      	ittt	ge
 800a356:	6821      	ldrge	r1, [r4, #0]
 800a358:	f021 0104 	bicge.w	r1, r1, #4
 800a35c:	6021      	strge	r1, [r4, #0]
 800a35e:	b90e      	cbnz	r6, 800a364 <_printf_i+0x118>
 800a360:	2d00      	cmp	r5, #0
 800a362:	d04d      	beq.n	800a400 <_printf_i+0x1b4>
 800a364:	4615      	mov	r5, r2
 800a366:	fbb6 f1f3 	udiv	r1, r6, r3
 800a36a:	fb03 6711 	mls	r7, r3, r1, r6
 800a36e:	5dc7      	ldrb	r7, [r0, r7]
 800a370:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a374:	4637      	mov	r7, r6
 800a376:	42bb      	cmp	r3, r7
 800a378:	460e      	mov	r6, r1
 800a37a:	d9f4      	bls.n	800a366 <_printf_i+0x11a>
 800a37c:	2b08      	cmp	r3, #8
 800a37e:	d10b      	bne.n	800a398 <_printf_i+0x14c>
 800a380:	6823      	ldr	r3, [r4, #0]
 800a382:	07de      	lsls	r6, r3, #31
 800a384:	d508      	bpl.n	800a398 <_printf_i+0x14c>
 800a386:	6923      	ldr	r3, [r4, #16]
 800a388:	6861      	ldr	r1, [r4, #4]
 800a38a:	4299      	cmp	r1, r3
 800a38c:	bfde      	ittt	le
 800a38e:	2330      	movle	r3, #48	; 0x30
 800a390:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a394:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a398:	1b52      	subs	r2, r2, r5
 800a39a:	6122      	str	r2, [r4, #16]
 800a39c:	f8cd a000 	str.w	sl, [sp]
 800a3a0:	464b      	mov	r3, r9
 800a3a2:	aa03      	add	r2, sp, #12
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	f7ff fee2 	bl	800a170 <_printf_common>
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	d14c      	bne.n	800a44a <_printf_i+0x1fe>
 800a3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b4:	b004      	add	sp, #16
 800a3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ba:	4835      	ldr	r0, [pc, #212]	; (800a490 <_printf_i+0x244>)
 800a3bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a3c0:	6829      	ldr	r1, [r5, #0]
 800a3c2:	6823      	ldr	r3, [r4, #0]
 800a3c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3c8:	6029      	str	r1, [r5, #0]
 800a3ca:	061d      	lsls	r5, r3, #24
 800a3cc:	d514      	bpl.n	800a3f8 <_printf_i+0x1ac>
 800a3ce:	07df      	lsls	r7, r3, #31
 800a3d0:	bf44      	itt	mi
 800a3d2:	f043 0320 	orrmi.w	r3, r3, #32
 800a3d6:	6023      	strmi	r3, [r4, #0]
 800a3d8:	b91e      	cbnz	r6, 800a3e2 <_printf_i+0x196>
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	f023 0320 	bic.w	r3, r3, #32
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	2310      	movs	r3, #16
 800a3e4:	e7b0      	b.n	800a348 <_printf_i+0xfc>
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	f043 0320 	orr.w	r3, r3, #32
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	2378      	movs	r3, #120	; 0x78
 800a3f0:	4828      	ldr	r0, [pc, #160]	; (800a494 <_printf_i+0x248>)
 800a3f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3f6:	e7e3      	b.n	800a3c0 <_printf_i+0x174>
 800a3f8:	0659      	lsls	r1, r3, #25
 800a3fa:	bf48      	it	mi
 800a3fc:	b2b6      	uxthmi	r6, r6
 800a3fe:	e7e6      	b.n	800a3ce <_printf_i+0x182>
 800a400:	4615      	mov	r5, r2
 800a402:	e7bb      	b.n	800a37c <_printf_i+0x130>
 800a404:	682b      	ldr	r3, [r5, #0]
 800a406:	6826      	ldr	r6, [r4, #0]
 800a408:	6961      	ldr	r1, [r4, #20]
 800a40a:	1d18      	adds	r0, r3, #4
 800a40c:	6028      	str	r0, [r5, #0]
 800a40e:	0635      	lsls	r5, r6, #24
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	d501      	bpl.n	800a418 <_printf_i+0x1cc>
 800a414:	6019      	str	r1, [r3, #0]
 800a416:	e002      	b.n	800a41e <_printf_i+0x1d2>
 800a418:	0670      	lsls	r0, r6, #25
 800a41a:	d5fb      	bpl.n	800a414 <_printf_i+0x1c8>
 800a41c:	8019      	strh	r1, [r3, #0]
 800a41e:	2300      	movs	r3, #0
 800a420:	6123      	str	r3, [r4, #16]
 800a422:	4615      	mov	r5, r2
 800a424:	e7ba      	b.n	800a39c <_printf_i+0x150>
 800a426:	682b      	ldr	r3, [r5, #0]
 800a428:	1d1a      	adds	r2, r3, #4
 800a42a:	602a      	str	r2, [r5, #0]
 800a42c:	681d      	ldr	r5, [r3, #0]
 800a42e:	6862      	ldr	r2, [r4, #4]
 800a430:	2100      	movs	r1, #0
 800a432:	4628      	mov	r0, r5
 800a434:	f7f5 fedc 	bl	80001f0 <memchr>
 800a438:	b108      	cbz	r0, 800a43e <_printf_i+0x1f2>
 800a43a:	1b40      	subs	r0, r0, r5
 800a43c:	6060      	str	r0, [r4, #4]
 800a43e:	6863      	ldr	r3, [r4, #4]
 800a440:	6123      	str	r3, [r4, #16]
 800a442:	2300      	movs	r3, #0
 800a444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a448:	e7a8      	b.n	800a39c <_printf_i+0x150>
 800a44a:	6923      	ldr	r3, [r4, #16]
 800a44c:	462a      	mov	r2, r5
 800a44e:	4649      	mov	r1, r9
 800a450:	4640      	mov	r0, r8
 800a452:	47d0      	blx	sl
 800a454:	3001      	adds	r0, #1
 800a456:	d0ab      	beq.n	800a3b0 <_printf_i+0x164>
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	079b      	lsls	r3, r3, #30
 800a45c:	d413      	bmi.n	800a486 <_printf_i+0x23a>
 800a45e:	68e0      	ldr	r0, [r4, #12]
 800a460:	9b03      	ldr	r3, [sp, #12]
 800a462:	4298      	cmp	r0, r3
 800a464:	bfb8      	it	lt
 800a466:	4618      	movlt	r0, r3
 800a468:	e7a4      	b.n	800a3b4 <_printf_i+0x168>
 800a46a:	2301      	movs	r3, #1
 800a46c:	4632      	mov	r2, r6
 800a46e:	4649      	mov	r1, r9
 800a470:	4640      	mov	r0, r8
 800a472:	47d0      	blx	sl
 800a474:	3001      	adds	r0, #1
 800a476:	d09b      	beq.n	800a3b0 <_printf_i+0x164>
 800a478:	3501      	adds	r5, #1
 800a47a:	68e3      	ldr	r3, [r4, #12]
 800a47c:	9903      	ldr	r1, [sp, #12]
 800a47e:	1a5b      	subs	r3, r3, r1
 800a480:	42ab      	cmp	r3, r5
 800a482:	dcf2      	bgt.n	800a46a <_printf_i+0x21e>
 800a484:	e7eb      	b.n	800a45e <_printf_i+0x212>
 800a486:	2500      	movs	r5, #0
 800a488:	f104 0619 	add.w	r6, r4, #25
 800a48c:	e7f5      	b.n	800a47a <_printf_i+0x22e>
 800a48e:	bf00      	nop
 800a490:	0800eb96 	.word	0x0800eb96
 800a494:	0800eba7 	.word	0x0800eba7

0800a498 <_puts_r>:
 800a498:	b570      	push	{r4, r5, r6, lr}
 800a49a:	460e      	mov	r6, r1
 800a49c:	4605      	mov	r5, r0
 800a49e:	b118      	cbz	r0, 800a4a8 <_puts_r+0x10>
 800a4a0:	6983      	ldr	r3, [r0, #24]
 800a4a2:	b90b      	cbnz	r3, 800a4a8 <_puts_r+0x10>
 800a4a4:	f001 f8ec 	bl	800b680 <__sinit>
 800a4a8:	69ab      	ldr	r3, [r5, #24]
 800a4aa:	68ac      	ldr	r4, [r5, #8]
 800a4ac:	b913      	cbnz	r3, 800a4b4 <_puts_r+0x1c>
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	f001 f8e6 	bl	800b680 <__sinit>
 800a4b4:	4b2c      	ldr	r3, [pc, #176]	; (800a568 <_puts_r+0xd0>)
 800a4b6:	429c      	cmp	r4, r3
 800a4b8:	d120      	bne.n	800a4fc <_puts_r+0x64>
 800a4ba:	686c      	ldr	r4, [r5, #4]
 800a4bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4be:	07db      	lsls	r3, r3, #31
 800a4c0:	d405      	bmi.n	800a4ce <_puts_r+0x36>
 800a4c2:	89a3      	ldrh	r3, [r4, #12]
 800a4c4:	0598      	lsls	r0, r3, #22
 800a4c6:	d402      	bmi.n	800a4ce <_puts_r+0x36>
 800a4c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ca:	f001 f97c 	bl	800b7c6 <__retarget_lock_acquire_recursive>
 800a4ce:	89a3      	ldrh	r3, [r4, #12]
 800a4d0:	0719      	lsls	r1, r3, #28
 800a4d2:	d51d      	bpl.n	800a510 <_puts_r+0x78>
 800a4d4:	6923      	ldr	r3, [r4, #16]
 800a4d6:	b1db      	cbz	r3, 800a510 <_puts_r+0x78>
 800a4d8:	3e01      	subs	r6, #1
 800a4da:	68a3      	ldr	r3, [r4, #8]
 800a4dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	60a3      	str	r3, [r4, #8]
 800a4e4:	bb39      	cbnz	r1, 800a536 <_puts_r+0x9e>
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	da38      	bge.n	800a55c <_puts_r+0xc4>
 800a4ea:	4622      	mov	r2, r4
 800a4ec:	210a      	movs	r1, #10
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	f000 f870 	bl	800a5d4 <__swbuf_r>
 800a4f4:	3001      	adds	r0, #1
 800a4f6:	d011      	beq.n	800a51c <_puts_r+0x84>
 800a4f8:	250a      	movs	r5, #10
 800a4fa:	e011      	b.n	800a520 <_puts_r+0x88>
 800a4fc:	4b1b      	ldr	r3, [pc, #108]	; (800a56c <_puts_r+0xd4>)
 800a4fe:	429c      	cmp	r4, r3
 800a500:	d101      	bne.n	800a506 <_puts_r+0x6e>
 800a502:	68ac      	ldr	r4, [r5, #8]
 800a504:	e7da      	b.n	800a4bc <_puts_r+0x24>
 800a506:	4b1a      	ldr	r3, [pc, #104]	; (800a570 <_puts_r+0xd8>)
 800a508:	429c      	cmp	r4, r3
 800a50a:	bf08      	it	eq
 800a50c:	68ec      	ldreq	r4, [r5, #12]
 800a50e:	e7d5      	b.n	800a4bc <_puts_r+0x24>
 800a510:	4621      	mov	r1, r4
 800a512:	4628      	mov	r0, r5
 800a514:	f000 f8b0 	bl	800a678 <__swsetup_r>
 800a518:	2800      	cmp	r0, #0
 800a51a:	d0dd      	beq.n	800a4d8 <_puts_r+0x40>
 800a51c:	f04f 35ff 	mov.w	r5, #4294967295
 800a520:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a522:	07da      	lsls	r2, r3, #31
 800a524:	d405      	bmi.n	800a532 <_puts_r+0x9a>
 800a526:	89a3      	ldrh	r3, [r4, #12]
 800a528:	059b      	lsls	r3, r3, #22
 800a52a:	d402      	bmi.n	800a532 <_puts_r+0x9a>
 800a52c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a52e:	f001 f94b 	bl	800b7c8 <__retarget_lock_release_recursive>
 800a532:	4628      	mov	r0, r5
 800a534:	bd70      	pop	{r4, r5, r6, pc}
 800a536:	2b00      	cmp	r3, #0
 800a538:	da04      	bge.n	800a544 <_puts_r+0xac>
 800a53a:	69a2      	ldr	r2, [r4, #24]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	dc06      	bgt.n	800a54e <_puts_r+0xb6>
 800a540:	290a      	cmp	r1, #10
 800a542:	d004      	beq.n	800a54e <_puts_r+0xb6>
 800a544:	6823      	ldr	r3, [r4, #0]
 800a546:	1c5a      	adds	r2, r3, #1
 800a548:	6022      	str	r2, [r4, #0]
 800a54a:	7019      	strb	r1, [r3, #0]
 800a54c:	e7c5      	b.n	800a4da <_puts_r+0x42>
 800a54e:	4622      	mov	r2, r4
 800a550:	4628      	mov	r0, r5
 800a552:	f000 f83f 	bl	800a5d4 <__swbuf_r>
 800a556:	3001      	adds	r0, #1
 800a558:	d1bf      	bne.n	800a4da <_puts_r+0x42>
 800a55a:	e7df      	b.n	800a51c <_puts_r+0x84>
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	250a      	movs	r5, #10
 800a560:	1c5a      	adds	r2, r3, #1
 800a562:	6022      	str	r2, [r4, #0]
 800a564:	701d      	strb	r5, [r3, #0]
 800a566:	e7db      	b.n	800a520 <_puts_r+0x88>
 800a568:	0800ec68 	.word	0x0800ec68
 800a56c:	0800ec88 	.word	0x0800ec88
 800a570:	0800ec48 	.word	0x0800ec48

0800a574 <puts>:
 800a574:	4b02      	ldr	r3, [pc, #8]	; (800a580 <puts+0xc>)
 800a576:	4601      	mov	r1, r0
 800a578:	6818      	ldr	r0, [r3, #0]
 800a57a:	f7ff bf8d 	b.w	800a498 <_puts_r>
 800a57e:	bf00      	nop
 800a580:	200002ec 	.word	0x200002ec

0800a584 <siprintf>:
 800a584:	b40e      	push	{r1, r2, r3}
 800a586:	b500      	push	{lr}
 800a588:	b09c      	sub	sp, #112	; 0x70
 800a58a:	ab1d      	add	r3, sp, #116	; 0x74
 800a58c:	9002      	str	r0, [sp, #8]
 800a58e:	9006      	str	r0, [sp, #24]
 800a590:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a594:	4809      	ldr	r0, [pc, #36]	; (800a5bc <siprintf+0x38>)
 800a596:	9107      	str	r1, [sp, #28]
 800a598:	9104      	str	r1, [sp, #16]
 800a59a:	4909      	ldr	r1, [pc, #36]	; (800a5c0 <siprintf+0x3c>)
 800a59c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5a0:	9105      	str	r1, [sp, #20]
 800a5a2:	6800      	ldr	r0, [r0, #0]
 800a5a4:	9301      	str	r3, [sp, #4]
 800a5a6:	a902      	add	r1, sp, #8
 800a5a8:	f001 fe52 	bl	800c250 <_svfiprintf_r>
 800a5ac:	9b02      	ldr	r3, [sp, #8]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	701a      	strb	r2, [r3, #0]
 800a5b2:	b01c      	add	sp, #112	; 0x70
 800a5b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5b8:	b003      	add	sp, #12
 800a5ba:	4770      	bx	lr
 800a5bc:	200002ec 	.word	0x200002ec
 800a5c0:	ffff0208 	.word	0xffff0208

0800a5c4 <strcpy>:
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5ca:	f803 2b01 	strb.w	r2, [r3], #1
 800a5ce:	2a00      	cmp	r2, #0
 800a5d0:	d1f9      	bne.n	800a5c6 <strcpy+0x2>
 800a5d2:	4770      	bx	lr

0800a5d4 <__swbuf_r>:
 800a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d6:	460e      	mov	r6, r1
 800a5d8:	4614      	mov	r4, r2
 800a5da:	4605      	mov	r5, r0
 800a5dc:	b118      	cbz	r0, 800a5e6 <__swbuf_r+0x12>
 800a5de:	6983      	ldr	r3, [r0, #24]
 800a5e0:	b90b      	cbnz	r3, 800a5e6 <__swbuf_r+0x12>
 800a5e2:	f001 f84d 	bl	800b680 <__sinit>
 800a5e6:	4b21      	ldr	r3, [pc, #132]	; (800a66c <__swbuf_r+0x98>)
 800a5e8:	429c      	cmp	r4, r3
 800a5ea:	d12b      	bne.n	800a644 <__swbuf_r+0x70>
 800a5ec:	686c      	ldr	r4, [r5, #4]
 800a5ee:	69a3      	ldr	r3, [r4, #24]
 800a5f0:	60a3      	str	r3, [r4, #8]
 800a5f2:	89a3      	ldrh	r3, [r4, #12]
 800a5f4:	071a      	lsls	r2, r3, #28
 800a5f6:	d52f      	bpl.n	800a658 <__swbuf_r+0x84>
 800a5f8:	6923      	ldr	r3, [r4, #16]
 800a5fa:	b36b      	cbz	r3, 800a658 <__swbuf_r+0x84>
 800a5fc:	6923      	ldr	r3, [r4, #16]
 800a5fe:	6820      	ldr	r0, [r4, #0]
 800a600:	1ac0      	subs	r0, r0, r3
 800a602:	6963      	ldr	r3, [r4, #20]
 800a604:	b2f6      	uxtb	r6, r6
 800a606:	4283      	cmp	r3, r0
 800a608:	4637      	mov	r7, r6
 800a60a:	dc04      	bgt.n	800a616 <__swbuf_r+0x42>
 800a60c:	4621      	mov	r1, r4
 800a60e:	4628      	mov	r0, r5
 800a610:	f000 ffa2 	bl	800b558 <_fflush_r>
 800a614:	bb30      	cbnz	r0, 800a664 <__swbuf_r+0x90>
 800a616:	68a3      	ldr	r3, [r4, #8]
 800a618:	3b01      	subs	r3, #1
 800a61a:	60a3      	str	r3, [r4, #8]
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	1c5a      	adds	r2, r3, #1
 800a620:	6022      	str	r2, [r4, #0]
 800a622:	701e      	strb	r6, [r3, #0]
 800a624:	6963      	ldr	r3, [r4, #20]
 800a626:	3001      	adds	r0, #1
 800a628:	4283      	cmp	r3, r0
 800a62a:	d004      	beq.n	800a636 <__swbuf_r+0x62>
 800a62c:	89a3      	ldrh	r3, [r4, #12]
 800a62e:	07db      	lsls	r3, r3, #31
 800a630:	d506      	bpl.n	800a640 <__swbuf_r+0x6c>
 800a632:	2e0a      	cmp	r6, #10
 800a634:	d104      	bne.n	800a640 <__swbuf_r+0x6c>
 800a636:	4621      	mov	r1, r4
 800a638:	4628      	mov	r0, r5
 800a63a:	f000 ff8d 	bl	800b558 <_fflush_r>
 800a63e:	b988      	cbnz	r0, 800a664 <__swbuf_r+0x90>
 800a640:	4638      	mov	r0, r7
 800a642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a644:	4b0a      	ldr	r3, [pc, #40]	; (800a670 <__swbuf_r+0x9c>)
 800a646:	429c      	cmp	r4, r3
 800a648:	d101      	bne.n	800a64e <__swbuf_r+0x7a>
 800a64a:	68ac      	ldr	r4, [r5, #8]
 800a64c:	e7cf      	b.n	800a5ee <__swbuf_r+0x1a>
 800a64e:	4b09      	ldr	r3, [pc, #36]	; (800a674 <__swbuf_r+0xa0>)
 800a650:	429c      	cmp	r4, r3
 800a652:	bf08      	it	eq
 800a654:	68ec      	ldreq	r4, [r5, #12]
 800a656:	e7ca      	b.n	800a5ee <__swbuf_r+0x1a>
 800a658:	4621      	mov	r1, r4
 800a65a:	4628      	mov	r0, r5
 800a65c:	f000 f80c 	bl	800a678 <__swsetup_r>
 800a660:	2800      	cmp	r0, #0
 800a662:	d0cb      	beq.n	800a5fc <__swbuf_r+0x28>
 800a664:	f04f 37ff 	mov.w	r7, #4294967295
 800a668:	e7ea      	b.n	800a640 <__swbuf_r+0x6c>
 800a66a:	bf00      	nop
 800a66c:	0800ec68 	.word	0x0800ec68
 800a670:	0800ec88 	.word	0x0800ec88
 800a674:	0800ec48 	.word	0x0800ec48

0800a678 <__swsetup_r>:
 800a678:	4b32      	ldr	r3, [pc, #200]	; (800a744 <__swsetup_r+0xcc>)
 800a67a:	b570      	push	{r4, r5, r6, lr}
 800a67c:	681d      	ldr	r5, [r3, #0]
 800a67e:	4606      	mov	r6, r0
 800a680:	460c      	mov	r4, r1
 800a682:	b125      	cbz	r5, 800a68e <__swsetup_r+0x16>
 800a684:	69ab      	ldr	r3, [r5, #24]
 800a686:	b913      	cbnz	r3, 800a68e <__swsetup_r+0x16>
 800a688:	4628      	mov	r0, r5
 800a68a:	f000 fff9 	bl	800b680 <__sinit>
 800a68e:	4b2e      	ldr	r3, [pc, #184]	; (800a748 <__swsetup_r+0xd0>)
 800a690:	429c      	cmp	r4, r3
 800a692:	d10f      	bne.n	800a6b4 <__swsetup_r+0x3c>
 800a694:	686c      	ldr	r4, [r5, #4]
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a69c:	0719      	lsls	r1, r3, #28
 800a69e:	d42c      	bmi.n	800a6fa <__swsetup_r+0x82>
 800a6a0:	06dd      	lsls	r5, r3, #27
 800a6a2:	d411      	bmi.n	800a6c8 <__swsetup_r+0x50>
 800a6a4:	2309      	movs	r3, #9
 800a6a6:	6033      	str	r3, [r6, #0]
 800a6a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6ac:	81a3      	strh	r3, [r4, #12]
 800a6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b2:	e03e      	b.n	800a732 <__swsetup_r+0xba>
 800a6b4:	4b25      	ldr	r3, [pc, #148]	; (800a74c <__swsetup_r+0xd4>)
 800a6b6:	429c      	cmp	r4, r3
 800a6b8:	d101      	bne.n	800a6be <__swsetup_r+0x46>
 800a6ba:	68ac      	ldr	r4, [r5, #8]
 800a6bc:	e7eb      	b.n	800a696 <__swsetup_r+0x1e>
 800a6be:	4b24      	ldr	r3, [pc, #144]	; (800a750 <__swsetup_r+0xd8>)
 800a6c0:	429c      	cmp	r4, r3
 800a6c2:	bf08      	it	eq
 800a6c4:	68ec      	ldreq	r4, [r5, #12]
 800a6c6:	e7e6      	b.n	800a696 <__swsetup_r+0x1e>
 800a6c8:	0758      	lsls	r0, r3, #29
 800a6ca:	d512      	bpl.n	800a6f2 <__swsetup_r+0x7a>
 800a6cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6ce:	b141      	cbz	r1, 800a6e2 <__swsetup_r+0x6a>
 800a6d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6d4:	4299      	cmp	r1, r3
 800a6d6:	d002      	beq.n	800a6de <__swsetup_r+0x66>
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f001 fc7d 	bl	800bfd8 <_free_r>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	6363      	str	r3, [r4, #52]	; 0x34
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6e8:	81a3      	strh	r3, [r4, #12]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	6063      	str	r3, [r4, #4]
 800a6ee:	6923      	ldr	r3, [r4, #16]
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	f043 0308 	orr.w	r3, r3, #8
 800a6f8:	81a3      	strh	r3, [r4, #12]
 800a6fa:	6923      	ldr	r3, [r4, #16]
 800a6fc:	b94b      	cbnz	r3, 800a712 <__swsetup_r+0x9a>
 800a6fe:	89a3      	ldrh	r3, [r4, #12]
 800a700:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a708:	d003      	beq.n	800a712 <__swsetup_r+0x9a>
 800a70a:	4621      	mov	r1, r4
 800a70c:	4630      	mov	r0, r6
 800a70e:	f001 f881 	bl	800b814 <__smakebuf_r>
 800a712:	89a0      	ldrh	r0, [r4, #12]
 800a714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a718:	f010 0301 	ands.w	r3, r0, #1
 800a71c:	d00a      	beq.n	800a734 <__swsetup_r+0xbc>
 800a71e:	2300      	movs	r3, #0
 800a720:	60a3      	str	r3, [r4, #8]
 800a722:	6963      	ldr	r3, [r4, #20]
 800a724:	425b      	negs	r3, r3
 800a726:	61a3      	str	r3, [r4, #24]
 800a728:	6923      	ldr	r3, [r4, #16]
 800a72a:	b943      	cbnz	r3, 800a73e <__swsetup_r+0xc6>
 800a72c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a730:	d1ba      	bne.n	800a6a8 <__swsetup_r+0x30>
 800a732:	bd70      	pop	{r4, r5, r6, pc}
 800a734:	0781      	lsls	r1, r0, #30
 800a736:	bf58      	it	pl
 800a738:	6963      	ldrpl	r3, [r4, #20]
 800a73a:	60a3      	str	r3, [r4, #8]
 800a73c:	e7f4      	b.n	800a728 <__swsetup_r+0xb0>
 800a73e:	2000      	movs	r0, #0
 800a740:	e7f7      	b.n	800a732 <__swsetup_r+0xba>
 800a742:	bf00      	nop
 800a744:	200002ec 	.word	0x200002ec
 800a748:	0800ec68 	.word	0x0800ec68
 800a74c:	0800ec88 	.word	0x0800ec88
 800a750:	0800ec48 	.word	0x0800ec48

0800a754 <quorem>:
 800a754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a758:	6903      	ldr	r3, [r0, #16]
 800a75a:	690c      	ldr	r4, [r1, #16]
 800a75c:	42a3      	cmp	r3, r4
 800a75e:	4607      	mov	r7, r0
 800a760:	f2c0 8081 	blt.w	800a866 <quorem+0x112>
 800a764:	3c01      	subs	r4, #1
 800a766:	f101 0814 	add.w	r8, r1, #20
 800a76a:	f100 0514 	add.w	r5, r0, #20
 800a76e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a772:	9301      	str	r3, [sp, #4]
 800a774:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a778:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a77c:	3301      	adds	r3, #1
 800a77e:	429a      	cmp	r2, r3
 800a780:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a784:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a788:	fbb2 f6f3 	udiv	r6, r2, r3
 800a78c:	d331      	bcc.n	800a7f2 <quorem+0x9e>
 800a78e:	f04f 0e00 	mov.w	lr, #0
 800a792:	4640      	mov	r0, r8
 800a794:	46ac      	mov	ip, r5
 800a796:	46f2      	mov	sl, lr
 800a798:	f850 2b04 	ldr.w	r2, [r0], #4
 800a79c:	b293      	uxth	r3, r2
 800a79e:	fb06 e303 	mla	r3, r6, r3, lr
 800a7a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	ebaa 0303 	sub.w	r3, sl, r3
 800a7ac:	f8dc a000 	ldr.w	sl, [ip]
 800a7b0:	0c12      	lsrs	r2, r2, #16
 800a7b2:	fa13 f38a 	uxtah	r3, r3, sl
 800a7b6:	fb06 e202 	mla	r2, r6, r2, lr
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	9b00      	ldr	r3, [sp, #0]
 800a7be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7c2:	b292      	uxth	r2, r2
 800a7c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a7c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7cc:	f8bd 3000 	ldrh.w	r3, [sp]
 800a7d0:	4581      	cmp	r9, r0
 800a7d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7d6:	f84c 3b04 	str.w	r3, [ip], #4
 800a7da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a7de:	d2db      	bcs.n	800a798 <quorem+0x44>
 800a7e0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a7e4:	b92b      	cbnz	r3, 800a7f2 <quorem+0x9e>
 800a7e6:	9b01      	ldr	r3, [sp, #4]
 800a7e8:	3b04      	subs	r3, #4
 800a7ea:	429d      	cmp	r5, r3
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	d32e      	bcc.n	800a84e <quorem+0xfa>
 800a7f0:	613c      	str	r4, [r7, #16]
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	f001 fad8 	bl	800bda8 <__mcmp>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	db24      	blt.n	800a846 <quorem+0xf2>
 800a7fc:	3601      	adds	r6, #1
 800a7fe:	4628      	mov	r0, r5
 800a800:	f04f 0c00 	mov.w	ip, #0
 800a804:	f858 2b04 	ldr.w	r2, [r8], #4
 800a808:	f8d0 e000 	ldr.w	lr, [r0]
 800a80c:	b293      	uxth	r3, r2
 800a80e:	ebac 0303 	sub.w	r3, ip, r3
 800a812:	0c12      	lsrs	r2, r2, #16
 800a814:	fa13 f38e 	uxtah	r3, r3, lr
 800a818:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a81c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a820:	b29b      	uxth	r3, r3
 800a822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a826:	45c1      	cmp	r9, r8
 800a828:	f840 3b04 	str.w	r3, [r0], #4
 800a82c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a830:	d2e8      	bcs.n	800a804 <quorem+0xb0>
 800a832:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a83a:	b922      	cbnz	r2, 800a846 <quorem+0xf2>
 800a83c:	3b04      	subs	r3, #4
 800a83e:	429d      	cmp	r5, r3
 800a840:	461a      	mov	r2, r3
 800a842:	d30a      	bcc.n	800a85a <quorem+0x106>
 800a844:	613c      	str	r4, [r7, #16]
 800a846:	4630      	mov	r0, r6
 800a848:	b003      	add	sp, #12
 800a84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a84e:	6812      	ldr	r2, [r2, #0]
 800a850:	3b04      	subs	r3, #4
 800a852:	2a00      	cmp	r2, #0
 800a854:	d1cc      	bne.n	800a7f0 <quorem+0x9c>
 800a856:	3c01      	subs	r4, #1
 800a858:	e7c7      	b.n	800a7ea <quorem+0x96>
 800a85a:	6812      	ldr	r2, [r2, #0]
 800a85c:	3b04      	subs	r3, #4
 800a85e:	2a00      	cmp	r2, #0
 800a860:	d1f0      	bne.n	800a844 <quorem+0xf0>
 800a862:	3c01      	subs	r4, #1
 800a864:	e7eb      	b.n	800a83e <quorem+0xea>
 800a866:	2000      	movs	r0, #0
 800a868:	e7ee      	b.n	800a848 <quorem+0xf4>
 800a86a:	0000      	movs	r0, r0
 800a86c:	0000      	movs	r0, r0
	...

0800a870 <_dtoa_r>:
 800a870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a874:	ed2d 8b04 	vpush	{d8-d9}
 800a878:	ec57 6b10 	vmov	r6, r7, d0
 800a87c:	b093      	sub	sp, #76	; 0x4c
 800a87e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a880:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a884:	9106      	str	r1, [sp, #24]
 800a886:	ee10 aa10 	vmov	sl, s0
 800a88a:	4604      	mov	r4, r0
 800a88c:	9209      	str	r2, [sp, #36]	; 0x24
 800a88e:	930c      	str	r3, [sp, #48]	; 0x30
 800a890:	46bb      	mov	fp, r7
 800a892:	b975      	cbnz	r5, 800a8b2 <_dtoa_r+0x42>
 800a894:	2010      	movs	r0, #16
 800a896:	f000 fffd 	bl	800b894 <malloc>
 800a89a:	4602      	mov	r2, r0
 800a89c:	6260      	str	r0, [r4, #36]	; 0x24
 800a89e:	b920      	cbnz	r0, 800a8aa <_dtoa_r+0x3a>
 800a8a0:	4ba7      	ldr	r3, [pc, #668]	; (800ab40 <_dtoa_r+0x2d0>)
 800a8a2:	21ea      	movs	r1, #234	; 0xea
 800a8a4:	48a7      	ldr	r0, [pc, #668]	; (800ab44 <_dtoa_r+0x2d4>)
 800a8a6:	f001 fe39 	bl	800c51c <__assert_func>
 800a8aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8ae:	6005      	str	r5, [r0, #0]
 800a8b0:	60c5      	str	r5, [r0, #12]
 800a8b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8b4:	6819      	ldr	r1, [r3, #0]
 800a8b6:	b151      	cbz	r1, 800a8ce <_dtoa_r+0x5e>
 800a8b8:	685a      	ldr	r2, [r3, #4]
 800a8ba:	604a      	str	r2, [r1, #4]
 800a8bc:	2301      	movs	r3, #1
 800a8be:	4093      	lsls	r3, r2
 800a8c0:	608b      	str	r3, [r1, #8]
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f001 f82e 	bl	800b924 <_Bfree>
 800a8c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	601a      	str	r2, [r3, #0]
 800a8ce:	1e3b      	subs	r3, r7, #0
 800a8d0:	bfaa      	itet	ge
 800a8d2:	2300      	movge	r3, #0
 800a8d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a8d8:	f8c8 3000 	strge.w	r3, [r8]
 800a8dc:	4b9a      	ldr	r3, [pc, #616]	; (800ab48 <_dtoa_r+0x2d8>)
 800a8de:	bfbc      	itt	lt
 800a8e0:	2201      	movlt	r2, #1
 800a8e2:	f8c8 2000 	strlt.w	r2, [r8]
 800a8e6:	ea33 030b 	bics.w	r3, r3, fp
 800a8ea:	d11b      	bne.n	800a924 <_dtoa_r+0xb4>
 800a8ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8ee:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8f2:	6013      	str	r3, [r2, #0]
 800a8f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8f8:	4333      	orrs	r3, r6
 800a8fa:	f000 8592 	beq.w	800b422 <_dtoa_r+0xbb2>
 800a8fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a900:	b963      	cbnz	r3, 800a91c <_dtoa_r+0xac>
 800a902:	4b92      	ldr	r3, [pc, #584]	; (800ab4c <_dtoa_r+0x2dc>)
 800a904:	e022      	b.n	800a94c <_dtoa_r+0xdc>
 800a906:	4b92      	ldr	r3, [pc, #584]	; (800ab50 <_dtoa_r+0x2e0>)
 800a908:	9301      	str	r3, [sp, #4]
 800a90a:	3308      	adds	r3, #8
 800a90c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a90e:	6013      	str	r3, [r2, #0]
 800a910:	9801      	ldr	r0, [sp, #4]
 800a912:	b013      	add	sp, #76	; 0x4c
 800a914:	ecbd 8b04 	vpop	{d8-d9}
 800a918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a91c:	4b8b      	ldr	r3, [pc, #556]	; (800ab4c <_dtoa_r+0x2dc>)
 800a91e:	9301      	str	r3, [sp, #4]
 800a920:	3303      	adds	r3, #3
 800a922:	e7f3      	b.n	800a90c <_dtoa_r+0x9c>
 800a924:	2200      	movs	r2, #0
 800a926:	2300      	movs	r3, #0
 800a928:	4650      	mov	r0, sl
 800a92a:	4659      	mov	r1, fp
 800a92c:	f7f6 f8d4 	bl	8000ad8 <__aeabi_dcmpeq>
 800a930:	ec4b ab19 	vmov	d9, sl, fp
 800a934:	4680      	mov	r8, r0
 800a936:	b158      	cbz	r0, 800a950 <_dtoa_r+0xe0>
 800a938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a93a:	2301      	movs	r3, #1
 800a93c:	6013      	str	r3, [r2, #0]
 800a93e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a940:	2b00      	cmp	r3, #0
 800a942:	f000 856b 	beq.w	800b41c <_dtoa_r+0xbac>
 800a946:	4883      	ldr	r0, [pc, #524]	; (800ab54 <_dtoa_r+0x2e4>)
 800a948:	6018      	str	r0, [r3, #0]
 800a94a:	1e43      	subs	r3, r0, #1
 800a94c:	9301      	str	r3, [sp, #4]
 800a94e:	e7df      	b.n	800a910 <_dtoa_r+0xa0>
 800a950:	ec4b ab10 	vmov	d0, sl, fp
 800a954:	aa10      	add	r2, sp, #64	; 0x40
 800a956:	a911      	add	r1, sp, #68	; 0x44
 800a958:	4620      	mov	r0, r4
 800a95a:	f001 facb 	bl	800bef4 <__d2b>
 800a95e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a962:	ee08 0a10 	vmov	s16, r0
 800a966:	2d00      	cmp	r5, #0
 800a968:	f000 8084 	beq.w	800aa74 <_dtoa_r+0x204>
 800a96c:	ee19 3a90 	vmov	r3, s19
 800a970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a974:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a978:	4656      	mov	r6, sl
 800a97a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a97e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a982:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a986:	4b74      	ldr	r3, [pc, #464]	; (800ab58 <_dtoa_r+0x2e8>)
 800a988:	2200      	movs	r2, #0
 800a98a:	4630      	mov	r0, r6
 800a98c:	4639      	mov	r1, r7
 800a98e:	f7f5 fc83 	bl	8000298 <__aeabi_dsub>
 800a992:	a365      	add	r3, pc, #404	; (adr r3, 800ab28 <_dtoa_r+0x2b8>)
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	f7f5 fe36 	bl	8000608 <__aeabi_dmul>
 800a99c:	a364      	add	r3, pc, #400	; (adr r3, 800ab30 <_dtoa_r+0x2c0>)
 800a99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a2:	f7f5 fc7b 	bl	800029c <__adddf3>
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	4628      	mov	r0, r5
 800a9aa:	460f      	mov	r7, r1
 800a9ac:	f7f5 fdc2 	bl	8000534 <__aeabi_i2d>
 800a9b0:	a361      	add	r3, pc, #388	; (adr r3, 800ab38 <_dtoa_r+0x2c8>)
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	f7f5 fe27 	bl	8000608 <__aeabi_dmul>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	4630      	mov	r0, r6
 800a9c0:	4639      	mov	r1, r7
 800a9c2:	f7f5 fc6b 	bl	800029c <__adddf3>
 800a9c6:	4606      	mov	r6, r0
 800a9c8:	460f      	mov	r7, r1
 800a9ca:	f7f6 f8cd 	bl	8000b68 <__aeabi_d2iz>
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	9000      	str	r0, [sp, #0]
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	4639      	mov	r1, r7
 800a9d8:	f7f6 f888 	bl	8000aec <__aeabi_dcmplt>
 800a9dc:	b150      	cbz	r0, 800a9f4 <_dtoa_r+0x184>
 800a9de:	9800      	ldr	r0, [sp, #0]
 800a9e0:	f7f5 fda8 	bl	8000534 <__aeabi_i2d>
 800a9e4:	4632      	mov	r2, r6
 800a9e6:	463b      	mov	r3, r7
 800a9e8:	f7f6 f876 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9ec:	b910      	cbnz	r0, 800a9f4 <_dtoa_r+0x184>
 800a9ee:	9b00      	ldr	r3, [sp, #0]
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	9b00      	ldr	r3, [sp, #0]
 800a9f6:	2b16      	cmp	r3, #22
 800a9f8:	d85a      	bhi.n	800aab0 <_dtoa_r+0x240>
 800a9fa:	9a00      	ldr	r2, [sp, #0]
 800a9fc:	4b57      	ldr	r3, [pc, #348]	; (800ab5c <_dtoa_r+0x2ec>)
 800a9fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa06:	ec51 0b19 	vmov	r0, r1, d9
 800aa0a:	f7f6 f86f 	bl	8000aec <__aeabi_dcmplt>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d050      	beq.n	800aab4 <_dtoa_r+0x244>
 800aa12:	9b00      	ldr	r3, [sp, #0]
 800aa14:	3b01      	subs	r3, #1
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	2300      	movs	r3, #0
 800aa1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa1e:	1b5d      	subs	r5, r3, r5
 800aa20:	1e6b      	subs	r3, r5, #1
 800aa22:	9305      	str	r3, [sp, #20]
 800aa24:	bf45      	ittet	mi
 800aa26:	f1c5 0301 	rsbmi	r3, r5, #1
 800aa2a:	9304      	strmi	r3, [sp, #16]
 800aa2c:	2300      	movpl	r3, #0
 800aa2e:	2300      	movmi	r3, #0
 800aa30:	bf4c      	ite	mi
 800aa32:	9305      	strmi	r3, [sp, #20]
 800aa34:	9304      	strpl	r3, [sp, #16]
 800aa36:	9b00      	ldr	r3, [sp, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	db3d      	blt.n	800aab8 <_dtoa_r+0x248>
 800aa3c:	9b05      	ldr	r3, [sp, #20]
 800aa3e:	9a00      	ldr	r2, [sp, #0]
 800aa40:	920a      	str	r2, [sp, #40]	; 0x28
 800aa42:	4413      	add	r3, r2
 800aa44:	9305      	str	r3, [sp, #20]
 800aa46:	2300      	movs	r3, #0
 800aa48:	9307      	str	r3, [sp, #28]
 800aa4a:	9b06      	ldr	r3, [sp, #24]
 800aa4c:	2b09      	cmp	r3, #9
 800aa4e:	f200 8089 	bhi.w	800ab64 <_dtoa_r+0x2f4>
 800aa52:	2b05      	cmp	r3, #5
 800aa54:	bfc4      	itt	gt
 800aa56:	3b04      	subgt	r3, #4
 800aa58:	9306      	strgt	r3, [sp, #24]
 800aa5a:	9b06      	ldr	r3, [sp, #24]
 800aa5c:	f1a3 0302 	sub.w	r3, r3, #2
 800aa60:	bfcc      	ite	gt
 800aa62:	2500      	movgt	r5, #0
 800aa64:	2501      	movle	r5, #1
 800aa66:	2b03      	cmp	r3, #3
 800aa68:	f200 8087 	bhi.w	800ab7a <_dtoa_r+0x30a>
 800aa6c:	e8df f003 	tbb	[pc, r3]
 800aa70:	59383a2d 	.word	0x59383a2d
 800aa74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aa78:	441d      	add	r5, r3
 800aa7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aa7e:	2b20      	cmp	r3, #32
 800aa80:	bfc1      	itttt	gt
 800aa82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aa86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aa8a:	fa0b f303 	lslgt.w	r3, fp, r3
 800aa8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aa92:	bfda      	itte	le
 800aa94:	f1c3 0320 	rsble	r3, r3, #32
 800aa98:	fa06 f003 	lslle.w	r0, r6, r3
 800aa9c:	4318      	orrgt	r0, r3
 800aa9e:	f7f5 fd39 	bl	8000514 <__aeabi_ui2d>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	4606      	mov	r6, r0
 800aaa6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aaaa:	3d01      	subs	r5, #1
 800aaac:	930e      	str	r3, [sp, #56]	; 0x38
 800aaae:	e76a      	b.n	800a986 <_dtoa_r+0x116>
 800aab0:	2301      	movs	r3, #1
 800aab2:	e7b2      	b.n	800aa1a <_dtoa_r+0x1aa>
 800aab4:	900b      	str	r0, [sp, #44]	; 0x2c
 800aab6:	e7b1      	b.n	800aa1c <_dtoa_r+0x1ac>
 800aab8:	9b04      	ldr	r3, [sp, #16]
 800aaba:	9a00      	ldr	r2, [sp, #0]
 800aabc:	1a9b      	subs	r3, r3, r2
 800aabe:	9304      	str	r3, [sp, #16]
 800aac0:	4253      	negs	r3, r2
 800aac2:	9307      	str	r3, [sp, #28]
 800aac4:	2300      	movs	r3, #0
 800aac6:	930a      	str	r3, [sp, #40]	; 0x28
 800aac8:	e7bf      	b.n	800aa4a <_dtoa_r+0x1da>
 800aaca:	2300      	movs	r3, #0
 800aacc:	9308      	str	r3, [sp, #32]
 800aace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	dc55      	bgt.n	800ab80 <_dtoa_r+0x310>
 800aad4:	2301      	movs	r3, #1
 800aad6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aada:	461a      	mov	r2, r3
 800aadc:	9209      	str	r2, [sp, #36]	; 0x24
 800aade:	e00c      	b.n	800aafa <_dtoa_r+0x28a>
 800aae0:	2301      	movs	r3, #1
 800aae2:	e7f3      	b.n	800aacc <_dtoa_r+0x25c>
 800aae4:	2300      	movs	r3, #0
 800aae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aae8:	9308      	str	r3, [sp, #32]
 800aaea:	9b00      	ldr	r3, [sp, #0]
 800aaec:	4413      	add	r3, r2
 800aaee:	9302      	str	r3, [sp, #8]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	9303      	str	r3, [sp, #12]
 800aaf6:	bfb8      	it	lt
 800aaf8:	2301      	movlt	r3, #1
 800aafa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aafc:	2200      	movs	r2, #0
 800aafe:	6042      	str	r2, [r0, #4]
 800ab00:	2204      	movs	r2, #4
 800ab02:	f102 0614 	add.w	r6, r2, #20
 800ab06:	429e      	cmp	r6, r3
 800ab08:	6841      	ldr	r1, [r0, #4]
 800ab0a:	d93d      	bls.n	800ab88 <_dtoa_r+0x318>
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f000 fec9 	bl	800b8a4 <_Balloc>
 800ab12:	9001      	str	r0, [sp, #4]
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d13b      	bne.n	800ab90 <_dtoa_r+0x320>
 800ab18:	4b11      	ldr	r3, [pc, #68]	; (800ab60 <_dtoa_r+0x2f0>)
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ab20:	e6c0      	b.n	800a8a4 <_dtoa_r+0x34>
 800ab22:	2301      	movs	r3, #1
 800ab24:	e7df      	b.n	800aae6 <_dtoa_r+0x276>
 800ab26:	bf00      	nop
 800ab28:	636f4361 	.word	0x636f4361
 800ab2c:	3fd287a7 	.word	0x3fd287a7
 800ab30:	8b60c8b3 	.word	0x8b60c8b3
 800ab34:	3fc68a28 	.word	0x3fc68a28
 800ab38:	509f79fb 	.word	0x509f79fb
 800ab3c:	3fd34413 	.word	0x3fd34413
 800ab40:	0800ebc5 	.word	0x0800ebc5
 800ab44:	0800ebdc 	.word	0x0800ebdc
 800ab48:	7ff00000 	.word	0x7ff00000
 800ab4c:	0800ebc1 	.word	0x0800ebc1
 800ab50:	0800ebb8 	.word	0x0800ebb8
 800ab54:	0800eb95 	.word	0x0800eb95
 800ab58:	3ff80000 	.word	0x3ff80000
 800ab5c:	0800ed30 	.word	0x0800ed30
 800ab60:	0800ec37 	.word	0x0800ec37
 800ab64:	2501      	movs	r5, #1
 800ab66:	2300      	movs	r3, #0
 800ab68:	9306      	str	r3, [sp, #24]
 800ab6a:	9508      	str	r5, [sp, #32]
 800ab6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab74:	2200      	movs	r2, #0
 800ab76:	2312      	movs	r3, #18
 800ab78:	e7b0      	b.n	800aadc <_dtoa_r+0x26c>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	9308      	str	r3, [sp, #32]
 800ab7e:	e7f5      	b.n	800ab6c <_dtoa_r+0x2fc>
 800ab80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab86:	e7b8      	b.n	800aafa <_dtoa_r+0x28a>
 800ab88:	3101      	adds	r1, #1
 800ab8a:	6041      	str	r1, [r0, #4]
 800ab8c:	0052      	lsls	r2, r2, #1
 800ab8e:	e7b8      	b.n	800ab02 <_dtoa_r+0x292>
 800ab90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab92:	9a01      	ldr	r2, [sp, #4]
 800ab94:	601a      	str	r2, [r3, #0]
 800ab96:	9b03      	ldr	r3, [sp, #12]
 800ab98:	2b0e      	cmp	r3, #14
 800ab9a:	f200 809d 	bhi.w	800acd8 <_dtoa_r+0x468>
 800ab9e:	2d00      	cmp	r5, #0
 800aba0:	f000 809a 	beq.w	800acd8 <_dtoa_r+0x468>
 800aba4:	9b00      	ldr	r3, [sp, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	dd32      	ble.n	800ac10 <_dtoa_r+0x3a0>
 800abaa:	4ab7      	ldr	r2, [pc, #732]	; (800ae88 <_dtoa_r+0x618>)
 800abac:	f003 030f 	and.w	r3, r3, #15
 800abb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800abb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abb8:	9b00      	ldr	r3, [sp, #0]
 800abba:	05d8      	lsls	r0, r3, #23
 800abbc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800abc0:	d516      	bpl.n	800abf0 <_dtoa_r+0x380>
 800abc2:	4bb2      	ldr	r3, [pc, #712]	; (800ae8c <_dtoa_r+0x61c>)
 800abc4:	ec51 0b19 	vmov	r0, r1, d9
 800abc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abcc:	f7f5 fe46 	bl	800085c <__aeabi_ddiv>
 800abd0:	f007 070f 	and.w	r7, r7, #15
 800abd4:	4682      	mov	sl, r0
 800abd6:	468b      	mov	fp, r1
 800abd8:	2503      	movs	r5, #3
 800abda:	4eac      	ldr	r6, [pc, #688]	; (800ae8c <_dtoa_r+0x61c>)
 800abdc:	b957      	cbnz	r7, 800abf4 <_dtoa_r+0x384>
 800abde:	4642      	mov	r2, r8
 800abe0:	464b      	mov	r3, r9
 800abe2:	4650      	mov	r0, sl
 800abe4:	4659      	mov	r1, fp
 800abe6:	f7f5 fe39 	bl	800085c <__aeabi_ddiv>
 800abea:	4682      	mov	sl, r0
 800abec:	468b      	mov	fp, r1
 800abee:	e028      	b.n	800ac42 <_dtoa_r+0x3d2>
 800abf0:	2502      	movs	r5, #2
 800abf2:	e7f2      	b.n	800abda <_dtoa_r+0x36a>
 800abf4:	07f9      	lsls	r1, r7, #31
 800abf6:	d508      	bpl.n	800ac0a <_dtoa_r+0x39a>
 800abf8:	4640      	mov	r0, r8
 800abfa:	4649      	mov	r1, r9
 800abfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac00:	f7f5 fd02 	bl	8000608 <__aeabi_dmul>
 800ac04:	3501      	adds	r5, #1
 800ac06:	4680      	mov	r8, r0
 800ac08:	4689      	mov	r9, r1
 800ac0a:	107f      	asrs	r7, r7, #1
 800ac0c:	3608      	adds	r6, #8
 800ac0e:	e7e5      	b.n	800abdc <_dtoa_r+0x36c>
 800ac10:	f000 809b 	beq.w	800ad4a <_dtoa_r+0x4da>
 800ac14:	9b00      	ldr	r3, [sp, #0]
 800ac16:	4f9d      	ldr	r7, [pc, #628]	; (800ae8c <_dtoa_r+0x61c>)
 800ac18:	425e      	negs	r6, r3
 800ac1a:	4b9b      	ldr	r3, [pc, #620]	; (800ae88 <_dtoa_r+0x618>)
 800ac1c:	f006 020f 	and.w	r2, r6, #15
 800ac20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac28:	ec51 0b19 	vmov	r0, r1, d9
 800ac2c:	f7f5 fcec 	bl	8000608 <__aeabi_dmul>
 800ac30:	1136      	asrs	r6, r6, #4
 800ac32:	4682      	mov	sl, r0
 800ac34:	468b      	mov	fp, r1
 800ac36:	2300      	movs	r3, #0
 800ac38:	2502      	movs	r5, #2
 800ac3a:	2e00      	cmp	r6, #0
 800ac3c:	d17a      	bne.n	800ad34 <_dtoa_r+0x4c4>
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1d3      	bne.n	800abea <_dtoa_r+0x37a>
 800ac42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 8082 	beq.w	800ad4e <_dtoa_r+0x4de>
 800ac4a:	4b91      	ldr	r3, [pc, #580]	; (800ae90 <_dtoa_r+0x620>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	4650      	mov	r0, sl
 800ac50:	4659      	mov	r1, fp
 800ac52:	f7f5 ff4b 	bl	8000aec <__aeabi_dcmplt>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d079      	beq.n	800ad4e <_dtoa_r+0x4de>
 800ac5a:	9b03      	ldr	r3, [sp, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d076      	beq.n	800ad4e <_dtoa_r+0x4de>
 800ac60:	9b02      	ldr	r3, [sp, #8]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	dd36      	ble.n	800acd4 <_dtoa_r+0x464>
 800ac66:	9b00      	ldr	r3, [sp, #0]
 800ac68:	4650      	mov	r0, sl
 800ac6a:	4659      	mov	r1, fp
 800ac6c:	1e5f      	subs	r7, r3, #1
 800ac6e:	2200      	movs	r2, #0
 800ac70:	4b88      	ldr	r3, [pc, #544]	; (800ae94 <_dtoa_r+0x624>)
 800ac72:	f7f5 fcc9 	bl	8000608 <__aeabi_dmul>
 800ac76:	9e02      	ldr	r6, [sp, #8]
 800ac78:	4682      	mov	sl, r0
 800ac7a:	468b      	mov	fp, r1
 800ac7c:	3501      	adds	r5, #1
 800ac7e:	4628      	mov	r0, r5
 800ac80:	f7f5 fc58 	bl	8000534 <__aeabi_i2d>
 800ac84:	4652      	mov	r2, sl
 800ac86:	465b      	mov	r3, fp
 800ac88:	f7f5 fcbe 	bl	8000608 <__aeabi_dmul>
 800ac8c:	4b82      	ldr	r3, [pc, #520]	; (800ae98 <_dtoa_r+0x628>)
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f7f5 fb04 	bl	800029c <__adddf3>
 800ac94:	46d0      	mov	r8, sl
 800ac96:	46d9      	mov	r9, fp
 800ac98:	4682      	mov	sl, r0
 800ac9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ac9e:	2e00      	cmp	r6, #0
 800aca0:	d158      	bne.n	800ad54 <_dtoa_r+0x4e4>
 800aca2:	4b7e      	ldr	r3, [pc, #504]	; (800ae9c <_dtoa_r+0x62c>)
 800aca4:	2200      	movs	r2, #0
 800aca6:	4640      	mov	r0, r8
 800aca8:	4649      	mov	r1, r9
 800acaa:	f7f5 faf5 	bl	8000298 <__aeabi_dsub>
 800acae:	4652      	mov	r2, sl
 800acb0:	465b      	mov	r3, fp
 800acb2:	4680      	mov	r8, r0
 800acb4:	4689      	mov	r9, r1
 800acb6:	f7f5 ff37 	bl	8000b28 <__aeabi_dcmpgt>
 800acba:	2800      	cmp	r0, #0
 800acbc:	f040 8295 	bne.w	800b1ea <_dtoa_r+0x97a>
 800acc0:	4652      	mov	r2, sl
 800acc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800acc6:	4640      	mov	r0, r8
 800acc8:	4649      	mov	r1, r9
 800acca:	f7f5 ff0f 	bl	8000aec <__aeabi_dcmplt>
 800acce:	2800      	cmp	r0, #0
 800acd0:	f040 8289 	bne.w	800b1e6 <_dtoa_r+0x976>
 800acd4:	ec5b ab19 	vmov	sl, fp, d9
 800acd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f2c0 8148 	blt.w	800af70 <_dtoa_r+0x700>
 800ace0:	9a00      	ldr	r2, [sp, #0]
 800ace2:	2a0e      	cmp	r2, #14
 800ace4:	f300 8144 	bgt.w	800af70 <_dtoa_r+0x700>
 800ace8:	4b67      	ldr	r3, [pc, #412]	; (800ae88 <_dtoa_r+0x618>)
 800acea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f280 80d5 	bge.w	800aea4 <_dtoa_r+0x634>
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f300 80d1 	bgt.w	800aea4 <_dtoa_r+0x634>
 800ad02:	f040 826f 	bne.w	800b1e4 <_dtoa_r+0x974>
 800ad06:	4b65      	ldr	r3, [pc, #404]	; (800ae9c <_dtoa_r+0x62c>)
 800ad08:	2200      	movs	r2, #0
 800ad0a:	4640      	mov	r0, r8
 800ad0c:	4649      	mov	r1, r9
 800ad0e:	f7f5 fc7b 	bl	8000608 <__aeabi_dmul>
 800ad12:	4652      	mov	r2, sl
 800ad14:	465b      	mov	r3, fp
 800ad16:	f7f5 fefd 	bl	8000b14 <__aeabi_dcmpge>
 800ad1a:	9e03      	ldr	r6, [sp, #12]
 800ad1c:	4637      	mov	r7, r6
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	f040 8245 	bne.w	800b1ae <_dtoa_r+0x93e>
 800ad24:	9d01      	ldr	r5, [sp, #4]
 800ad26:	2331      	movs	r3, #49	; 0x31
 800ad28:	f805 3b01 	strb.w	r3, [r5], #1
 800ad2c:	9b00      	ldr	r3, [sp, #0]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	e240      	b.n	800b1b6 <_dtoa_r+0x946>
 800ad34:	07f2      	lsls	r2, r6, #31
 800ad36:	d505      	bpl.n	800ad44 <_dtoa_r+0x4d4>
 800ad38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad3c:	f7f5 fc64 	bl	8000608 <__aeabi_dmul>
 800ad40:	3501      	adds	r5, #1
 800ad42:	2301      	movs	r3, #1
 800ad44:	1076      	asrs	r6, r6, #1
 800ad46:	3708      	adds	r7, #8
 800ad48:	e777      	b.n	800ac3a <_dtoa_r+0x3ca>
 800ad4a:	2502      	movs	r5, #2
 800ad4c:	e779      	b.n	800ac42 <_dtoa_r+0x3d2>
 800ad4e:	9f00      	ldr	r7, [sp, #0]
 800ad50:	9e03      	ldr	r6, [sp, #12]
 800ad52:	e794      	b.n	800ac7e <_dtoa_r+0x40e>
 800ad54:	9901      	ldr	r1, [sp, #4]
 800ad56:	4b4c      	ldr	r3, [pc, #304]	; (800ae88 <_dtoa_r+0x618>)
 800ad58:	4431      	add	r1, r6
 800ad5a:	910d      	str	r1, [sp, #52]	; 0x34
 800ad5c:	9908      	ldr	r1, [sp, #32]
 800ad5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad66:	2900      	cmp	r1, #0
 800ad68:	d043      	beq.n	800adf2 <_dtoa_r+0x582>
 800ad6a:	494d      	ldr	r1, [pc, #308]	; (800aea0 <_dtoa_r+0x630>)
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	f7f5 fd75 	bl	800085c <__aeabi_ddiv>
 800ad72:	4652      	mov	r2, sl
 800ad74:	465b      	mov	r3, fp
 800ad76:	f7f5 fa8f 	bl	8000298 <__aeabi_dsub>
 800ad7a:	9d01      	ldr	r5, [sp, #4]
 800ad7c:	4682      	mov	sl, r0
 800ad7e:	468b      	mov	fp, r1
 800ad80:	4649      	mov	r1, r9
 800ad82:	4640      	mov	r0, r8
 800ad84:	f7f5 fef0 	bl	8000b68 <__aeabi_d2iz>
 800ad88:	4606      	mov	r6, r0
 800ad8a:	f7f5 fbd3 	bl	8000534 <__aeabi_i2d>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	460b      	mov	r3, r1
 800ad92:	4640      	mov	r0, r8
 800ad94:	4649      	mov	r1, r9
 800ad96:	f7f5 fa7f 	bl	8000298 <__aeabi_dsub>
 800ad9a:	3630      	adds	r6, #48	; 0x30
 800ad9c:	f805 6b01 	strb.w	r6, [r5], #1
 800ada0:	4652      	mov	r2, sl
 800ada2:	465b      	mov	r3, fp
 800ada4:	4680      	mov	r8, r0
 800ada6:	4689      	mov	r9, r1
 800ada8:	f7f5 fea0 	bl	8000aec <__aeabi_dcmplt>
 800adac:	2800      	cmp	r0, #0
 800adae:	d163      	bne.n	800ae78 <_dtoa_r+0x608>
 800adb0:	4642      	mov	r2, r8
 800adb2:	464b      	mov	r3, r9
 800adb4:	4936      	ldr	r1, [pc, #216]	; (800ae90 <_dtoa_r+0x620>)
 800adb6:	2000      	movs	r0, #0
 800adb8:	f7f5 fa6e 	bl	8000298 <__aeabi_dsub>
 800adbc:	4652      	mov	r2, sl
 800adbe:	465b      	mov	r3, fp
 800adc0:	f7f5 fe94 	bl	8000aec <__aeabi_dcmplt>
 800adc4:	2800      	cmp	r0, #0
 800adc6:	f040 80b5 	bne.w	800af34 <_dtoa_r+0x6c4>
 800adca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adcc:	429d      	cmp	r5, r3
 800adce:	d081      	beq.n	800acd4 <_dtoa_r+0x464>
 800add0:	4b30      	ldr	r3, [pc, #192]	; (800ae94 <_dtoa_r+0x624>)
 800add2:	2200      	movs	r2, #0
 800add4:	4650      	mov	r0, sl
 800add6:	4659      	mov	r1, fp
 800add8:	f7f5 fc16 	bl	8000608 <__aeabi_dmul>
 800addc:	4b2d      	ldr	r3, [pc, #180]	; (800ae94 <_dtoa_r+0x624>)
 800adde:	4682      	mov	sl, r0
 800ade0:	468b      	mov	fp, r1
 800ade2:	4640      	mov	r0, r8
 800ade4:	4649      	mov	r1, r9
 800ade6:	2200      	movs	r2, #0
 800ade8:	f7f5 fc0e 	bl	8000608 <__aeabi_dmul>
 800adec:	4680      	mov	r8, r0
 800adee:	4689      	mov	r9, r1
 800adf0:	e7c6      	b.n	800ad80 <_dtoa_r+0x510>
 800adf2:	4650      	mov	r0, sl
 800adf4:	4659      	mov	r1, fp
 800adf6:	f7f5 fc07 	bl	8000608 <__aeabi_dmul>
 800adfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adfc:	9d01      	ldr	r5, [sp, #4]
 800adfe:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae00:	4682      	mov	sl, r0
 800ae02:	468b      	mov	fp, r1
 800ae04:	4649      	mov	r1, r9
 800ae06:	4640      	mov	r0, r8
 800ae08:	f7f5 feae 	bl	8000b68 <__aeabi_d2iz>
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	f7f5 fb91 	bl	8000534 <__aeabi_i2d>
 800ae12:	3630      	adds	r6, #48	; 0x30
 800ae14:	4602      	mov	r2, r0
 800ae16:	460b      	mov	r3, r1
 800ae18:	4640      	mov	r0, r8
 800ae1a:	4649      	mov	r1, r9
 800ae1c:	f7f5 fa3c 	bl	8000298 <__aeabi_dsub>
 800ae20:	f805 6b01 	strb.w	r6, [r5], #1
 800ae24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae26:	429d      	cmp	r5, r3
 800ae28:	4680      	mov	r8, r0
 800ae2a:	4689      	mov	r9, r1
 800ae2c:	f04f 0200 	mov.w	r2, #0
 800ae30:	d124      	bne.n	800ae7c <_dtoa_r+0x60c>
 800ae32:	4b1b      	ldr	r3, [pc, #108]	; (800aea0 <_dtoa_r+0x630>)
 800ae34:	4650      	mov	r0, sl
 800ae36:	4659      	mov	r1, fp
 800ae38:	f7f5 fa30 	bl	800029c <__adddf3>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	4640      	mov	r0, r8
 800ae42:	4649      	mov	r1, r9
 800ae44:	f7f5 fe70 	bl	8000b28 <__aeabi_dcmpgt>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d173      	bne.n	800af34 <_dtoa_r+0x6c4>
 800ae4c:	4652      	mov	r2, sl
 800ae4e:	465b      	mov	r3, fp
 800ae50:	4913      	ldr	r1, [pc, #76]	; (800aea0 <_dtoa_r+0x630>)
 800ae52:	2000      	movs	r0, #0
 800ae54:	f7f5 fa20 	bl	8000298 <__aeabi_dsub>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4640      	mov	r0, r8
 800ae5e:	4649      	mov	r1, r9
 800ae60:	f7f5 fe44 	bl	8000aec <__aeabi_dcmplt>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	f43f af35 	beq.w	800acd4 <_dtoa_r+0x464>
 800ae6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ae6c:	1e6b      	subs	r3, r5, #1
 800ae6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae74:	2b30      	cmp	r3, #48	; 0x30
 800ae76:	d0f8      	beq.n	800ae6a <_dtoa_r+0x5fa>
 800ae78:	9700      	str	r7, [sp, #0]
 800ae7a:	e049      	b.n	800af10 <_dtoa_r+0x6a0>
 800ae7c:	4b05      	ldr	r3, [pc, #20]	; (800ae94 <_dtoa_r+0x624>)
 800ae7e:	f7f5 fbc3 	bl	8000608 <__aeabi_dmul>
 800ae82:	4680      	mov	r8, r0
 800ae84:	4689      	mov	r9, r1
 800ae86:	e7bd      	b.n	800ae04 <_dtoa_r+0x594>
 800ae88:	0800ed30 	.word	0x0800ed30
 800ae8c:	0800ed08 	.word	0x0800ed08
 800ae90:	3ff00000 	.word	0x3ff00000
 800ae94:	40240000 	.word	0x40240000
 800ae98:	401c0000 	.word	0x401c0000
 800ae9c:	40140000 	.word	0x40140000
 800aea0:	3fe00000 	.word	0x3fe00000
 800aea4:	9d01      	ldr	r5, [sp, #4]
 800aea6:	4656      	mov	r6, sl
 800aea8:	465f      	mov	r7, fp
 800aeaa:	4642      	mov	r2, r8
 800aeac:	464b      	mov	r3, r9
 800aeae:	4630      	mov	r0, r6
 800aeb0:	4639      	mov	r1, r7
 800aeb2:	f7f5 fcd3 	bl	800085c <__aeabi_ddiv>
 800aeb6:	f7f5 fe57 	bl	8000b68 <__aeabi_d2iz>
 800aeba:	4682      	mov	sl, r0
 800aebc:	f7f5 fb3a 	bl	8000534 <__aeabi_i2d>
 800aec0:	4642      	mov	r2, r8
 800aec2:	464b      	mov	r3, r9
 800aec4:	f7f5 fba0 	bl	8000608 <__aeabi_dmul>
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	4630      	mov	r0, r6
 800aece:	4639      	mov	r1, r7
 800aed0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800aed4:	f7f5 f9e0 	bl	8000298 <__aeabi_dsub>
 800aed8:	f805 6b01 	strb.w	r6, [r5], #1
 800aedc:	9e01      	ldr	r6, [sp, #4]
 800aede:	9f03      	ldr	r7, [sp, #12]
 800aee0:	1bae      	subs	r6, r5, r6
 800aee2:	42b7      	cmp	r7, r6
 800aee4:	4602      	mov	r2, r0
 800aee6:	460b      	mov	r3, r1
 800aee8:	d135      	bne.n	800af56 <_dtoa_r+0x6e6>
 800aeea:	f7f5 f9d7 	bl	800029c <__adddf3>
 800aeee:	4642      	mov	r2, r8
 800aef0:	464b      	mov	r3, r9
 800aef2:	4606      	mov	r6, r0
 800aef4:	460f      	mov	r7, r1
 800aef6:	f7f5 fe17 	bl	8000b28 <__aeabi_dcmpgt>
 800aefa:	b9d0      	cbnz	r0, 800af32 <_dtoa_r+0x6c2>
 800aefc:	4642      	mov	r2, r8
 800aefe:	464b      	mov	r3, r9
 800af00:	4630      	mov	r0, r6
 800af02:	4639      	mov	r1, r7
 800af04:	f7f5 fde8 	bl	8000ad8 <__aeabi_dcmpeq>
 800af08:	b110      	cbz	r0, 800af10 <_dtoa_r+0x6a0>
 800af0a:	f01a 0f01 	tst.w	sl, #1
 800af0e:	d110      	bne.n	800af32 <_dtoa_r+0x6c2>
 800af10:	4620      	mov	r0, r4
 800af12:	ee18 1a10 	vmov	r1, s16
 800af16:	f000 fd05 	bl	800b924 <_Bfree>
 800af1a:	2300      	movs	r3, #0
 800af1c:	9800      	ldr	r0, [sp, #0]
 800af1e:	702b      	strb	r3, [r5, #0]
 800af20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af22:	3001      	adds	r0, #1
 800af24:	6018      	str	r0, [r3, #0]
 800af26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f43f acf1 	beq.w	800a910 <_dtoa_r+0xa0>
 800af2e:	601d      	str	r5, [r3, #0]
 800af30:	e4ee      	b.n	800a910 <_dtoa_r+0xa0>
 800af32:	9f00      	ldr	r7, [sp, #0]
 800af34:	462b      	mov	r3, r5
 800af36:	461d      	mov	r5, r3
 800af38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af3c:	2a39      	cmp	r2, #57	; 0x39
 800af3e:	d106      	bne.n	800af4e <_dtoa_r+0x6de>
 800af40:	9a01      	ldr	r2, [sp, #4]
 800af42:	429a      	cmp	r2, r3
 800af44:	d1f7      	bne.n	800af36 <_dtoa_r+0x6c6>
 800af46:	9901      	ldr	r1, [sp, #4]
 800af48:	2230      	movs	r2, #48	; 0x30
 800af4a:	3701      	adds	r7, #1
 800af4c:	700a      	strb	r2, [r1, #0]
 800af4e:	781a      	ldrb	r2, [r3, #0]
 800af50:	3201      	adds	r2, #1
 800af52:	701a      	strb	r2, [r3, #0]
 800af54:	e790      	b.n	800ae78 <_dtoa_r+0x608>
 800af56:	4ba6      	ldr	r3, [pc, #664]	; (800b1f0 <_dtoa_r+0x980>)
 800af58:	2200      	movs	r2, #0
 800af5a:	f7f5 fb55 	bl	8000608 <__aeabi_dmul>
 800af5e:	2200      	movs	r2, #0
 800af60:	2300      	movs	r3, #0
 800af62:	4606      	mov	r6, r0
 800af64:	460f      	mov	r7, r1
 800af66:	f7f5 fdb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800af6a:	2800      	cmp	r0, #0
 800af6c:	d09d      	beq.n	800aeaa <_dtoa_r+0x63a>
 800af6e:	e7cf      	b.n	800af10 <_dtoa_r+0x6a0>
 800af70:	9a08      	ldr	r2, [sp, #32]
 800af72:	2a00      	cmp	r2, #0
 800af74:	f000 80d7 	beq.w	800b126 <_dtoa_r+0x8b6>
 800af78:	9a06      	ldr	r2, [sp, #24]
 800af7a:	2a01      	cmp	r2, #1
 800af7c:	f300 80ba 	bgt.w	800b0f4 <_dtoa_r+0x884>
 800af80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af82:	2a00      	cmp	r2, #0
 800af84:	f000 80b2 	beq.w	800b0ec <_dtoa_r+0x87c>
 800af88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af8c:	9e07      	ldr	r6, [sp, #28]
 800af8e:	9d04      	ldr	r5, [sp, #16]
 800af90:	9a04      	ldr	r2, [sp, #16]
 800af92:	441a      	add	r2, r3
 800af94:	9204      	str	r2, [sp, #16]
 800af96:	9a05      	ldr	r2, [sp, #20]
 800af98:	2101      	movs	r1, #1
 800af9a:	441a      	add	r2, r3
 800af9c:	4620      	mov	r0, r4
 800af9e:	9205      	str	r2, [sp, #20]
 800afa0:	f000 fd78 	bl	800ba94 <__i2b>
 800afa4:	4607      	mov	r7, r0
 800afa6:	2d00      	cmp	r5, #0
 800afa8:	dd0c      	ble.n	800afc4 <_dtoa_r+0x754>
 800afaa:	9b05      	ldr	r3, [sp, #20]
 800afac:	2b00      	cmp	r3, #0
 800afae:	dd09      	ble.n	800afc4 <_dtoa_r+0x754>
 800afb0:	42ab      	cmp	r3, r5
 800afb2:	9a04      	ldr	r2, [sp, #16]
 800afb4:	bfa8      	it	ge
 800afb6:	462b      	movge	r3, r5
 800afb8:	1ad2      	subs	r2, r2, r3
 800afba:	9204      	str	r2, [sp, #16]
 800afbc:	9a05      	ldr	r2, [sp, #20]
 800afbe:	1aed      	subs	r5, r5, r3
 800afc0:	1ad3      	subs	r3, r2, r3
 800afc2:	9305      	str	r3, [sp, #20]
 800afc4:	9b07      	ldr	r3, [sp, #28]
 800afc6:	b31b      	cbz	r3, 800b010 <_dtoa_r+0x7a0>
 800afc8:	9b08      	ldr	r3, [sp, #32]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f000 80af 	beq.w	800b12e <_dtoa_r+0x8be>
 800afd0:	2e00      	cmp	r6, #0
 800afd2:	dd13      	ble.n	800affc <_dtoa_r+0x78c>
 800afd4:	4639      	mov	r1, r7
 800afd6:	4632      	mov	r2, r6
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 fe1b 	bl	800bc14 <__pow5mult>
 800afde:	ee18 2a10 	vmov	r2, s16
 800afe2:	4601      	mov	r1, r0
 800afe4:	4607      	mov	r7, r0
 800afe6:	4620      	mov	r0, r4
 800afe8:	f000 fd6a 	bl	800bac0 <__multiply>
 800afec:	ee18 1a10 	vmov	r1, s16
 800aff0:	4680      	mov	r8, r0
 800aff2:	4620      	mov	r0, r4
 800aff4:	f000 fc96 	bl	800b924 <_Bfree>
 800aff8:	ee08 8a10 	vmov	s16, r8
 800affc:	9b07      	ldr	r3, [sp, #28]
 800affe:	1b9a      	subs	r2, r3, r6
 800b000:	d006      	beq.n	800b010 <_dtoa_r+0x7a0>
 800b002:	ee18 1a10 	vmov	r1, s16
 800b006:	4620      	mov	r0, r4
 800b008:	f000 fe04 	bl	800bc14 <__pow5mult>
 800b00c:	ee08 0a10 	vmov	s16, r0
 800b010:	2101      	movs	r1, #1
 800b012:	4620      	mov	r0, r4
 800b014:	f000 fd3e 	bl	800ba94 <__i2b>
 800b018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	4606      	mov	r6, r0
 800b01e:	f340 8088 	ble.w	800b132 <_dtoa_r+0x8c2>
 800b022:	461a      	mov	r2, r3
 800b024:	4601      	mov	r1, r0
 800b026:	4620      	mov	r0, r4
 800b028:	f000 fdf4 	bl	800bc14 <__pow5mult>
 800b02c:	9b06      	ldr	r3, [sp, #24]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	4606      	mov	r6, r0
 800b032:	f340 8081 	ble.w	800b138 <_dtoa_r+0x8c8>
 800b036:	f04f 0800 	mov.w	r8, #0
 800b03a:	6933      	ldr	r3, [r6, #16]
 800b03c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b040:	6918      	ldr	r0, [r3, #16]
 800b042:	f000 fcd7 	bl	800b9f4 <__hi0bits>
 800b046:	f1c0 0020 	rsb	r0, r0, #32
 800b04a:	9b05      	ldr	r3, [sp, #20]
 800b04c:	4418      	add	r0, r3
 800b04e:	f010 001f 	ands.w	r0, r0, #31
 800b052:	f000 8092 	beq.w	800b17a <_dtoa_r+0x90a>
 800b056:	f1c0 0320 	rsb	r3, r0, #32
 800b05a:	2b04      	cmp	r3, #4
 800b05c:	f340 808a 	ble.w	800b174 <_dtoa_r+0x904>
 800b060:	f1c0 001c 	rsb	r0, r0, #28
 800b064:	9b04      	ldr	r3, [sp, #16]
 800b066:	4403      	add	r3, r0
 800b068:	9304      	str	r3, [sp, #16]
 800b06a:	9b05      	ldr	r3, [sp, #20]
 800b06c:	4403      	add	r3, r0
 800b06e:	4405      	add	r5, r0
 800b070:	9305      	str	r3, [sp, #20]
 800b072:	9b04      	ldr	r3, [sp, #16]
 800b074:	2b00      	cmp	r3, #0
 800b076:	dd07      	ble.n	800b088 <_dtoa_r+0x818>
 800b078:	ee18 1a10 	vmov	r1, s16
 800b07c:	461a      	mov	r2, r3
 800b07e:	4620      	mov	r0, r4
 800b080:	f000 fe22 	bl	800bcc8 <__lshift>
 800b084:	ee08 0a10 	vmov	s16, r0
 800b088:	9b05      	ldr	r3, [sp, #20]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	dd05      	ble.n	800b09a <_dtoa_r+0x82a>
 800b08e:	4631      	mov	r1, r6
 800b090:	461a      	mov	r2, r3
 800b092:	4620      	mov	r0, r4
 800b094:	f000 fe18 	bl	800bcc8 <__lshift>
 800b098:	4606      	mov	r6, r0
 800b09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d06e      	beq.n	800b17e <_dtoa_r+0x90e>
 800b0a0:	ee18 0a10 	vmov	r0, s16
 800b0a4:	4631      	mov	r1, r6
 800b0a6:	f000 fe7f 	bl	800bda8 <__mcmp>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	da67      	bge.n	800b17e <_dtoa_r+0x90e>
 800b0ae:	9b00      	ldr	r3, [sp, #0]
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	ee18 1a10 	vmov	r1, s16
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	220a      	movs	r2, #10
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	4620      	mov	r0, r4
 800b0be:	f000 fc53 	bl	800b968 <__multadd>
 800b0c2:	9b08      	ldr	r3, [sp, #32]
 800b0c4:	ee08 0a10 	vmov	s16, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f000 81b1 	beq.w	800b430 <_dtoa_r+0xbc0>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	4639      	mov	r1, r7
 800b0d2:	220a      	movs	r2, #10
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f000 fc47 	bl	800b968 <__multadd>
 800b0da:	9b02      	ldr	r3, [sp, #8]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	4607      	mov	r7, r0
 800b0e0:	f300 808e 	bgt.w	800b200 <_dtoa_r+0x990>
 800b0e4:	9b06      	ldr	r3, [sp, #24]
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	dc51      	bgt.n	800b18e <_dtoa_r+0x91e>
 800b0ea:	e089      	b.n	800b200 <_dtoa_r+0x990>
 800b0ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b0f2:	e74b      	b.n	800af8c <_dtoa_r+0x71c>
 800b0f4:	9b03      	ldr	r3, [sp, #12]
 800b0f6:	1e5e      	subs	r6, r3, #1
 800b0f8:	9b07      	ldr	r3, [sp, #28]
 800b0fa:	42b3      	cmp	r3, r6
 800b0fc:	bfbf      	itttt	lt
 800b0fe:	9b07      	ldrlt	r3, [sp, #28]
 800b100:	9607      	strlt	r6, [sp, #28]
 800b102:	1af2      	sublt	r2, r6, r3
 800b104:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b106:	bfb6      	itet	lt
 800b108:	189b      	addlt	r3, r3, r2
 800b10a:	1b9e      	subge	r6, r3, r6
 800b10c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b10e:	9b03      	ldr	r3, [sp, #12]
 800b110:	bfb8      	it	lt
 800b112:	2600      	movlt	r6, #0
 800b114:	2b00      	cmp	r3, #0
 800b116:	bfb7      	itett	lt
 800b118:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b11c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b120:	1a9d      	sublt	r5, r3, r2
 800b122:	2300      	movlt	r3, #0
 800b124:	e734      	b.n	800af90 <_dtoa_r+0x720>
 800b126:	9e07      	ldr	r6, [sp, #28]
 800b128:	9d04      	ldr	r5, [sp, #16]
 800b12a:	9f08      	ldr	r7, [sp, #32]
 800b12c:	e73b      	b.n	800afa6 <_dtoa_r+0x736>
 800b12e:	9a07      	ldr	r2, [sp, #28]
 800b130:	e767      	b.n	800b002 <_dtoa_r+0x792>
 800b132:	9b06      	ldr	r3, [sp, #24]
 800b134:	2b01      	cmp	r3, #1
 800b136:	dc18      	bgt.n	800b16a <_dtoa_r+0x8fa>
 800b138:	f1ba 0f00 	cmp.w	sl, #0
 800b13c:	d115      	bne.n	800b16a <_dtoa_r+0x8fa>
 800b13e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b142:	b993      	cbnz	r3, 800b16a <_dtoa_r+0x8fa>
 800b144:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b148:	0d1b      	lsrs	r3, r3, #20
 800b14a:	051b      	lsls	r3, r3, #20
 800b14c:	b183      	cbz	r3, 800b170 <_dtoa_r+0x900>
 800b14e:	9b04      	ldr	r3, [sp, #16]
 800b150:	3301      	adds	r3, #1
 800b152:	9304      	str	r3, [sp, #16]
 800b154:	9b05      	ldr	r3, [sp, #20]
 800b156:	3301      	adds	r3, #1
 800b158:	9305      	str	r3, [sp, #20]
 800b15a:	f04f 0801 	mov.w	r8, #1
 800b15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b160:	2b00      	cmp	r3, #0
 800b162:	f47f af6a 	bne.w	800b03a <_dtoa_r+0x7ca>
 800b166:	2001      	movs	r0, #1
 800b168:	e76f      	b.n	800b04a <_dtoa_r+0x7da>
 800b16a:	f04f 0800 	mov.w	r8, #0
 800b16e:	e7f6      	b.n	800b15e <_dtoa_r+0x8ee>
 800b170:	4698      	mov	r8, r3
 800b172:	e7f4      	b.n	800b15e <_dtoa_r+0x8ee>
 800b174:	f43f af7d 	beq.w	800b072 <_dtoa_r+0x802>
 800b178:	4618      	mov	r0, r3
 800b17a:	301c      	adds	r0, #28
 800b17c:	e772      	b.n	800b064 <_dtoa_r+0x7f4>
 800b17e:	9b03      	ldr	r3, [sp, #12]
 800b180:	2b00      	cmp	r3, #0
 800b182:	dc37      	bgt.n	800b1f4 <_dtoa_r+0x984>
 800b184:	9b06      	ldr	r3, [sp, #24]
 800b186:	2b02      	cmp	r3, #2
 800b188:	dd34      	ble.n	800b1f4 <_dtoa_r+0x984>
 800b18a:	9b03      	ldr	r3, [sp, #12]
 800b18c:	9302      	str	r3, [sp, #8]
 800b18e:	9b02      	ldr	r3, [sp, #8]
 800b190:	b96b      	cbnz	r3, 800b1ae <_dtoa_r+0x93e>
 800b192:	4631      	mov	r1, r6
 800b194:	2205      	movs	r2, #5
 800b196:	4620      	mov	r0, r4
 800b198:	f000 fbe6 	bl	800b968 <__multadd>
 800b19c:	4601      	mov	r1, r0
 800b19e:	4606      	mov	r6, r0
 800b1a0:	ee18 0a10 	vmov	r0, s16
 800b1a4:	f000 fe00 	bl	800bda8 <__mcmp>
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	f73f adbb 	bgt.w	800ad24 <_dtoa_r+0x4b4>
 800b1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b0:	9d01      	ldr	r5, [sp, #4]
 800b1b2:	43db      	mvns	r3, r3
 800b1b4:	9300      	str	r3, [sp, #0]
 800b1b6:	f04f 0800 	mov.w	r8, #0
 800b1ba:	4631      	mov	r1, r6
 800b1bc:	4620      	mov	r0, r4
 800b1be:	f000 fbb1 	bl	800b924 <_Bfree>
 800b1c2:	2f00      	cmp	r7, #0
 800b1c4:	f43f aea4 	beq.w	800af10 <_dtoa_r+0x6a0>
 800b1c8:	f1b8 0f00 	cmp.w	r8, #0
 800b1cc:	d005      	beq.n	800b1da <_dtoa_r+0x96a>
 800b1ce:	45b8      	cmp	r8, r7
 800b1d0:	d003      	beq.n	800b1da <_dtoa_r+0x96a>
 800b1d2:	4641      	mov	r1, r8
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f000 fba5 	bl	800b924 <_Bfree>
 800b1da:	4639      	mov	r1, r7
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f000 fba1 	bl	800b924 <_Bfree>
 800b1e2:	e695      	b.n	800af10 <_dtoa_r+0x6a0>
 800b1e4:	2600      	movs	r6, #0
 800b1e6:	4637      	mov	r7, r6
 800b1e8:	e7e1      	b.n	800b1ae <_dtoa_r+0x93e>
 800b1ea:	9700      	str	r7, [sp, #0]
 800b1ec:	4637      	mov	r7, r6
 800b1ee:	e599      	b.n	800ad24 <_dtoa_r+0x4b4>
 800b1f0:	40240000 	.word	0x40240000
 800b1f4:	9b08      	ldr	r3, [sp, #32]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f000 80ca 	beq.w	800b390 <_dtoa_r+0xb20>
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	9302      	str	r3, [sp, #8]
 800b200:	2d00      	cmp	r5, #0
 800b202:	dd05      	ble.n	800b210 <_dtoa_r+0x9a0>
 800b204:	4639      	mov	r1, r7
 800b206:	462a      	mov	r2, r5
 800b208:	4620      	mov	r0, r4
 800b20a:	f000 fd5d 	bl	800bcc8 <__lshift>
 800b20e:	4607      	mov	r7, r0
 800b210:	f1b8 0f00 	cmp.w	r8, #0
 800b214:	d05b      	beq.n	800b2ce <_dtoa_r+0xa5e>
 800b216:	6879      	ldr	r1, [r7, #4]
 800b218:	4620      	mov	r0, r4
 800b21a:	f000 fb43 	bl	800b8a4 <_Balloc>
 800b21e:	4605      	mov	r5, r0
 800b220:	b928      	cbnz	r0, 800b22e <_dtoa_r+0x9be>
 800b222:	4b87      	ldr	r3, [pc, #540]	; (800b440 <_dtoa_r+0xbd0>)
 800b224:	4602      	mov	r2, r0
 800b226:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b22a:	f7ff bb3b 	b.w	800a8a4 <_dtoa_r+0x34>
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	3202      	adds	r2, #2
 800b232:	0092      	lsls	r2, r2, #2
 800b234:	f107 010c 	add.w	r1, r7, #12
 800b238:	300c      	adds	r0, #12
 800b23a:	f7fe fc93 	bl	8009b64 <memcpy>
 800b23e:	2201      	movs	r2, #1
 800b240:	4629      	mov	r1, r5
 800b242:	4620      	mov	r0, r4
 800b244:	f000 fd40 	bl	800bcc8 <__lshift>
 800b248:	9b01      	ldr	r3, [sp, #4]
 800b24a:	f103 0901 	add.w	r9, r3, #1
 800b24e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b252:	4413      	add	r3, r2
 800b254:	9305      	str	r3, [sp, #20]
 800b256:	f00a 0301 	and.w	r3, sl, #1
 800b25a:	46b8      	mov	r8, r7
 800b25c:	9304      	str	r3, [sp, #16]
 800b25e:	4607      	mov	r7, r0
 800b260:	4631      	mov	r1, r6
 800b262:	ee18 0a10 	vmov	r0, s16
 800b266:	f7ff fa75 	bl	800a754 <quorem>
 800b26a:	4641      	mov	r1, r8
 800b26c:	9002      	str	r0, [sp, #8]
 800b26e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b272:	ee18 0a10 	vmov	r0, s16
 800b276:	f000 fd97 	bl	800bda8 <__mcmp>
 800b27a:	463a      	mov	r2, r7
 800b27c:	9003      	str	r0, [sp, #12]
 800b27e:	4631      	mov	r1, r6
 800b280:	4620      	mov	r0, r4
 800b282:	f000 fdad 	bl	800bde0 <__mdiff>
 800b286:	68c2      	ldr	r2, [r0, #12]
 800b288:	f109 3bff 	add.w	fp, r9, #4294967295
 800b28c:	4605      	mov	r5, r0
 800b28e:	bb02      	cbnz	r2, 800b2d2 <_dtoa_r+0xa62>
 800b290:	4601      	mov	r1, r0
 800b292:	ee18 0a10 	vmov	r0, s16
 800b296:	f000 fd87 	bl	800bda8 <__mcmp>
 800b29a:	4602      	mov	r2, r0
 800b29c:	4629      	mov	r1, r5
 800b29e:	4620      	mov	r0, r4
 800b2a0:	9207      	str	r2, [sp, #28]
 800b2a2:	f000 fb3f 	bl	800b924 <_Bfree>
 800b2a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b2aa:	ea43 0102 	orr.w	r1, r3, r2
 800b2ae:	9b04      	ldr	r3, [sp, #16]
 800b2b0:	430b      	orrs	r3, r1
 800b2b2:	464d      	mov	r5, r9
 800b2b4:	d10f      	bne.n	800b2d6 <_dtoa_r+0xa66>
 800b2b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b2ba:	d02a      	beq.n	800b312 <_dtoa_r+0xaa2>
 800b2bc:	9b03      	ldr	r3, [sp, #12]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	dd02      	ble.n	800b2c8 <_dtoa_r+0xa58>
 800b2c2:	9b02      	ldr	r3, [sp, #8]
 800b2c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b2c8:	f88b a000 	strb.w	sl, [fp]
 800b2cc:	e775      	b.n	800b1ba <_dtoa_r+0x94a>
 800b2ce:	4638      	mov	r0, r7
 800b2d0:	e7ba      	b.n	800b248 <_dtoa_r+0x9d8>
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	e7e2      	b.n	800b29c <_dtoa_r+0xa2c>
 800b2d6:	9b03      	ldr	r3, [sp, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	db04      	blt.n	800b2e6 <_dtoa_r+0xa76>
 800b2dc:	9906      	ldr	r1, [sp, #24]
 800b2de:	430b      	orrs	r3, r1
 800b2e0:	9904      	ldr	r1, [sp, #16]
 800b2e2:	430b      	orrs	r3, r1
 800b2e4:	d122      	bne.n	800b32c <_dtoa_r+0xabc>
 800b2e6:	2a00      	cmp	r2, #0
 800b2e8:	ddee      	ble.n	800b2c8 <_dtoa_r+0xa58>
 800b2ea:	ee18 1a10 	vmov	r1, s16
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f000 fce9 	bl	800bcc8 <__lshift>
 800b2f6:	4631      	mov	r1, r6
 800b2f8:	ee08 0a10 	vmov	s16, r0
 800b2fc:	f000 fd54 	bl	800bda8 <__mcmp>
 800b300:	2800      	cmp	r0, #0
 800b302:	dc03      	bgt.n	800b30c <_dtoa_r+0xa9c>
 800b304:	d1e0      	bne.n	800b2c8 <_dtoa_r+0xa58>
 800b306:	f01a 0f01 	tst.w	sl, #1
 800b30a:	d0dd      	beq.n	800b2c8 <_dtoa_r+0xa58>
 800b30c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b310:	d1d7      	bne.n	800b2c2 <_dtoa_r+0xa52>
 800b312:	2339      	movs	r3, #57	; 0x39
 800b314:	f88b 3000 	strb.w	r3, [fp]
 800b318:	462b      	mov	r3, r5
 800b31a:	461d      	mov	r5, r3
 800b31c:	3b01      	subs	r3, #1
 800b31e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b322:	2a39      	cmp	r2, #57	; 0x39
 800b324:	d071      	beq.n	800b40a <_dtoa_r+0xb9a>
 800b326:	3201      	adds	r2, #1
 800b328:	701a      	strb	r2, [r3, #0]
 800b32a:	e746      	b.n	800b1ba <_dtoa_r+0x94a>
 800b32c:	2a00      	cmp	r2, #0
 800b32e:	dd07      	ble.n	800b340 <_dtoa_r+0xad0>
 800b330:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b334:	d0ed      	beq.n	800b312 <_dtoa_r+0xaa2>
 800b336:	f10a 0301 	add.w	r3, sl, #1
 800b33a:	f88b 3000 	strb.w	r3, [fp]
 800b33e:	e73c      	b.n	800b1ba <_dtoa_r+0x94a>
 800b340:	9b05      	ldr	r3, [sp, #20]
 800b342:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b346:	4599      	cmp	r9, r3
 800b348:	d047      	beq.n	800b3da <_dtoa_r+0xb6a>
 800b34a:	ee18 1a10 	vmov	r1, s16
 800b34e:	2300      	movs	r3, #0
 800b350:	220a      	movs	r2, #10
 800b352:	4620      	mov	r0, r4
 800b354:	f000 fb08 	bl	800b968 <__multadd>
 800b358:	45b8      	cmp	r8, r7
 800b35a:	ee08 0a10 	vmov	s16, r0
 800b35e:	f04f 0300 	mov.w	r3, #0
 800b362:	f04f 020a 	mov.w	r2, #10
 800b366:	4641      	mov	r1, r8
 800b368:	4620      	mov	r0, r4
 800b36a:	d106      	bne.n	800b37a <_dtoa_r+0xb0a>
 800b36c:	f000 fafc 	bl	800b968 <__multadd>
 800b370:	4680      	mov	r8, r0
 800b372:	4607      	mov	r7, r0
 800b374:	f109 0901 	add.w	r9, r9, #1
 800b378:	e772      	b.n	800b260 <_dtoa_r+0x9f0>
 800b37a:	f000 faf5 	bl	800b968 <__multadd>
 800b37e:	4639      	mov	r1, r7
 800b380:	4680      	mov	r8, r0
 800b382:	2300      	movs	r3, #0
 800b384:	220a      	movs	r2, #10
 800b386:	4620      	mov	r0, r4
 800b388:	f000 faee 	bl	800b968 <__multadd>
 800b38c:	4607      	mov	r7, r0
 800b38e:	e7f1      	b.n	800b374 <_dtoa_r+0xb04>
 800b390:	9b03      	ldr	r3, [sp, #12]
 800b392:	9302      	str	r3, [sp, #8]
 800b394:	9d01      	ldr	r5, [sp, #4]
 800b396:	ee18 0a10 	vmov	r0, s16
 800b39a:	4631      	mov	r1, r6
 800b39c:	f7ff f9da 	bl	800a754 <quorem>
 800b3a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b3a4:	9b01      	ldr	r3, [sp, #4]
 800b3a6:	f805 ab01 	strb.w	sl, [r5], #1
 800b3aa:	1aea      	subs	r2, r5, r3
 800b3ac:	9b02      	ldr	r3, [sp, #8]
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	dd09      	ble.n	800b3c6 <_dtoa_r+0xb56>
 800b3b2:	ee18 1a10 	vmov	r1, s16
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	220a      	movs	r2, #10
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f000 fad4 	bl	800b968 <__multadd>
 800b3c0:	ee08 0a10 	vmov	s16, r0
 800b3c4:	e7e7      	b.n	800b396 <_dtoa_r+0xb26>
 800b3c6:	9b02      	ldr	r3, [sp, #8]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	bfc8      	it	gt
 800b3cc:	461d      	movgt	r5, r3
 800b3ce:	9b01      	ldr	r3, [sp, #4]
 800b3d0:	bfd8      	it	le
 800b3d2:	2501      	movle	r5, #1
 800b3d4:	441d      	add	r5, r3
 800b3d6:	f04f 0800 	mov.w	r8, #0
 800b3da:	ee18 1a10 	vmov	r1, s16
 800b3de:	2201      	movs	r2, #1
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f000 fc71 	bl	800bcc8 <__lshift>
 800b3e6:	4631      	mov	r1, r6
 800b3e8:	ee08 0a10 	vmov	s16, r0
 800b3ec:	f000 fcdc 	bl	800bda8 <__mcmp>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	dc91      	bgt.n	800b318 <_dtoa_r+0xaa8>
 800b3f4:	d102      	bne.n	800b3fc <_dtoa_r+0xb8c>
 800b3f6:	f01a 0f01 	tst.w	sl, #1
 800b3fa:	d18d      	bne.n	800b318 <_dtoa_r+0xaa8>
 800b3fc:	462b      	mov	r3, r5
 800b3fe:	461d      	mov	r5, r3
 800b400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b404:	2a30      	cmp	r2, #48	; 0x30
 800b406:	d0fa      	beq.n	800b3fe <_dtoa_r+0xb8e>
 800b408:	e6d7      	b.n	800b1ba <_dtoa_r+0x94a>
 800b40a:	9a01      	ldr	r2, [sp, #4]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d184      	bne.n	800b31a <_dtoa_r+0xaaa>
 800b410:	9b00      	ldr	r3, [sp, #0]
 800b412:	3301      	adds	r3, #1
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	2331      	movs	r3, #49	; 0x31
 800b418:	7013      	strb	r3, [r2, #0]
 800b41a:	e6ce      	b.n	800b1ba <_dtoa_r+0x94a>
 800b41c:	4b09      	ldr	r3, [pc, #36]	; (800b444 <_dtoa_r+0xbd4>)
 800b41e:	f7ff ba95 	b.w	800a94c <_dtoa_r+0xdc>
 800b422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b424:	2b00      	cmp	r3, #0
 800b426:	f47f aa6e 	bne.w	800a906 <_dtoa_r+0x96>
 800b42a:	4b07      	ldr	r3, [pc, #28]	; (800b448 <_dtoa_r+0xbd8>)
 800b42c:	f7ff ba8e 	b.w	800a94c <_dtoa_r+0xdc>
 800b430:	9b02      	ldr	r3, [sp, #8]
 800b432:	2b00      	cmp	r3, #0
 800b434:	dcae      	bgt.n	800b394 <_dtoa_r+0xb24>
 800b436:	9b06      	ldr	r3, [sp, #24]
 800b438:	2b02      	cmp	r3, #2
 800b43a:	f73f aea8 	bgt.w	800b18e <_dtoa_r+0x91e>
 800b43e:	e7a9      	b.n	800b394 <_dtoa_r+0xb24>
 800b440:	0800ec37 	.word	0x0800ec37
 800b444:	0800eb94 	.word	0x0800eb94
 800b448:	0800ebb8 	.word	0x0800ebb8

0800b44c <__sflush_r>:
 800b44c:	898a      	ldrh	r2, [r1, #12]
 800b44e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b452:	4605      	mov	r5, r0
 800b454:	0710      	lsls	r0, r2, #28
 800b456:	460c      	mov	r4, r1
 800b458:	d458      	bmi.n	800b50c <__sflush_r+0xc0>
 800b45a:	684b      	ldr	r3, [r1, #4]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	dc05      	bgt.n	800b46c <__sflush_r+0x20>
 800b460:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b462:	2b00      	cmp	r3, #0
 800b464:	dc02      	bgt.n	800b46c <__sflush_r+0x20>
 800b466:	2000      	movs	r0, #0
 800b468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b46c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b46e:	2e00      	cmp	r6, #0
 800b470:	d0f9      	beq.n	800b466 <__sflush_r+0x1a>
 800b472:	2300      	movs	r3, #0
 800b474:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b478:	682f      	ldr	r7, [r5, #0]
 800b47a:	602b      	str	r3, [r5, #0]
 800b47c:	d032      	beq.n	800b4e4 <__sflush_r+0x98>
 800b47e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b480:	89a3      	ldrh	r3, [r4, #12]
 800b482:	075a      	lsls	r2, r3, #29
 800b484:	d505      	bpl.n	800b492 <__sflush_r+0x46>
 800b486:	6863      	ldr	r3, [r4, #4]
 800b488:	1ac0      	subs	r0, r0, r3
 800b48a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b48c:	b10b      	cbz	r3, 800b492 <__sflush_r+0x46>
 800b48e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b490:	1ac0      	subs	r0, r0, r3
 800b492:	2300      	movs	r3, #0
 800b494:	4602      	mov	r2, r0
 800b496:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b498:	6a21      	ldr	r1, [r4, #32]
 800b49a:	4628      	mov	r0, r5
 800b49c:	47b0      	blx	r6
 800b49e:	1c43      	adds	r3, r0, #1
 800b4a0:	89a3      	ldrh	r3, [r4, #12]
 800b4a2:	d106      	bne.n	800b4b2 <__sflush_r+0x66>
 800b4a4:	6829      	ldr	r1, [r5, #0]
 800b4a6:	291d      	cmp	r1, #29
 800b4a8:	d82c      	bhi.n	800b504 <__sflush_r+0xb8>
 800b4aa:	4a2a      	ldr	r2, [pc, #168]	; (800b554 <__sflush_r+0x108>)
 800b4ac:	40ca      	lsrs	r2, r1
 800b4ae:	07d6      	lsls	r6, r2, #31
 800b4b0:	d528      	bpl.n	800b504 <__sflush_r+0xb8>
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	6062      	str	r2, [r4, #4]
 800b4b6:	04d9      	lsls	r1, r3, #19
 800b4b8:	6922      	ldr	r2, [r4, #16]
 800b4ba:	6022      	str	r2, [r4, #0]
 800b4bc:	d504      	bpl.n	800b4c8 <__sflush_r+0x7c>
 800b4be:	1c42      	adds	r2, r0, #1
 800b4c0:	d101      	bne.n	800b4c6 <__sflush_r+0x7a>
 800b4c2:	682b      	ldr	r3, [r5, #0]
 800b4c4:	b903      	cbnz	r3, 800b4c8 <__sflush_r+0x7c>
 800b4c6:	6560      	str	r0, [r4, #84]	; 0x54
 800b4c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4ca:	602f      	str	r7, [r5, #0]
 800b4cc:	2900      	cmp	r1, #0
 800b4ce:	d0ca      	beq.n	800b466 <__sflush_r+0x1a>
 800b4d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4d4:	4299      	cmp	r1, r3
 800b4d6:	d002      	beq.n	800b4de <__sflush_r+0x92>
 800b4d8:	4628      	mov	r0, r5
 800b4da:	f000 fd7d 	bl	800bfd8 <_free_r>
 800b4de:	2000      	movs	r0, #0
 800b4e0:	6360      	str	r0, [r4, #52]	; 0x34
 800b4e2:	e7c1      	b.n	800b468 <__sflush_r+0x1c>
 800b4e4:	6a21      	ldr	r1, [r4, #32]
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	47b0      	blx	r6
 800b4ec:	1c41      	adds	r1, r0, #1
 800b4ee:	d1c7      	bne.n	800b480 <__sflush_r+0x34>
 800b4f0:	682b      	ldr	r3, [r5, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d0c4      	beq.n	800b480 <__sflush_r+0x34>
 800b4f6:	2b1d      	cmp	r3, #29
 800b4f8:	d001      	beq.n	800b4fe <__sflush_r+0xb2>
 800b4fa:	2b16      	cmp	r3, #22
 800b4fc:	d101      	bne.n	800b502 <__sflush_r+0xb6>
 800b4fe:	602f      	str	r7, [r5, #0]
 800b500:	e7b1      	b.n	800b466 <__sflush_r+0x1a>
 800b502:	89a3      	ldrh	r3, [r4, #12]
 800b504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b508:	81a3      	strh	r3, [r4, #12]
 800b50a:	e7ad      	b.n	800b468 <__sflush_r+0x1c>
 800b50c:	690f      	ldr	r7, [r1, #16]
 800b50e:	2f00      	cmp	r7, #0
 800b510:	d0a9      	beq.n	800b466 <__sflush_r+0x1a>
 800b512:	0793      	lsls	r3, r2, #30
 800b514:	680e      	ldr	r6, [r1, #0]
 800b516:	bf08      	it	eq
 800b518:	694b      	ldreq	r3, [r1, #20]
 800b51a:	600f      	str	r7, [r1, #0]
 800b51c:	bf18      	it	ne
 800b51e:	2300      	movne	r3, #0
 800b520:	eba6 0807 	sub.w	r8, r6, r7
 800b524:	608b      	str	r3, [r1, #8]
 800b526:	f1b8 0f00 	cmp.w	r8, #0
 800b52a:	dd9c      	ble.n	800b466 <__sflush_r+0x1a>
 800b52c:	6a21      	ldr	r1, [r4, #32]
 800b52e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b530:	4643      	mov	r3, r8
 800b532:	463a      	mov	r2, r7
 800b534:	4628      	mov	r0, r5
 800b536:	47b0      	blx	r6
 800b538:	2800      	cmp	r0, #0
 800b53a:	dc06      	bgt.n	800b54a <__sflush_r+0xfe>
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b542:	81a3      	strh	r3, [r4, #12]
 800b544:	f04f 30ff 	mov.w	r0, #4294967295
 800b548:	e78e      	b.n	800b468 <__sflush_r+0x1c>
 800b54a:	4407      	add	r7, r0
 800b54c:	eba8 0800 	sub.w	r8, r8, r0
 800b550:	e7e9      	b.n	800b526 <__sflush_r+0xda>
 800b552:	bf00      	nop
 800b554:	20400001 	.word	0x20400001

0800b558 <_fflush_r>:
 800b558:	b538      	push	{r3, r4, r5, lr}
 800b55a:	690b      	ldr	r3, [r1, #16]
 800b55c:	4605      	mov	r5, r0
 800b55e:	460c      	mov	r4, r1
 800b560:	b913      	cbnz	r3, 800b568 <_fflush_r+0x10>
 800b562:	2500      	movs	r5, #0
 800b564:	4628      	mov	r0, r5
 800b566:	bd38      	pop	{r3, r4, r5, pc}
 800b568:	b118      	cbz	r0, 800b572 <_fflush_r+0x1a>
 800b56a:	6983      	ldr	r3, [r0, #24]
 800b56c:	b90b      	cbnz	r3, 800b572 <_fflush_r+0x1a>
 800b56e:	f000 f887 	bl	800b680 <__sinit>
 800b572:	4b14      	ldr	r3, [pc, #80]	; (800b5c4 <_fflush_r+0x6c>)
 800b574:	429c      	cmp	r4, r3
 800b576:	d11b      	bne.n	800b5b0 <_fflush_r+0x58>
 800b578:	686c      	ldr	r4, [r5, #4]
 800b57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d0ef      	beq.n	800b562 <_fflush_r+0xa>
 800b582:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b584:	07d0      	lsls	r0, r2, #31
 800b586:	d404      	bmi.n	800b592 <_fflush_r+0x3a>
 800b588:	0599      	lsls	r1, r3, #22
 800b58a:	d402      	bmi.n	800b592 <_fflush_r+0x3a>
 800b58c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b58e:	f000 f91a 	bl	800b7c6 <__retarget_lock_acquire_recursive>
 800b592:	4628      	mov	r0, r5
 800b594:	4621      	mov	r1, r4
 800b596:	f7ff ff59 	bl	800b44c <__sflush_r>
 800b59a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b59c:	07da      	lsls	r2, r3, #31
 800b59e:	4605      	mov	r5, r0
 800b5a0:	d4e0      	bmi.n	800b564 <_fflush_r+0xc>
 800b5a2:	89a3      	ldrh	r3, [r4, #12]
 800b5a4:	059b      	lsls	r3, r3, #22
 800b5a6:	d4dd      	bmi.n	800b564 <_fflush_r+0xc>
 800b5a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5aa:	f000 f90d 	bl	800b7c8 <__retarget_lock_release_recursive>
 800b5ae:	e7d9      	b.n	800b564 <_fflush_r+0xc>
 800b5b0:	4b05      	ldr	r3, [pc, #20]	; (800b5c8 <_fflush_r+0x70>)
 800b5b2:	429c      	cmp	r4, r3
 800b5b4:	d101      	bne.n	800b5ba <_fflush_r+0x62>
 800b5b6:	68ac      	ldr	r4, [r5, #8]
 800b5b8:	e7df      	b.n	800b57a <_fflush_r+0x22>
 800b5ba:	4b04      	ldr	r3, [pc, #16]	; (800b5cc <_fflush_r+0x74>)
 800b5bc:	429c      	cmp	r4, r3
 800b5be:	bf08      	it	eq
 800b5c0:	68ec      	ldreq	r4, [r5, #12]
 800b5c2:	e7da      	b.n	800b57a <_fflush_r+0x22>
 800b5c4:	0800ec68 	.word	0x0800ec68
 800b5c8:	0800ec88 	.word	0x0800ec88
 800b5cc:	0800ec48 	.word	0x0800ec48

0800b5d0 <std>:
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	b510      	push	{r4, lr}
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	e9c0 3300 	strd	r3, r3, [r0]
 800b5da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5de:	6083      	str	r3, [r0, #8]
 800b5e0:	8181      	strh	r1, [r0, #12]
 800b5e2:	6643      	str	r3, [r0, #100]	; 0x64
 800b5e4:	81c2      	strh	r2, [r0, #14]
 800b5e6:	6183      	str	r3, [r0, #24]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	2208      	movs	r2, #8
 800b5ec:	305c      	adds	r0, #92	; 0x5c
 800b5ee:	f7fe fae1 	bl	8009bb4 <memset>
 800b5f2:	4b05      	ldr	r3, [pc, #20]	; (800b608 <std+0x38>)
 800b5f4:	6263      	str	r3, [r4, #36]	; 0x24
 800b5f6:	4b05      	ldr	r3, [pc, #20]	; (800b60c <std+0x3c>)
 800b5f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5fa:	4b05      	ldr	r3, [pc, #20]	; (800b610 <std+0x40>)
 800b5fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5fe:	4b05      	ldr	r3, [pc, #20]	; (800b614 <std+0x44>)
 800b600:	6224      	str	r4, [r4, #32]
 800b602:	6323      	str	r3, [r4, #48]	; 0x30
 800b604:	bd10      	pop	{r4, pc}
 800b606:	bf00      	nop
 800b608:	0800c471 	.word	0x0800c471
 800b60c:	0800c493 	.word	0x0800c493
 800b610:	0800c4cb 	.word	0x0800c4cb
 800b614:	0800c4ef 	.word	0x0800c4ef

0800b618 <_cleanup_r>:
 800b618:	4901      	ldr	r1, [pc, #4]	; (800b620 <_cleanup_r+0x8>)
 800b61a:	f000 b8af 	b.w	800b77c <_fwalk_reent>
 800b61e:	bf00      	nop
 800b620:	0800b559 	.word	0x0800b559

0800b624 <__sfmoreglue>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	2268      	movs	r2, #104	; 0x68
 800b628:	1e4d      	subs	r5, r1, #1
 800b62a:	4355      	muls	r5, r2
 800b62c:	460e      	mov	r6, r1
 800b62e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b632:	f000 fd3d 	bl	800c0b0 <_malloc_r>
 800b636:	4604      	mov	r4, r0
 800b638:	b140      	cbz	r0, 800b64c <__sfmoreglue+0x28>
 800b63a:	2100      	movs	r1, #0
 800b63c:	e9c0 1600 	strd	r1, r6, [r0]
 800b640:	300c      	adds	r0, #12
 800b642:	60a0      	str	r0, [r4, #8]
 800b644:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b648:	f7fe fab4 	bl	8009bb4 <memset>
 800b64c:	4620      	mov	r0, r4
 800b64e:	bd70      	pop	{r4, r5, r6, pc}

0800b650 <__sfp_lock_acquire>:
 800b650:	4801      	ldr	r0, [pc, #4]	; (800b658 <__sfp_lock_acquire+0x8>)
 800b652:	f000 b8b8 	b.w	800b7c6 <__retarget_lock_acquire_recursive>
 800b656:	bf00      	nop
 800b658:	20000d15 	.word	0x20000d15

0800b65c <__sfp_lock_release>:
 800b65c:	4801      	ldr	r0, [pc, #4]	; (800b664 <__sfp_lock_release+0x8>)
 800b65e:	f000 b8b3 	b.w	800b7c8 <__retarget_lock_release_recursive>
 800b662:	bf00      	nop
 800b664:	20000d15 	.word	0x20000d15

0800b668 <__sinit_lock_acquire>:
 800b668:	4801      	ldr	r0, [pc, #4]	; (800b670 <__sinit_lock_acquire+0x8>)
 800b66a:	f000 b8ac 	b.w	800b7c6 <__retarget_lock_acquire_recursive>
 800b66e:	bf00      	nop
 800b670:	20000d16 	.word	0x20000d16

0800b674 <__sinit_lock_release>:
 800b674:	4801      	ldr	r0, [pc, #4]	; (800b67c <__sinit_lock_release+0x8>)
 800b676:	f000 b8a7 	b.w	800b7c8 <__retarget_lock_release_recursive>
 800b67a:	bf00      	nop
 800b67c:	20000d16 	.word	0x20000d16

0800b680 <__sinit>:
 800b680:	b510      	push	{r4, lr}
 800b682:	4604      	mov	r4, r0
 800b684:	f7ff fff0 	bl	800b668 <__sinit_lock_acquire>
 800b688:	69a3      	ldr	r3, [r4, #24]
 800b68a:	b11b      	cbz	r3, 800b694 <__sinit+0x14>
 800b68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b690:	f7ff bff0 	b.w	800b674 <__sinit_lock_release>
 800b694:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b698:	6523      	str	r3, [r4, #80]	; 0x50
 800b69a:	4b13      	ldr	r3, [pc, #76]	; (800b6e8 <__sinit+0x68>)
 800b69c:	4a13      	ldr	r2, [pc, #76]	; (800b6ec <__sinit+0x6c>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b6a2:	42a3      	cmp	r3, r4
 800b6a4:	bf04      	itt	eq
 800b6a6:	2301      	moveq	r3, #1
 800b6a8:	61a3      	streq	r3, [r4, #24]
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 f820 	bl	800b6f0 <__sfp>
 800b6b0:	6060      	str	r0, [r4, #4]
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f000 f81c 	bl	800b6f0 <__sfp>
 800b6b8:	60a0      	str	r0, [r4, #8]
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f000 f818 	bl	800b6f0 <__sfp>
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	60e0      	str	r0, [r4, #12]
 800b6c4:	2104      	movs	r1, #4
 800b6c6:	6860      	ldr	r0, [r4, #4]
 800b6c8:	f7ff ff82 	bl	800b5d0 <std>
 800b6cc:	68a0      	ldr	r0, [r4, #8]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	2109      	movs	r1, #9
 800b6d2:	f7ff ff7d 	bl	800b5d0 <std>
 800b6d6:	68e0      	ldr	r0, [r4, #12]
 800b6d8:	2202      	movs	r2, #2
 800b6da:	2112      	movs	r1, #18
 800b6dc:	f7ff ff78 	bl	800b5d0 <std>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	61a3      	str	r3, [r4, #24]
 800b6e4:	e7d2      	b.n	800b68c <__sinit+0xc>
 800b6e6:	bf00      	nop
 800b6e8:	0800eb80 	.word	0x0800eb80
 800b6ec:	0800b619 	.word	0x0800b619

0800b6f0 <__sfp>:
 800b6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f2:	4607      	mov	r7, r0
 800b6f4:	f7ff ffac 	bl	800b650 <__sfp_lock_acquire>
 800b6f8:	4b1e      	ldr	r3, [pc, #120]	; (800b774 <__sfp+0x84>)
 800b6fa:	681e      	ldr	r6, [r3, #0]
 800b6fc:	69b3      	ldr	r3, [r6, #24]
 800b6fe:	b913      	cbnz	r3, 800b706 <__sfp+0x16>
 800b700:	4630      	mov	r0, r6
 800b702:	f7ff ffbd 	bl	800b680 <__sinit>
 800b706:	3648      	adds	r6, #72	; 0x48
 800b708:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b70c:	3b01      	subs	r3, #1
 800b70e:	d503      	bpl.n	800b718 <__sfp+0x28>
 800b710:	6833      	ldr	r3, [r6, #0]
 800b712:	b30b      	cbz	r3, 800b758 <__sfp+0x68>
 800b714:	6836      	ldr	r6, [r6, #0]
 800b716:	e7f7      	b.n	800b708 <__sfp+0x18>
 800b718:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b71c:	b9d5      	cbnz	r5, 800b754 <__sfp+0x64>
 800b71e:	4b16      	ldr	r3, [pc, #88]	; (800b778 <__sfp+0x88>)
 800b720:	60e3      	str	r3, [r4, #12]
 800b722:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b726:	6665      	str	r5, [r4, #100]	; 0x64
 800b728:	f000 f84c 	bl	800b7c4 <__retarget_lock_init_recursive>
 800b72c:	f7ff ff96 	bl	800b65c <__sfp_lock_release>
 800b730:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b734:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b738:	6025      	str	r5, [r4, #0]
 800b73a:	61a5      	str	r5, [r4, #24]
 800b73c:	2208      	movs	r2, #8
 800b73e:	4629      	mov	r1, r5
 800b740:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b744:	f7fe fa36 	bl	8009bb4 <memset>
 800b748:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b74c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b750:	4620      	mov	r0, r4
 800b752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b754:	3468      	adds	r4, #104	; 0x68
 800b756:	e7d9      	b.n	800b70c <__sfp+0x1c>
 800b758:	2104      	movs	r1, #4
 800b75a:	4638      	mov	r0, r7
 800b75c:	f7ff ff62 	bl	800b624 <__sfmoreglue>
 800b760:	4604      	mov	r4, r0
 800b762:	6030      	str	r0, [r6, #0]
 800b764:	2800      	cmp	r0, #0
 800b766:	d1d5      	bne.n	800b714 <__sfp+0x24>
 800b768:	f7ff ff78 	bl	800b65c <__sfp_lock_release>
 800b76c:	230c      	movs	r3, #12
 800b76e:	603b      	str	r3, [r7, #0]
 800b770:	e7ee      	b.n	800b750 <__sfp+0x60>
 800b772:	bf00      	nop
 800b774:	0800eb80 	.word	0x0800eb80
 800b778:	ffff0001 	.word	0xffff0001

0800b77c <_fwalk_reent>:
 800b77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b780:	4606      	mov	r6, r0
 800b782:	4688      	mov	r8, r1
 800b784:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b788:	2700      	movs	r7, #0
 800b78a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b78e:	f1b9 0901 	subs.w	r9, r9, #1
 800b792:	d505      	bpl.n	800b7a0 <_fwalk_reent+0x24>
 800b794:	6824      	ldr	r4, [r4, #0]
 800b796:	2c00      	cmp	r4, #0
 800b798:	d1f7      	bne.n	800b78a <_fwalk_reent+0xe>
 800b79a:	4638      	mov	r0, r7
 800b79c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7a0:	89ab      	ldrh	r3, [r5, #12]
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d907      	bls.n	800b7b6 <_fwalk_reent+0x3a>
 800b7a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	d003      	beq.n	800b7b6 <_fwalk_reent+0x3a>
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	47c0      	blx	r8
 800b7b4:	4307      	orrs	r7, r0
 800b7b6:	3568      	adds	r5, #104	; 0x68
 800b7b8:	e7e9      	b.n	800b78e <_fwalk_reent+0x12>
	...

0800b7bc <_localeconv_r>:
 800b7bc:	4800      	ldr	r0, [pc, #0]	; (800b7c0 <_localeconv_r+0x4>)
 800b7be:	4770      	bx	lr
 800b7c0:	20000440 	.word	0x20000440

0800b7c4 <__retarget_lock_init_recursive>:
 800b7c4:	4770      	bx	lr

0800b7c6 <__retarget_lock_acquire_recursive>:
 800b7c6:	4770      	bx	lr

0800b7c8 <__retarget_lock_release_recursive>:
 800b7c8:	4770      	bx	lr

0800b7ca <__swhatbuf_r>:
 800b7ca:	b570      	push	{r4, r5, r6, lr}
 800b7cc:	460e      	mov	r6, r1
 800b7ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d2:	2900      	cmp	r1, #0
 800b7d4:	b096      	sub	sp, #88	; 0x58
 800b7d6:	4614      	mov	r4, r2
 800b7d8:	461d      	mov	r5, r3
 800b7da:	da08      	bge.n	800b7ee <__swhatbuf_r+0x24>
 800b7dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	602a      	str	r2, [r5, #0]
 800b7e4:	061a      	lsls	r2, r3, #24
 800b7e6:	d410      	bmi.n	800b80a <__swhatbuf_r+0x40>
 800b7e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7ec:	e00e      	b.n	800b80c <__swhatbuf_r+0x42>
 800b7ee:	466a      	mov	r2, sp
 800b7f0:	f000 fed4 	bl	800c59c <_fstat_r>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	dbf1      	blt.n	800b7dc <__swhatbuf_r+0x12>
 800b7f8:	9a01      	ldr	r2, [sp, #4]
 800b7fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b802:	425a      	negs	r2, r3
 800b804:	415a      	adcs	r2, r3
 800b806:	602a      	str	r2, [r5, #0]
 800b808:	e7ee      	b.n	800b7e8 <__swhatbuf_r+0x1e>
 800b80a:	2340      	movs	r3, #64	; 0x40
 800b80c:	2000      	movs	r0, #0
 800b80e:	6023      	str	r3, [r4, #0]
 800b810:	b016      	add	sp, #88	; 0x58
 800b812:	bd70      	pop	{r4, r5, r6, pc}

0800b814 <__smakebuf_r>:
 800b814:	898b      	ldrh	r3, [r1, #12]
 800b816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b818:	079d      	lsls	r5, r3, #30
 800b81a:	4606      	mov	r6, r0
 800b81c:	460c      	mov	r4, r1
 800b81e:	d507      	bpl.n	800b830 <__smakebuf_r+0x1c>
 800b820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	6123      	str	r3, [r4, #16]
 800b828:	2301      	movs	r3, #1
 800b82a:	6163      	str	r3, [r4, #20]
 800b82c:	b002      	add	sp, #8
 800b82e:	bd70      	pop	{r4, r5, r6, pc}
 800b830:	ab01      	add	r3, sp, #4
 800b832:	466a      	mov	r2, sp
 800b834:	f7ff ffc9 	bl	800b7ca <__swhatbuf_r>
 800b838:	9900      	ldr	r1, [sp, #0]
 800b83a:	4605      	mov	r5, r0
 800b83c:	4630      	mov	r0, r6
 800b83e:	f000 fc37 	bl	800c0b0 <_malloc_r>
 800b842:	b948      	cbnz	r0, 800b858 <__smakebuf_r+0x44>
 800b844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b848:	059a      	lsls	r2, r3, #22
 800b84a:	d4ef      	bmi.n	800b82c <__smakebuf_r+0x18>
 800b84c:	f023 0303 	bic.w	r3, r3, #3
 800b850:	f043 0302 	orr.w	r3, r3, #2
 800b854:	81a3      	strh	r3, [r4, #12]
 800b856:	e7e3      	b.n	800b820 <__smakebuf_r+0xc>
 800b858:	4b0d      	ldr	r3, [pc, #52]	; (800b890 <__smakebuf_r+0x7c>)
 800b85a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b85c:	89a3      	ldrh	r3, [r4, #12]
 800b85e:	6020      	str	r0, [r4, #0]
 800b860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b864:	81a3      	strh	r3, [r4, #12]
 800b866:	9b00      	ldr	r3, [sp, #0]
 800b868:	6163      	str	r3, [r4, #20]
 800b86a:	9b01      	ldr	r3, [sp, #4]
 800b86c:	6120      	str	r0, [r4, #16]
 800b86e:	b15b      	cbz	r3, 800b888 <__smakebuf_r+0x74>
 800b870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b874:	4630      	mov	r0, r6
 800b876:	f000 fea3 	bl	800c5c0 <_isatty_r>
 800b87a:	b128      	cbz	r0, 800b888 <__smakebuf_r+0x74>
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	f023 0303 	bic.w	r3, r3, #3
 800b882:	f043 0301 	orr.w	r3, r3, #1
 800b886:	81a3      	strh	r3, [r4, #12]
 800b888:	89a0      	ldrh	r0, [r4, #12]
 800b88a:	4305      	orrs	r5, r0
 800b88c:	81a5      	strh	r5, [r4, #12]
 800b88e:	e7cd      	b.n	800b82c <__smakebuf_r+0x18>
 800b890:	0800b619 	.word	0x0800b619

0800b894 <malloc>:
 800b894:	4b02      	ldr	r3, [pc, #8]	; (800b8a0 <malloc+0xc>)
 800b896:	4601      	mov	r1, r0
 800b898:	6818      	ldr	r0, [r3, #0]
 800b89a:	f000 bc09 	b.w	800c0b0 <_malloc_r>
 800b89e:	bf00      	nop
 800b8a0:	200002ec 	.word	0x200002ec

0800b8a4 <_Balloc>:
 800b8a4:	b570      	push	{r4, r5, r6, lr}
 800b8a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	460d      	mov	r5, r1
 800b8ac:	b976      	cbnz	r6, 800b8cc <_Balloc+0x28>
 800b8ae:	2010      	movs	r0, #16
 800b8b0:	f7ff fff0 	bl	800b894 <malloc>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	6260      	str	r0, [r4, #36]	; 0x24
 800b8b8:	b920      	cbnz	r0, 800b8c4 <_Balloc+0x20>
 800b8ba:	4b18      	ldr	r3, [pc, #96]	; (800b91c <_Balloc+0x78>)
 800b8bc:	4818      	ldr	r0, [pc, #96]	; (800b920 <_Balloc+0x7c>)
 800b8be:	2166      	movs	r1, #102	; 0x66
 800b8c0:	f000 fe2c 	bl	800c51c <__assert_func>
 800b8c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8c8:	6006      	str	r6, [r0, #0]
 800b8ca:	60c6      	str	r6, [r0, #12]
 800b8cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b8ce:	68f3      	ldr	r3, [r6, #12]
 800b8d0:	b183      	cbz	r3, 800b8f4 <_Balloc+0x50>
 800b8d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8da:	b9b8      	cbnz	r0, 800b90c <_Balloc+0x68>
 800b8dc:	2101      	movs	r1, #1
 800b8de:	fa01 f605 	lsl.w	r6, r1, r5
 800b8e2:	1d72      	adds	r2, r6, #5
 800b8e4:	0092      	lsls	r2, r2, #2
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f000 fb60 	bl	800bfac <_calloc_r>
 800b8ec:	b160      	cbz	r0, 800b908 <_Balloc+0x64>
 800b8ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8f2:	e00e      	b.n	800b912 <_Balloc+0x6e>
 800b8f4:	2221      	movs	r2, #33	; 0x21
 800b8f6:	2104      	movs	r1, #4
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f000 fb57 	bl	800bfac <_calloc_r>
 800b8fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b900:	60f0      	str	r0, [r6, #12]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1e4      	bne.n	800b8d2 <_Balloc+0x2e>
 800b908:	2000      	movs	r0, #0
 800b90a:	bd70      	pop	{r4, r5, r6, pc}
 800b90c:	6802      	ldr	r2, [r0, #0]
 800b90e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b912:	2300      	movs	r3, #0
 800b914:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b918:	e7f7      	b.n	800b90a <_Balloc+0x66>
 800b91a:	bf00      	nop
 800b91c:	0800ebc5 	.word	0x0800ebc5
 800b920:	0800eca8 	.word	0x0800eca8

0800b924 <_Bfree>:
 800b924:	b570      	push	{r4, r5, r6, lr}
 800b926:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b928:	4605      	mov	r5, r0
 800b92a:	460c      	mov	r4, r1
 800b92c:	b976      	cbnz	r6, 800b94c <_Bfree+0x28>
 800b92e:	2010      	movs	r0, #16
 800b930:	f7ff ffb0 	bl	800b894 <malloc>
 800b934:	4602      	mov	r2, r0
 800b936:	6268      	str	r0, [r5, #36]	; 0x24
 800b938:	b920      	cbnz	r0, 800b944 <_Bfree+0x20>
 800b93a:	4b09      	ldr	r3, [pc, #36]	; (800b960 <_Bfree+0x3c>)
 800b93c:	4809      	ldr	r0, [pc, #36]	; (800b964 <_Bfree+0x40>)
 800b93e:	218a      	movs	r1, #138	; 0x8a
 800b940:	f000 fdec 	bl	800c51c <__assert_func>
 800b944:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b948:	6006      	str	r6, [r0, #0]
 800b94a:	60c6      	str	r6, [r0, #12]
 800b94c:	b13c      	cbz	r4, 800b95e <_Bfree+0x3a>
 800b94e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b950:	6862      	ldr	r2, [r4, #4]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b958:	6021      	str	r1, [r4, #0]
 800b95a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b95e:	bd70      	pop	{r4, r5, r6, pc}
 800b960:	0800ebc5 	.word	0x0800ebc5
 800b964:	0800eca8 	.word	0x0800eca8

0800b968 <__multadd>:
 800b968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b96c:	690d      	ldr	r5, [r1, #16]
 800b96e:	4607      	mov	r7, r0
 800b970:	460c      	mov	r4, r1
 800b972:	461e      	mov	r6, r3
 800b974:	f101 0c14 	add.w	ip, r1, #20
 800b978:	2000      	movs	r0, #0
 800b97a:	f8dc 3000 	ldr.w	r3, [ip]
 800b97e:	b299      	uxth	r1, r3
 800b980:	fb02 6101 	mla	r1, r2, r1, r6
 800b984:	0c1e      	lsrs	r6, r3, #16
 800b986:	0c0b      	lsrs	r3, r1, #16
 800b988:	fb02 3306 	mla	r3, r2, r6, r3
 800b98c:	b289      	uxth	r1, r1
 800b98e:	3001      	adds	r0, #1
 800b990:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b994:	4285      	cmp	r5, r0
 800b996:	f84c 1b04 	str.w	r1, [ip], #4
 800b99a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b99e:	dcec      	bgt.n	800b97a <__multadd+0x12>
 800b9a0:	b30e      	cbz	r6, 800b9e6 <__multadd+0x7e>
 800b9a2:	68a3      	ldr	r3, [r4, #8]
 800b9a4:	42ab      	cmp	r3, r5
 800b9a6:	dc19      	bgt.n	800b9dc <__multadd+0x74>
 800b9a8:	6861      	ldr	r1, [r4, #4]
 800b9aa:	4638      	mov	r0, r7
 800b9ac:	3101      	adds	r1, #1
 800b9ae:	f7ff ff79 	bl	800b8a4 <_Balloc>
 800b9b2:	4680      	mov	r8, r0
 800b9b4:	b928      	cbnz	r0, 800b9c2 <__multadd+0x5a>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	4b0c      	ldr	r3, [pc, #48]	; (800b9ec <__multadd+0x84>)
 800b9ba:	480d      	ldr	r0, [pc, #52]	; (800b9f0 <__multadd+0x88>)
 800b9bc:	21b5      	movs	r1, #181	; 0xb5
 800b9be:	f000 fdad 	bl	800c51c <__assert_func>
 800b9c2:	6922      	ldr	r2, [r4, #16]
 800b9c4:	3202      	adds	r2, #2
 800b9c6:	f104 010c 	add.w	r1, r4, #12
 800b9ca:	0092      	lsls	r2, r2, #2
 800b9cc:	300c      	adds	r0, #12
 800b9ce:	f7fe f8c9 	bl	8009b64 <memcpy>
 800b9d2:	4621      	mov	r1, r4
 800b9d4:	4638      	mov	r0, r7
 800b9d6:	f7ff ffa5 	bl	800b924 <_Bfree>
 800b9da:	4644      	mov	r4, r8
 800b9dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9e0:	3501      	adds	r5, #1
 800b9e2:	615e      	str	r6, [r3, #20]
 800b9e4:	6125      	str	r5, [r4, #16]
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ec:	0800ec37 	.word	0x0800ec37
 800b9f0:	0800eca8 	.word	0x0800eca8

0800b9f4 <__hi0bits>:
 800b9f4:	0c03      	lsrs	r3, r0, #16
 800b9f6:	041b      	lsls	r3, r3, #16
 800b9f8:	b9d3      	cbnz	r3, 800ba30 <__hi0bits+0x3c>
 800b9fa:	0400      	lsls	r0, r0, #16
 800b9fc:	2310      	movs	r3, #16
 800b9fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ba02:	bf04      	itt	eq
 800ba04:	0200      	lsleq	r0, r0, #8
 800ba06:	3308      	addeq	r3, #8
 800ba08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ba0c:	bf04      	itt	eq
 800ba0e:	0100      	lsleq	r0, r0, #4
 800ba10:	3304      	addeq	r3, #4
 800ba12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ba16:	bf04      	itt	eq
 800ba18:	0080      	lsleq	r0, r0, #2
 800ba1a:	3302      	addeq	r3, #2
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	db05      	blt.n	800ba2c <__hi0bits+0x38>
 800ba20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ba24:	f103 0301 	add.w	r3, r3, #1
 800ba28:	bf08      	it	eq
 800ba2a:	2320      	moveq	r3, #32
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	4770      	bx	lr
 800ba30:	2300      	movs	r3, #0
 800ba32:	e7e4      	b.n	800b9fe <__hi0bits+0xa>

0800ba34 <__lo0bits>:
 800ba34:	6803      	ldr	r3, [r0, #0]
 800ba36:	f013 0207 	ands.w	r2, r3, #7
 800ba3a:	4601      	mov	r1, r0
 800ba3c:	d00b      	beq.n	800ba56 <__lo0bits+0x22>
 800ba3e:	07da      	lsls	r2, r3, #31
 800ba40:	d423      	bmi.n	800ba8a <__lo0bits+0x56>
 800ba42:	0798      	lsls	r0, r3, #30
 800ba44:	bf49      	itett	mi
 800ba46:	085b      	lsrmi	r3, r3, #1
 800ba48:	089b      	lsrpl	r3, r3, #2
 800ba4a:	2001      	movmi	r0, #1
 800ba4c:	600b      	strmi	r3, [r1, #0]
 800ba4e:	bf5c      	itt	pl
 800ba50:	600b      	strpl	r3, [r1, #0]
 800ba52:	2002      	movpl	r0, #2
 800ba54:	4770      	bx	lr
 800ba56:	b298      	uxth	r0, r3
 800ba58:	b9a8      	cbnz	r0, 800ba86 <__lo0bits+0x52>
 800ba5a:	0c1b      	lsrs	r3, r3, #16
 800ba5c:	2010      	movs	r0, #16
 800ba5e:	b2da      	uxtb	r2, r3
 800ba60:	b90a      	cbnz	r2, 800ba66 <__lo0bits+0x32>
 800ba62:	3008      	adds	r0, #8
 800ba64:	0a1b      	lsrs	r3, r3, #8
 800ba66:	071a      	lsls	r2, r3, #28
 800ba68:	bf04      	itt	eq
 800ba6a:	091b      	lsreq	r3, r3, #4
 800ba6c:	3004      	addeq	r0, #4
 800ba6e:	079a      	lsls	r2, r3, #30
 800ba70:	bf04      	itt	eq
 800ba72:	089b      	lsreq	r3, r3, #2
 800ba74:	3002      	addeq	r0, #2
 800ba76:	07da      	lsls	r2, r3, #31
 800ba78:	d403      	bmi.n	800ba82 <__lo0bits+0x4e>
 800ba7a:	085b      	lsrs	r3, r3, #1
 800ba7c:	f100 0001 	add.w	r0, r0, #1
 800ba80:	d005      	beq.n	800ba8e <__lo0bits+0x5a>
 800ba82:	600b      	str	r3, [r1, #0]
 800ba84:	4770      	bx	lr
 800ba86:	4610      	mov	r0, r2
 800ba88:	e7e9      	b.n	800ba5e <__lo0bits+0x2a>
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	4770      	bx	lr
 800ba8e:	2020      	movs	r0, #32
 800ba90:	4770      	bx	lr
	...

0800ba94 <__i2b>:
 800ba94:	b510      	push	{r4, lr}
 800ba96:	460c      	mov	r4, r1
 800ba98:	2101      	movs	r1, #1
 800ba9a:	f7ff ff03 	bl	800b8a4 <_Balloc>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	b928      	cbnz	r0, 800baae <__i2b+0x1a>
 800baa2:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <__i2b+0x24>)
 800baa4:	4805      	ldr	r0, [pc, #20]	; (800babc <__i2b+0x28>)
 800baa6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800baaa:	f000 fd37 	bl	800c51c <__assert_func>
 800baae:	2301      	movs	r3, #1
 800bab0:	6144      	str	r4, [r0, #20]
 800bab2:	6103      	str	r3, [r0, #16]
 800bab4:	bd10      	pop	{r4, pc}
 800bab6:	bf00      	nop
 800bab8:	0800ec37 	.word	0x0800ec37
 800babc:	0800eca8 	.word	0x0800eca8

0800bac0 <__multiply>:
 800bac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac4:	4691      	mov	r9, r2
 800bac6:	690a      	ldr	r2, [r1, #16]
 800bac8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bacc:	429a      	cmp	r2, r3
 800bace:	bfb8      	it	lt
 800bad0:	460b      	movlt	r3, r1
 800bad2:	460c      	mov	r4, r1
 800bad4:	bfbc      	itt	lt
 800bad6:	464c      	movlt	r4, r9
 800bad8:	4699      	movlt	r9, r3
 800bada:	6927      	ldr	r7, [r4, #16]
 800badc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bae0:	68a3      	ldr	r3, [r4, #8]
 800bae2:	6861      	ldr	r1, [r4, #4]
 800bae4:	eb07 060a 	add.w	r6, r7, sl
 800bae8:	42b3      	cmp	r3, r6
 800baea:	b085      	sub	sp, #20
 800baec:	bfb8      	it	lt
 800baee:	3101      	addlt	r1, #1
 800baf0:	f7ff fed8 	bl	800b8a4 <_Balloc>
 800baf4:	b930      	cbnz	r0, 800bb04 <__multiply+0x44>
 800baf6:	4602      	mov	r2, r0
 800baf8:	4b44      	ldr	r3, [pc, #272]	; (800bc0c <__multiply+0x14c>)
 800bafa:	4845      	ldr	r0, [pc, #276]	; (800bc10 <__multiply+0x150>)
 800bafc:	f240 115d 	movw	r1, #349	; 0x15d
 800bb00:	f000 fd0c 	bl	800c51c <__assert_func>
 800bb04:	f100 0514 	add.w	r5, r0, #20
 800bb08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb0c:	462b      	mov	r3, r5
 800bb0e:	2200      	movs	r2, #0
 800bb10:	4543      	cmp	r3, r8
 800bb12:	d321      	bcc.n	800bb58 <__multiply+0x98>
 800bb14:	f104 0314 	add.w	r3, r4, #20
 800bb18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bb1c:	f109 0314 	add.w	r3, r9, #20
 800bb20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bb24:	9202      	str	r2, [sp, #8]
 800bb26:	1b3a      	subs	r2, r7, r4
 800bb28:	3a15      	subs	r2, #21
 800bb2a:	f022 0203 	bic.w	r2, r2, #3
 800bb2e:	3204      	adds	r2, #4
 800bb30:	f104 0115 	add.w	r1, r4, #21
 800bb34:	428f      	cmp	r7, r1
 800bb36:	bf38      	it	cc
 800bb38:	2204      	movcc	r2, #4
 800bb3a:	9201      	str	r2, [sp, #4]
 800bb3c:	9a02      	ldr	r2, [sp, #8]
 800bb3e:	9303      	str	r3, [sp, #12]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d80c      	bhi.n	800bb5e <__multiply+0x9e>
 800bb44:	2e00      	cmp	r6, #0
 800bb46:	dd03      	ble.n	800bb50 <__multiply+0x90>
 800bb48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d05a      	beq.n	800bc06 <__multiply+0x146>
 800bb50:	6106      	str	r6, [r0, #16]
 800bb52:	b005      	add	sp, #20
 800bb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb58:	f843 2b04 	str.w	r2, [r3], #4
 800bb5c:	e7d8      	b.n	800bb10 <__multiply+0x50>
 800bb5e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bb62:	f1ba 0f00 	cmp.w	sl, #0
 800bb66:	d024      	beq.n	800bbb2 <__multiply+0xf2>
 800bb68:	f104 0e14 	add.w	lr, r4, #20
 800bb6c:	46a9      	mov	r9, r5
 800bb6e:	f04f 0c00 	mov.w	ip, #0
 800bb72:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bb76:	f8d9 1000 	ldr.w	r1, [r9]
 800bb7a:	fa1f fb82 	uxth.w	fp, r2
 800bb7e:	b289      	uxth	r1, r1
 800bb80:	fb0a 110b 	mla	r1, sl, fp, r1
 800bb84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bb88:	f8d9 2000 	ldr.w	r2, [r9]
 800bb8c:	4461      	add	r1, ip
 800bb8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb92:	fb0a c20b 	mla	r2, sl, fp, ip
 800bb96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bb9a:	b289      	uxth	r1, r1
 800bb9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bba0:	4577      	cmp	r7, lr
 800bba2:	f849 1b04 	str.w	r1, [r9], #4
 800bba6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bbaa:	d8e2      	bhi.n	800bb72 <__multiply+0xb2>
 800bbac:	9a01      	ldr	r2, [sp, #4]
 800bbae:	f845 c002 	str.w	ip, [r5, r2]
 800bbb2:	9a03      	ldr	r2, [sp, #12]
 800bbb4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bbb8:	3304      	adds	r3, #4
 800bbba:	f1b9 0f00 	cmp.w	r9, #0
 800bbbe:	d020      	beq.n	800bc02 <__multiply+0x142>
 800bbc0:	6829      	ldr	r1, [r5, #0]
 800bbc2:	f104 0c14 	add.w	ip, r4, #20
 800bbc6:	46ae      	mov	lr, r5
 800bbc8:	f04f 0a00 	mov.w	sl, #0
 800bbcc:	f8bc b000 	ldrh.w	fp, [ip]
 800bbd0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bbd4:	fb09 220b 	mla	r2, r9, fp, r2
 800bbd8:	4492      	add	sl, r2
 800bbda:	b289      	uxth	r1, r1
 800bbdc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bbe0:	f84e 1b04 	str.w	r1, [lr], #4
 800bbe4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bbe8:	f8be 1000 	ldrh.w	r1, [lr]
 800bbec:	0c12      	lsrs	r2, r2, #16
 800bbee:	fb09 1102 	mla	r1, r9, r2, r1
 800bbf2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bbf6:	4567      	cmp	r7, ip
 800bbf8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bbfc:	d8e6      	bhi.n	800bbcc <__multiply+0x10c>
 800bbfe:	9a01      	ldr	r2, [sp, #4]
 800bc00:	50a9      	str	r1, [r5, r2]
 800bc02:	3504      	adds	r5, #4
 800bc04:	e79a      	b.n	800bb3c <__multiply+0x7c>
 800bc06:	3e01      	subs	r6, #1
 800bc08:	e79c      	b.n	800bb44 <__multiply+0x84>
 800bc0a:	bf00      	nop
 800bc0c:	0800ec37 	.word	0x0800ec37
 800bc10:	0800eca8 	.word	0x0800eca8

0800bc14 <__pow5mult>:
 800bc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc18:	4615      	mov	r5, r2
 800bc1a:	f012 0203 	ands.w	r2, r2, #3
 800bc1e:	4606      	mov	r6, r0
 800bc20:	460f      	mov	r7, r1
 800bc22:	d007      	beq.n	800bc34 <__pow5mult+0x20>
 800bc24:	4c25      	ldr	r4, [pc, #148]	; (800bcbc <__pow5mult+0xa8>)
 800bc26:	3a01      	subs	r2, #1
 800bc28:	2300      	movs	r3, #0
 800bc2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc2e:	f7ff fe9b 	bl	800b968 <__multadd>
 800bc32:	4607      	mov	r7, r0
 800bc34:	10ad      	asrs	r5, r5, #2
 800bc36:	d03d      	beq.n	800bcb4 <__pow5mult+0xa0>
 800bc38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bc3a:	b97c      	cbnz	r4, 800bc5c <__pow5mult+0x48>
 800bc3c:	2010      	movs	r0, #16
 800bc3e:	f7ff fe29 	bl	800b894 <malloc>
 800bc42:	4602      	mov	r2, r0
 800bc44:	6270      	str	r0, [r6, #36]	; 0x24
 800bc46:	b928      	cbnz	r0, 800bc54 <__pow5mult+0x40>
 800bc48:	4b1d      	ldr	r3, [pc, #116]	; (800bcc0 <__pow5mult+0xac>)
 800bc4a:	481e      	ldr	r0, [pc, #120]	; (800bcc4 <__pow5mult+0xb0>)
 800bc4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bc50:	f000 fc64 	bl	800c51c <__assert_func>
 800bc54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc58:	6004      	str	r4, [r0, #0]
 800bc5a:	60c4      	str	r4, [r0, #12]
 800bc5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bc60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc64:	b94c      	cbnz	r4, 800bc7a <__pow5mult+0x66>
 800bc66:	f240 2171 	movw	r1, #625	; 0x271
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	f7ff ff12 	bl	800ba94 <__i2b>
 800bc70:	2300      	movs	r3, #0
 800bc72:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc76:	4604      	mov	r4, r0
 800bc78:	6003      	str	r3, [r0, #0]
 800bc7a:	f04f 0900 	mov.w	r9, #0
 800bc7e:	07eb      	lsls	r3, r5, #31
 800bc80:	d50a      	bpl.n	800bc98 <__pow5mult+0x84>
 800bc82:	4639      	mov	r1, r7
 800bc84:	4622      	mov	r2, r4
 800bc86:	4630      	mov	r0, r6
 800bc88:	f7ff ff1a 	bl	800bac0 <__multiply>
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	4680      	mov	r8, r0
 800bc90:	4630      	mov	r0, r6
 800bc92:	f7ff fe47 	bl	800b924 <_Bfree>
 800bc96:	4647      	mov	r7, r8
 800bc98:	106d      	asrs	r5, r5, #1
 800bc9a:	d00b      	beq.n	800bcb4 <__pow5mult+0xa0>
 800bc9c:	6820      	ldr	r0, [r4, #0]
 800bc9e:	b938      	cbnz	r0, 800bcb0 <__pow5mult+0x9c>
 800bca0:	4622      	mov	r2, r4
 800bca2:	4621      	mov	r1, r4
 800bca4:	4630      	mov	r0, r6
 800bca6:	f7ff ff0b 	bl	800bac0 <__multiply>
 800bcaa:	6020      	str	r0, [r4, #0]
 800bcac:	f8c0 9000 	str.w	r9, [r0]
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	e7e4      	b.n	800bc7e <__pow5mult+0x6a>
 800bcb4:	4638      	mov	r0, r7
 800bcb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcba:	bf00      	nop
 800bcbc:	0800edf8 	.word	0x0800edf8
 800bcc0:	0800ebc5 	.word	0x0800ebc5
 800bcc4:	0800eca8 	.word	0x0800eca8

0800bcc8 <__lshift>:
 800bcc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bccc:	460c      	mov	r4, r1
 800bcce:	6849      	ldr	r1, [r1, #4]
 800bcd0:	6923      	ldr	r3, [r4, #16]
 800bcd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcd6:	68a3      	ldr	r3, [r4, #8]
 800bcd8:	4607      	mov	r7, r0
 800bcda:	4691      	mov	r9, r2
 800bcdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bce0:	f108 0601 	add.w	r6, r8, #1
 800bce4:	42b3      	cmp	r3, r6
 800bce6:	db0b      	blt.n	800bd00 <__lshift+0x38>
 800bce8:	4638      	mov	r0, r7
 800bcea:	f7ff fddb 	bl	800b8a4 <_Balloc>
 800bcee:	4605      	mov	r5, r0
 800bcf0:	b948      	cbnz	r0, 800bd06 <__lshift+0x3e>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	4b2a      	ldr	r3, [pc, #168]	; (800bda0 <__lshift+0xd8>)
 800bcf6:	482b      	ldr	r0, [pc, #172]	; (800bda4 <__lshift+0xdc>)
 800bcf8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bcfc:	f000 fc0e 	bl	800c51c <__assert_func>
 800bd00:	3101      	adds	r1, #1
 800bd02:	005b      	lsls	r3, r3, #1
 800bd04:	e7ee      	b.n	800bce4 <__lshift+0x1c>
 800bd06:	2300      	movs	r3, #0
 800bd08:	f100 0114 	add.w	r1, r0, #20
 800bd0c:	f100 0210 	add.w	r2, r0, #16
 800bd10:	4618      	mov	r0, r3
 800bd12:	4553      	cmp	r3, sl
 800bd14:	db37      	blt.n	800bd86 <__lshift+0xbe>
 800bd16:	6920      	ldr	r0, [r4, #16]
 800bd18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd1c:	f104 0314 	add.w	r3, r4, #20
 800bd20:	f019 091f 	ands.w	r9, r9, #31
 800bd24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bd2c:	d02f      	beq.n	800bd8e <__lshift+0xc6>
 800bd2e:	f1c9 0e20 	rsb	lr, r9, #32
 800bd32:	468a      	mov	sl, r1
 800bd34:	f04f 0c00 	mov.w	ip, #0
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	fa02 f209 	lsl.w	r2, r2, r9
 800bd3e:	ea42 020c 	orr.w	r2, r2, ip
 800bd42:	f84a 2b04 	str.w	r2, [sl], #4
 800bd46:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd4a:	4298      	cmp	r0, r3
 800bd4c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bd50:	d8f2      	bhi.n	800bd38 <__lshift+0x70>
 800bd52:	1b03      	subs	r3, r0, r4
 800bd54:	3b15      	subs	r3, #21
 800bd56:	f023 0303 	bic.w	r3, r3, #3
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	f104 0215 	add.w	r2, r4, #21
 800bd60:	4290      	cmp	r0, r2
 800bd62:	bf38      	it	cc
 800bd64:	2304      	movcc	r3, #4
 800bd66:	f841 c003 	str.w	ip, [r1, r3]
 800bd6a:	f1bc 0f00 	cmp.w	ip, #0
 800bd6e:	d001      	beq.n	800bd74 <__lshift+0xac>
 800bd70:	f108 0602 	add.w	r6, r8, #2
 800bd74:	3e01      	subs	r6, #1
 800bd76:	4638      	mov	r0, r7
 800bd78:	612e      	str	r6, [r5, #16]
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	f7ff fdd2 	bl	800b924 <_Bfree>
 800bd80:	4628      	mov	r0, r5
 800bd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd86:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	e7c1      	b.n	800bd12 <__lshift+0x4a>
 800bd8e:	3904      	subs	r1, #4
 800bd90:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd94:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd98:	4298      	cmp	r0, r3
 800bd9a:	d8f9      	bhi.n	800bd90 <__lshift+0xc8>
 800bd9c:	e7ea      	b.n	800bd74 <__lshift+0xac>
 800bd9e:	bf00      	nop
 800bda0:	0800ec37 	.word	0x0800ec37
 800bda4:	0800eca8 	.word	0x0800eca8

0800bda8 <__mcmp>:
 800bda8:	b530      	push	{r4, r5, lr}
 800bdaa:	6902      	ldr	r2, [r0, #16]
 800bdac:	690c      	ldr	r4, [r1, #16]
 800bdae:	1b12      	subs	r2, r2, r4
 800bdb0:	d10e      	bne.n	800bdd0 <__mcmp+0x28>
 800bdb2:	f100 0314 	add.w	r3, r0, #20
 800bdb6:	3114      	adds	r1, #20
 800bdb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bdbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bdc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bdc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bdc8:	42a5      	cmp	r5, r4
 800bdca:	d003      	beq.n	800bdd4 <__mcmp+0x2c>
 800bdcc:	d305      	bcc.n	800bdda <__mcmp+0x32>
 800bdce:	2201      	movs	r2, #1
 800bdd0:	4610      	mov	r0, r2
 800bdd2:	bd30      	pop	{r4, r5, pc}
 800bdd4:	4283      	cmp	r3, r0
 800bdd6:	d3f3      	bcc.n	800bdc0 <__mcmp+0x18>
 800bdd8:	e7fa      	b.n	800bdd0 <__mcmp+0x28>
 800bdda:	f04f 32ff 	mov.w	r2, #4294967295
 800bdde:	e7f7      	b.n	800bdd0 <__mcmp+0x28>

0800bde0 <__mdiff>:
 800bde0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde4:	460c      	mov	r4, r1
 800bde6:	4606      	mov	r6, r0
 800bde8:	4611      	mov	r1, r2
 800bdea:	4620      	mov	r0, r4
 800bdec:	4690      	mov	r8, r2
 800bdee:	f7ff ffdb 	bl	800bda8 <__mcmp>
 800bdf2:	1e05      	subs	r5, r0, #0
 800bdf4:	d110      	bne.n	800be18 <__mdiff+0x38>
 800bdf6:	4629      	mov	r1, r5
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	f7ff fd53 	bl	800b8a4 <_Balloc>
 800bdfe:	b930      	cbnz	r0, 800be0e <__mdiff+0x2e>
 800be00:	4b3a      	ldr	r3, [pc, #232]	; (800beec <__mdiff+0x10c>)
 800be02:	4602      	mov	r2, r0
 800be04:	f240 2132 	movw	r1, #562	; 0x232
 800be08:	4839      	ldr	r0, [pc, #228]	; (800bef0 <__mdiff+0x110>)
 800be0a:	f000 fb87 	bl	800c51c <__assert_func>
 800be0e:	2301      	movs	r3, #1
 800be10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be18:	bfa4      	itt	ge
 800be1a:	4643      	movge	r3, r8
 800be1c:	46a0      	movge	r8, r4
 800be1e:	4630      	mov	r0, r6
 800be20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800be24:	bfa6      	itte	ge
 800be26:	461c      	movge	r4, r3
 800be28:	2500      	movge	r5, #0
 800be2a:	2501      	movlt	r5, #1
 800be2c:	f7ff fd3a 	bl	800b8a4 <_Balloc>
 800be30:	b920      	cbnz	r0, 800be3c <__mdiff+0x5c>
 800be32:	4b2e      	ldr	r3, [pc, #184]	; (800beec <__mdiff+0x10c>)
 800be34:	4602      	mov	r2, r0
 800be36:	f44f 7110 	mov.w	r1, #576	; 0x240
 800be3a:	e7e5      	b.n	800be08 <__mdiff+0x28>
 800be3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800be40:	6926      	ldr	r6, [r4, #16]
 800be42:	60c5      	str	r5, [r0, #12]
 800be44:	f104 0914 	add.w	r9, r4, #20
 800be48:	f108 0514 	add.w	r5, r8, #20
 800be4c:	f100 0e14 	add.w	lr, r0, #20
 800be50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800be54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800be58:	f108 0210 	add.w	r2, r8, #16
 800be5c:	46f2      	mov	sl, lr
 800be5e:	2100      	movs	r1, #0
 800be60:	f859 3b04 	ldr.w	r3, [r9], #4
 800be64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800be68:	fa1f f883 	uxth.w	r8, r3
 800be6c:	fa11 f18b 	uxtah	r1, r1, fp
 800be70:	0c1b      	lsrs	r3, r3, #16
 800be72:	eba1 0808 	sub.w	r8, r1, r8
 800be76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800be7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800be7e:	fa1f f888 	uxth.w	r8, r8
 800be82:	1419      	asrs	r1, r3, #16
 800be84:	454e      	cmp	r6, r9
 800be86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be8a:	f84a 3b04 	str.w	r3, [sl], #4
 800be8e:	d8e7      	bhi.n	800be60 <__mdiff+0x80>
 800be90:	1b33      	subs	r3, r6, r4
 800be92:	3b15      	subs	r3, #21
 800be94:	f023 0303 	bic.w	r3, r3, #3
 800be98:	3304      	adds	r3, #4
 800be9a:	3415      	adds	r4, #21
 800be9c:	42a6      	cmp	r6, r4
 800be9e:	bf38      	it	cc
 800bea0:	2304      	movcc	r3, #4
 800bea2:	441d      	add	r5, r3
 800bea4:	4473      	add	r3, lr
 800bea6:	469e      	mov	lr, r3
 800bea8:	462e      	mov	r6, r5
 800beaa:	4566      	cmp	r6, ip
 800beac:	d30e      	bcc.n	800becc <__mdiff+0xec>
 800beae:	f10c 0203 	add.w	r2, ip, #3
 800beb2:	1b52      	subs	r2, r2, r5
 800beb4:	f022 0203 	bic.w	r2, r2, #3
 800beb8:	3d03      	subs	r5, #3
 800beba:	45ac      	cmp	ip, r5
 800bebc:	bf38      	it	cc
 800bebe:	2200      	movcc	r2, #0
 800bec0:	441a      	add	r2, r3
 800bec2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bec6:	b17b      	cbz	r3, 800bee8 <__mdiff+0x108>
 800bec8:	6107      	str	r7, [r0, #16]
 800beca:	e7a3      	b.n	800be14 <__mdiff+0x34>
 800becc:	f856 8b04 	ldr.w	r8, [r6], #4
 800bed0:	fa11 f288 	uxtah	r2, r1, r8
 800bed4:	1414      	asrs	r4, r2, #16
 800bed6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800beda:	b292      	uxth	r2, r2
 800bedc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bee0:	f84e 2b04 	str.w	r2, [lr], #4
 800bee4:	1421      	asrs	r1, r4, #16
 800bee6:	e7e0      	b.n	800beaa <__mdiff+0xca>
 800bee8:	3f01      	subs	r7, #1
 800beea:	e7ea      	b.n	800bec2 <__mdiff+0xe2>
 800beec:	0800ec37 	.word	0x0800ec37
 800bef0:	0800eca8 	.word	0x0800eca8

0800bef4 <__d2b>:
 800bef4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bef8:	4689      	mov	r9, r1
 800befa:	2101      	movs	r1, #1
 800befc:	ec57 6b10 	vmov	r6, r7, d0
 800bf00:	4690      	mov	r8, r2
 800bf02:	f7ff fccf 	bl	800b8a4 <_Balloc>
 800bf06:	4604      	mov	r4, r0
 800bf08:	b930      	cbnz	r0, 800bf18 <__d2b+0x24>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	4b25      	ldr	r3, [pc, #148]	; (800bfa4 <__d2b+0xb0>)
 800bf0e:	4826      	ldr	r0, [pc, #152]	; (800bfa8 <__d2b+0xb4>)
 800bf10:	f240 310a 	movw	r1, #778	; 0x30a
 800bf14:	f000 fb02 	bl	800c51c <__assert_func>
 800bf18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bf1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf20:	bb35      	cbnz	r5, 800bf70 <__d2b+0x7c>
 800bf22:	2e00      	cmp	r6, #0
 800bf24:	9301      	str	r3, [sp, #4]
 800bf26:	d028      	beq.n	800bf7a <__d2b+0x86>
 800bf28:	4668      	mov	r0, sp
 800bf2a:	9600      	str	r6, [sp, #0]
 800bf2c:	f7ff fd82 	bl	800ba34 <__lo0bits>
 800bf30:	9900      	ldr	r1, [sp, #0]
 800bf32:	b300      	cbz	r0, 800bf76 <__d2b+0x82>
 800bf34:	9a01      	ldr	r2, [sp, #4]
 800bf36:	f1c0 0320 	rsb	r3, r0, #32
 800bf3a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf3e:	430b      	orrs	r3, r1
 800bf40:	40c2      	lsrs	r2, r0
 800bf42:	6163      	str	r3, [r4, #20]
 800bf44:	9201      	str	r2, [sp, #4]
 800bf46:	9b01      	ldr	r3, [sp, #4]
 800bf48:	61a3      	str	r3, [r4, #24]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	bf14      	ite	ne
 800bf4e:	2202      	movne	r2, #2
 800bf50:	2201      	moveq	r2, #1
 800bf52:	6122      	str	r2, [r4, #16]
 800bf54:	b1d5      	cbz	r5, 800bf8c <__d2b+0x98>
 800bf56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf5a:	4405      	add	r5, r0
 800bf5c:	f8c9 5000 	str.w	r5, [r9]
 800bf60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf64:	f8c8 0000 	str.w	r0, [r8]
 800bf68:	4620      	mov	r0, r4
 800bf6a:	b003      	add	sp, #12
 800bf6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf74:	e7d5      	b.n	800bf22 <__d2b+0x2e>
 800bf76:	6161      	str	r1, [r4, #20]
 800bf78:	e7e5      	b.n	800bf46 <__d2b+0x52>
 800bf7a:	a801      	add	r0, sp, #4
 800bf7c:	f7ff fd5a 	bl	800ba34 <__lo0bits>
 800bf80:	9b01      	ldr	r3, [sp, #4]
 800bf82:	6163      	str	r3, [r4, #20]
 800bf84:	2201      	movs	r2, #1
 800bf86:	6122      	str	r2, [r4, #16]
 800bf88:	3020      	adds	r0, #32
 800bf8a:	e7e3      	b.n	800bf54 <__d2b+0x60>
 800bf8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf94:	f8c9 0000 	str.w	r0, [r9]
 800bf98:	6918      	ldr	r0, [r3, #16]
 800bf9a:	f7ff fd2b 	bl	800b9f4 <__hi0bits>
 800bf9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bfa2:	e7df      	b.n	800bf64 <__d2b+0x70>
 800bfa4:	0800ec37 	.word	0x0800ec37
 800bfa8:	0800eca8 	.word	0x0800eca8

0800bfac <_calloc_r>:
 800bfac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfae:	fba1 2402 	umull	r2, r4, r1, r2
 800bfb2:	b94c      	cbnz	r4, 800bfc8 <_calloc_r+0x1c>
 800bfb4:	4611      	mov	r1, r2
 800bfb6:	9201      	str	r2, [sp, #4]
 800bfb8:	f000 f87a 	bl	800c0b0 <_malloc_r>
 800bfbc:	9a01      	ldr	r2, [sp, #4]
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	b930      	cbnz	r0, 800bfd0 <_calloc_r+0x24>
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	b003      	add	sp, #12
 800bfc6:	bd30      	pop	{r4, r5, pc}
 800bfc8:	220c      	movs	r2, #12
 800bfca:	6002      	str	r2, [r0, #0]
 800bfcc:	2500      	movs	r5, #0
 800bfce:	e7f8      	b.n	800bfc2 <_calloc_r+0x16>
 800bfd0:	4621      	mov	r1, r4
 800bfd2:	f7fd fdef 	bl	8009bb4 <memset>
 800bfd6:	e7f4      	b.n	800bfc2 <_calloc_r+0x16>

0800bfd8 <_free_r>:
 800bfd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfda:	2900      	cmp	r1, #0
 800bfdc:	d044      	beq.n	800c068 <_free_r+0x90>
 800bfde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfe2:	9001      	str	r0, [sp, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f1a1 0404 	sub.w	r4, r1, #4
 800bfea:	bfb8      	it	lt
 800bfec:	18e4      	addlt	r4, r4, r3
 800bfee:	f000 fb1b 	bl	800c628 <__malloc_lock>
 800bff2:	4a1e      	ldr	r2, [pc, #120]	; (800c06c <_free_r+0x94>)
 800bff4:	9801      	ldr	r0, [sp, #4]
 800bff6:	6813      	ldr	r3, [r2, #0]
 800bff8:	b933      	cbnz	r3, 800c008 <_free_r+0x30>
 800bffa:	6063      	str	r3, [r4, #4]
 800bffc:	6014      	str	r4, [r2, #0]
 800bffe:	b003      	add	sp, #12
 800c000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c004:	f000 bb16 	b.w	800c634 <__malloc_unlock>
 800c008:	42a3      	cmp	r3, r4
 800c00a:	d908      	bls.n	800c01e <_free_r+0x46>
 800c00c:	6825      	ldr	r5, [r4, #0]
 800c00e:	1961      	adds	r1, r4, r5
 800c010:	428b      	cmp	r3, r1
 800c012:	bf01      	itttt	eq
 800c014:	6819      	ldreq	r1, [r3, #0]
 800c016:	685b      	ldreq	r3, [r3, #4]
 800c018:	1949      	addeq	r1, r1, r5
 800c01a:	6021      	streq	r1, [r4, #0]
 800c01c:	e7ed      	b.n	800bffa <_free_r+0x22>
 800c01e:	461a      	mov	r2, r3
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	b10b      	cbz	r3, 800c028 <_free_r+0x50>
 800c024:	42a3      	cmp	r3, r4
 800c026:	d9fa      	bls.n	800c01e <_free_r+0x46>
 800c028:	6811      	ldr	r1, [r2, #0]
 800c02a:	1855      	adds	r5, r2, r1
 800c02c:	42a5      	cmp	r5, r4
 800c02e:	d10b      	bne.n	800c048 <_free_r+0x70>
 800c030:	6824      	ldr	r4, [r4, #0]
 800c032:	4421      	add	r1, r4
 800c034:	1854      	adds	r4, r2, r1
 800c036:	42a3      	cmp	r3, r4
 800c038:	6011      	str	r1, [r2, #0]
 800c03a:	d1e0      	bne.n	800bffe <_free_r+0x26>
 800c03c:	681c      	ldr	r4, [r3, #0]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	6053      	str	r3, [r2, #4]
 800c042:	4421      	add	r1, r4
 800c044:	6011      	str	r1, [r2, #0]
 800c046:	e7da      	b.n	800bffe <_free_r+0x26>
 800c048:	d902      	bls.n	800c050 <_free_r+0x78>
 800c04a:	230c      	movs	r3, #12
 800c04c:	6003      	str	r3, [r0, #0]
 800c04e:	e7d6      	b.n	800bffe <_free_r+0x26>
 800c050:	6825      	ldr	r5, [r4, #0]
 800c052:	1961      	adds	r1, r4, r5
 800c054:	428b      	cmp	r3, r1
 800c056:	bf04      	itt	eq
 800c058:	6819      	ldreq	r1, [r3, #0]
 800c05a:	685b      	ldreq	r3, [r3, #4]
 800c05c:	6063      	str	r3, [r4, #4]
 800c05e:	bf04      	itt	eq
 800c060:	1949      	addeq	r1, r1, r5
 800c062:	6021      	streq	r1, [r4, #0]
 800c064:	6054      	str	r4, [r2, #4]
 800c066:	e7ca      	b.n	800bffe <_free_r+0x26>
 800c068:	b003      	add	sp, #12
 800c06a:	bd30      	pop	{r4, r5, pc}
 800c06c:	20000d18 	.word	0x20000d18

0800c070 <sbrk_aligned>:
 800c070:	b570      	push	{r4, r5, r6, lr}
 800c072:	4e0e      	ldr	r6, [pc, #56]	; (800c0ac <sbrk_aligned+0x3c>)
 800c074:	460c      	mov	r4, r1
 800c076:	6831      	ldr	r1, [r6, #0]
 800c078:	4605      	mov	r5, r0
 800c07a:	b911      	cbnz	r1, 800c082 <sbrk_aligned+0x12>
 800c07c:	f000 f9e8 	bl	800c450 <_sbrk_r>
 800c080:	6030      	str	r0, [r6, #0]
 800c082:	4621      	mov	r1, r4
 800c084:	4628      	mov	r0, r5
 800c086:	f000 f9e3 	bl	800c450 <_sbrk_r>
 800c08a:	1c43      	adds	r3, r0, #1
 800c08c:	d00a      	beq.n	800c0a4 <sbrk_aligned+0x34>
 800c08e:	1cc4      	adds	r4, r0, #3
 800c090:	f024 0403 	bic.w	r4, r4, #3
 800c094:	42a0      	cmp	r0, r4
 800c096:	d007      	beq.n	800c0a8 <sbrk_aligned+0x38>
 800c098:	1a21      	subs	r1, r4, r0
 800c09a:	4628      	mov	r0, r5
 800c09c:	f000 f9d8 	bl	800c450 <_sbrk_r>
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	d101      	bne.n	800c0a8 <sbrk_aligned+0x38>
 800c0a4:	f04f 34ff 	mov.w	r4, #4294967295
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	bd70      	pop	{r4, r5, r6, pc}
 800c0ac:	20000d1c 	.word	0x20000d1c

0800c0b0 <_malloc_r>:
 800c0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b4:	1ccd      	adds	r5, r1, #3
 800c0b6:	f025 0503 	bic.w	r5, r5, #3
 800c0ba:	3508      	adds	r5, #8
 800c0bc:	2d0c      	cmp	r5, #12
 800c0be:	bf38      	it	cc
 800c0c0:	250c      	movcc	r5, #12
 800c0c2:	2d00      	cmp	r5, #0
 800c0c4:	4607      	mov	r7, r0
 800c0c6:	db01      	blt.n	800c0cc <_malloc_r+0x1c>
 800c0c8:	42a9      	cmp	r1, r5
 800c0ca:	d905      	bls.n	800c0d8 <_malloc_r+0x28>
 800c0cc:	230c      	movs	r3, #12
 800c0ce:	603b      	str	r3, [r7, #0]
 800c0d0:	2600      	movs	r6, #0
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d8:	4e2e      	ldr	r6, [pc, #184]	; (800c194 <_malloc_r+0xe4>)
 800c0da:	f000 faa5 	bl	800c628 <__malloc_lock>
 800c0de:	6833      	ldr	r3, [r6, #0]
 800c0e0:	461c      	mov	r4, r3
 800c0e2:	bb34      	cbnz	r4, 800c132 <_malloc_r+0x82>
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	4638      	mov	r0, r7
 800c0e8:	f7ff ffc2 	bl	800c070 <sbrk_aligned>
 800c0ec:	1c43      	adds	r3, r0, #1
 800c0ee:	4604      	mov	r4, r0
 800c0f0:	d14d      	bne.n	800c18e <_malloc_r+0xde>
 800c0f2:	6834      	ldr	r4, [r6, #0]
 800c0f4:	4626      	mov	r6, r4
 800c0f6:	2e00      	cmp	r6, #0
 800c0f8:	d140      	bne.n	800c17c <_malloc_r+0xcc>
 800c0fa:	6823      	ldr	r3, [r4, #0]
 800c0fc:	4631      	mov	r1, r6
 800c0fe:	4638      	mov	r0, r7
 800c100:	eb04 0803 	add.w	r8, r4, r3
 800c104:	f000 f9a4 	bl	800c450 <_sbrk_r>
 800c108:	4580      	cmp	r8, r0
 800c10a:	d13a      	bne.n	800c182 <_malloc_r+0xd2>
 800c10c:	6821      	ldr	r1, [r4, #0]
 800c10e:	3503      	adds	r5, #3
 800c110:	1a6d      	subs	r5, r5, r1
 800c112:	f025 0503 	bic.w	r5, r5, #3
 800c116:	3508      	adds	r5, #8
 800c118:	2d0c      	cmp	r5, #12
 800c11a:	bf38      	it	cc
 800c11c:	250c      	movcc	r5, #12
 800c11e:	4629      	mov	r1, r5
 800c120:	4638      	mov	r0, r7
 800c122:	f7ff ffa5 	bl	800c070 <sbrk_aligned>
 800c126:	3001      	adds	r0, #1
 800c128:	d02b      	beq.n	800c182 <_malloc_r+0xd2>
 800c12a:	6823      	ldr	r3, [r4, #0]
 800c12c:	442b      	add	r3, r5
 800c12e:	6023      	str	r3, [r4, #0]
 800c130:	e00e      	b.n	800c150 <_malloc_r+0xa0>
 800c132:	6822      	ldr	r2, [r4, #0]
 800c134:	1b52      	subs	r2, r2, r5
 800c136:	d41e      	bmi.n	800c176 <_malloc_r+0xc6>
 800c138:	2a0b      	cmp	r2, #11
 800c13a:	d916      	bls.n	800c16a <_malloc_r+0xba>
 800c13c:	1961      	adds	r1, r4, r5
 800c13e:	42a3      	cmp	r3, r4
 800c140:	6025      	str	r5, [r4, #0]
 800c142:	bf18      	it	ne
 800c144:	6059      	strne	r1, [r3, #4]
 800c146:	6863      	ldr	r3, [r4, #4]
 800c148:	bf08      	it	eq
 800c14a:	6031      	streq	r1, [r6, #0]
 800c14c:	5162      	str	r2, [r4, r5]
 800c14e:	604b      	str	r3, [r1, #4]
 800c150:	4638      	mov	r0, r7
 800c152:	f104 060b 	add.w	r6, r4, #11
 800c156:	f000 fa6d 	bl	800c634 <__malloc_unlock>
 800c15a:	f026 0607 	bic.w	r6, r6, #7
 800c15e:	1d23      	adds	r3, r4, #4
 800c160:	1af2      	subs	r2, r6, r3
 800c162:	d0b6      	beq.n	800c0d2 <_malloc_r+0x22>
 800c164:	1b9b      	subs	r3, r3, r6
 800c166:	50a3      	str	r3, [r4, r2]
 800c168:	e7b3      	b.n	800c0d2 <_malloc_r+0x22>
 800c16a:	6862      	ldr	r2, [r4, #4]
 800c16c:	42a3      	cmp	r3, r4
 800c16e:	bf0c      	ite	eq
 800c170:	6032      	streq	r2, [r6, #0]
 800c172:	605a      	strne	r2, [r3, #4]
 800c174:	e7ec      	b.n	800c150 <_malloc_r+0xa0>
 800c176:	4623      	mov	r3, r4
 800c178:	6864      	ldr	r4, [r4, #4]
 800c17a:	e7b2      	b.n	800c0e2 <_malloc_r+0x32>
 800c17c:	4634      	mov	r4, r6
 800c17e:	6876      	ldr	r6, [r6, #4]
 800c180:	e7b9      	b.n	800c0f6 <_malloc_r+0x46>
 800c182:	230c      	movs	r3, #12
 800c184:	603b      	str	r3, [r7, #0]
 800c186:	4638      	mov	r0, r7
 800c188:	f000 fa54 	bl	800c634 <__malloc_unlock>
 800c18c:	e7a1      	b.n	800c0d2 <_malloc_r+0x22>
 800c18e:	6025      	str	r5, [r4, #0]
 800c190:	e7de      	b.n	800c150 <_malloc_r+0xa0>
 800c192:	bf00      	nop
 800c194:	20000d18 	.word	0x20000d18

0800c198 <__ssputs_r>:
 800c198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c19c:	688e      	ldr	r6, [r1, #8]
 800c19e:	429e      	cmp	r6, r3
 800c1a0:	4682      	mov	sl, r0
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	4690      	mov	r8, r2
 800c1a6:	461f      	mov	r7, r3
 800c1a8:	d838      	bhi.n	800c21c <__ssputs_r+0x84>
 800c1aa:	898a      	ldrh	r2, [r1, #12]
 800c1ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c1b0:	d032      	beq.n	800c218 <__ssputs_r+0x80>
 800c1b2:	6825      	ldr	r5, [r4, #0]
 800c1b4:	6909      	ldr	r1, [r1, #16]
 800c1b6:	eba5 0901 	sub.w	r9, r5, r1
 800c1ba:	6965      	ldr	r5, [r4, #20]
 800c1bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	444b      	add	r3, r9
 800c1c8:	106d      	asrs	r5, r5, #1
 800c1ca:	429d      	cmp	r5, r3
 800c1cc:	bf38      	it	cc
 800c1ce:	461d      	movcc	r5, r3
 800c1d0:	0553      	lsls	r3, r2, #21
 800c1d2:	d531      	bpl.n	800c238 <__ssputs_r+0xa0>
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	f7ff ff6b 	bl	800c0b0 <_malloc_r>
 800c1da:	4606      	mov	r6, r0
 800c1dc:	b950      	cbnz	r0, 800c1f4 <__ssputs_r+0x5c>
 800c1de:	230c      	movs	r3, #12
 800c1e0:	f8ca 3000 	str.w	r3, [sl]
 800c1e4:	89a3      	ldrh	r3, [r4, #12]
 800c1e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1ea:	81a3      	strh	r3, [r4, #12]
 800c1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1f4:	6921      	ldr	r1, [r4, #16]
 800c1f6:	464a      	mov	r2, r9
 800c1f8:	f7fd fcb4 	bl	8009b64 <memcpy>
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c206:	81a3      	strh	r3, [r4, #12]
 800c208:	6126      	str	r6, [r4, #16]
 800c20a:	6165      	str	r5, [r4, #20]
 800c20c:	444e      	add	r6, r9
 800c20e:	eba5 0509 	sub.w	r5, r5, r9
 800c212:	6026      	str	r6, [r4, #0]
 800c214:	60a5      	str	r5, [r4, #8]
 800c216:	463e      	mov	r6, r7
 800c218:	42be      	cmp	r6, r7
 800c21a:	d900      	bls.n	800c21e <__ssputs_r+0x86>
 800c21c:	463e      	mov	r6, r7
 800c21e:	6820      	ldr	r0, [r4, #0]
 800c220:	4632      	mov	r2, r6
 800c222:	4641      	mov	r1, r8
 800c224:	f7fd fcac 	bl	8009b80 <memmove>
 800c228:	68a3      	ldr	r3, [r4, #8]
 800c22a:	1b9b      	subs	r3, r3, r6
 800c22c:	60a3      	str	r3, [r4, #8]
 800c22e:	6823      	ldr	r3, [r4, #0]
 800c230:	4433      	add	r3, r6
 800c232:	6023      	str	r3, [r4, #0]
 800c234:	2000      	movs	r0, #0
 800c236:	e7db      	b.n	800c1f0 <__ssputs_r+0x58>
 800c238:	462a      	mov	r2, r5
 800c23a:	f000 fa01 	bl	800c640 <_realloc_r>
 800c23e:	4606      	mov	r6, r0
 800c240:	2800      	cmp	r0, #0
 800c242:	d1e1      	bne.n	800c208 <__ssputs_r+0x70>
 800c244:	6921      	ldr	r1, [r4, #16]
 800c246:	4650      	mov	r0, sl
 800c248:	f7ff fec6 	bl	800bfd8 <_free_r>
 800c24c:	e7c7      	b.n	800c1de <__ssputs_r+0x46>
	...

0800c250 <_svfiprintf_r>:
 800c250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c254:	4698      	mov	r8, r3
 800c256:	898b      	ldrh	r3, [r1, #12]
 800c258:	061b      	lsls	r3, r3, #24
 800c25a:	b09d      	sub	sp, #116	; 0x74
 800c25c:	4607      	mov	r7, r0
 800c25e:	460d      	mov	r5, r1
 800c260:	4614      	mov	r4, r2
 800c262:	d50e      	bpl.n	800c282 <_svfiprintf_r+0x32>
 800c264:	690b      	ldr	r3, [r1, #16]
 800c266:	b963      	cbnz	r3, 800c282 <_svfiprintf_r+0x32>
 800c268:	2140      	movs	r1, #64	; 0x40
 800c26a:	f7ff ff21 	bl	800c0b0 <_malloc_r>
 800c26e:	6028      	str	r0, [r5, #0]
 800c270:	6128      	str	r0, [r5, #16]
 800c272:	b920      	cbnz	r0, 800c27e <_svfiprintf_r+0x2e>
 800c274:	230c      	movs	r3, #12
 800c276:	603b      	str	r3, [r7, #0]
 800c278:	f04f 30ff 	mov.w	r0, #4294967295
 800c27c:	e0d1      	b.n	800c422 <_svfiprintf_r+0x1d2>
 800c27e:	2340      	movs	r3, #64	; 0x40
 800c280:	616b      	str	r3, [r5, #20]
 800c282:	2300      	movs	r3, #0
 800c284:	9309      	str	r3, [sp, #36]	; 0x24
 800c286:	2320      	movs	r3, #32
 800c288:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c28c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c290:	2330      	movs	r3, #48	; 0x30
 800c292:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c43c <_svfiprintf_r+0x1ec>
 800c296:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c29a:	f04f 0901 	mov.w	r9, #1
 800c29e:	4623      	mov	r3, r4
 800c2a0:	469a      	mov	sl, r3
 800c2a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2a6:	b10a      	cbz	r2, 800c2ac <_svfiprintf_r+0x5c>
 800c2a8:	2a25      	cmp	r2, #37	; 0x25
 800c2aa:	d1f9      	bne.n	800c2a0 <_svfiprintf_r+0x50>
 800c2ac:	ebba 0b04 	subs.w	fp, sl, r4
 800c2b0:	d00b      	beq.n	800c2ca <_svfiprintf_r+0x7a>
 800c2b2:	465b      	mov	r3, fp
 800c2b4:	4622      	mov	r2, r4
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	f7ff ff6d 	bl	800c198 <__ssputs_r>
 800c2be:	3001      	adds	r0, #1
 800c2c0:	f000 80aa 	beq.w	800c418 <_svfiprintf_r+0x1c8>
 800c2c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2c6:	445a      	add	r2, fp
 800c2c8:	9209      	str	r2, [sp, #36]	; 0x24
 800c2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f000 80a2 	beq.w	800c418 <_svfiprintf_r+0x1c8>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c2da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2de:	f10a 0a01 	add.w	sl, sl, #1
 800c2e2:	9304      	str	r3, [sp, #16]
 800c2e4:	9307      	str	r3, [sp, #28]
 800c2e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2ea:	931a      	str	r3, [sp, #104]	; 0x68
 800c2ec:	4654      	mov	r4, sl
 800c2ee:	2205      	movs	r2, #5
 800c2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2f4:	4851      	ldr	r0, [pc, #324]	; (800c43c <_svfiprintf_r+0x1ec>)
 800c2f6:	f7f3 ff7b 	bl	80001f0 <memchr>
 800c2fa:	9a04      	ldr	r2, [sp, #16]
 800c2fc:	b9d8      	cbnz	r0, 800c336 <_svfiprintf_r+0xe6>
 800c2fe:	06d0      	lsls	r0, r2, #27
 800c300:	bf44      	itt	mi
 800c302:	2320      	movmi	r3, #32
 800c304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c308:	0711      	lsls	r1, r2, #28
 800c30a:	bf44      	itt	mi
 800c30c:	232b      	movmi	r3, #43	; 0x2b
 800c30e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c312:	f89a 3000 	ldrb.w	r3, [sl]
 800c316:	2b2a      	cmp	r3, #42	; 0x2a
 800c318:	d015      	beq.n	800c346 <_svfiprintf_r+0xf6>
 800c31a:	9a07      	ldr	r2, [sp, #28]
 800c31c:	4654      	mov	r4, sl
 800c31e:	2000      	movs	r0, #0
 800c320:	f04f 0c0a 	mov.w	ip, #10
 800c324:	4621      	mov	r1, r4
 800c326:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c32a:	3b30      	subs	r3, #48	; 0x30
 800c32c:	2b09      	cmp	r3, #9
 800c32e:	d94e      	bls.n	800c3ce <_svfiprintf_r+0x17e>
 800c330:	b1b0      	cbz	r0, 800c360 <_svfiprintf_r+0x110>
 800c332:	9207      	str	r2, [sp, #28]
 800c334:	e014      	b.n	800c360 <_svfiprintf_r+0x110>
 800c336:	eba0 0308 	sub.w	r3, r0, r8
 800c33a:	fa09 f303 	lsl.w	r3, r9, r3
 800c33e:	4313      	orrs	r3, r2
 800c340:	9304      	str	r3, [sp, #16]
 800c342:	46a2      	mov	sl, r4
 800c344:	e7d2      	b.n	800c2ec <_svfiprintf_r+0x9c>
 800c346:	9b03      	ldr	r3, [sp, #12]
 800c348:	1d19      	adds	r1, r3, #4
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	9103      	str	r1, [sp, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	bfbb      	ittet	lt
 800c352:	425b      	neglt	r3, r3
 800c354:	f042 0202 	orrlt.w	r2, r2, #2
 800c358:	9307      	strge	r3, [sp, #28]
 800c35a:	9307      	strlt	r3, [sp, #28]
 800c35c:	bfb8      	it	lt
 800c35e:	9204      	strlt	r2, [sp, #16]
 800c360:	7823      	ldrb	r3, [r4, #0]
 800c362:	2b2e      	cmp	r3, #46	; 0x2e
 800c364:	d10c      	bne.n	800c380 <_svfiprintf_r+0x130>
 800c366:	7863      	ldrb	r3, [r4, #1]
 800c368:	2b2a      	cmp	r3, #42	; 0x2a
 800c36a:	d135      	bne.n	800c3d8 <_svfiprintf_r+0x188>
 800c36c:	9b03      	ldr	r3, [sp, #12]
 800c36e:	1d1a      	adds	r2, r3, #4
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	9203      	str	r2, [sp, #12]
 800c374:	2b00      	cmp	r3, #0
 800c376:	bfb8      	it	lt
 800c378:	f04f 33ff 	movlt.w	r3, #4294967295
 800c37c:	3402      	adds	r4, #2
 800c37e:	9305      	str	r3, [sp, #20]
 800c380:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c44c <_svfiprintf_r+0x1fc>
 800c384:	7821      	ldrb	r1, [r4, #0]
 800c386:	2203      	movs	r2, #3
 800c388:	4650      	mov	r0, sl
 800c38a:	f7f3 ff31 	bl	80001f0 <memchr>
 800c38e:	b140      	cbz	r0, 800c3a2 <_svfiprintf_r+0x152>
 800c390:	2340      	movs	r3, #64	; 0x40
 800c392:	eba0 000a 	sub.w	r0, r0, sl
 800c396:	fa03 f000 	lsl.w	r0, r3, r0
 800c39a:	9b04      	ldr	r3, [sp, #16]
 800c39c:	4303      	orrs	r3, r0
 800c39e:	3401      	adds	r4, #1
 800c3a0:	9304      	str	r3, [sp, #16]
 800c3a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3a6:	4826      	ldr	r0, [pc, #152]	; (800c440 <_svfiprintf_r+0x1f0>)
 800c3a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3ac:	2206      	movs	r2, #6
 800c3ae:	f7f3 ff1f 	bl	80001f0 <memchr>
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	d038      	beq.n	800c428 <_svfiprintf_r+0x1d8>
 800c3b6:	4b23      	ldr	r3, [pc, #140]	; (800c444 <_svfiprintf_r+0x1f4>)
 800c3b8:	bb1b      	cbnz	r3, 800c402 <_svfiprintf_r+0x1b2>
 800c3ba:	9b03      	ldr	r3, [sp, #12]
 800c3bc:	3307      	adds	r3, #7
 800c3be:	f023 0307 	bic.w	r3, r3, #7
 800c3c2:	3308      	adds	r3, #8
 800c3c4:	9303      	str	r3, [sp, #12]
 800c3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c8:	4433      	add	r3, r6
 800c3ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c3cc:	e767      	b.n	800c29e <_svfiprintf_r+0x4e>
 800c3ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3d2:	460c      	mov	r4, r1
 800c3d4:	2001      	movs	r0, #1
 800c3d6:	e7a5      	b.n	800c324 <_svfiprintf_r+0xd4>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	3401      	adds	r4, #1
 800c3dc:	9305      	str	r3, [sp, #20]
 800c3de:	4619      	mov	r1, r3
 800c3e0:	f04f 0c0a 	mov.w	ip, #10
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ea:	3a30      	subs	r2, #48	; 0x30
 800c3ec:	2a09      	cmp	r2, #9
 800c3ee:	d903      	bls.n	800c3f8 <_svfiprintf_r+0x1a8>
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d0c5      	beq.n	800c380 <_svfiprintf_r+0x130>
 800c3f4:	9105      	str	r1, [sp, #20]
 800c3f6:	e7c3      	b.n	800c380 <_svfiprintf_r+0x130>
 800c3f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	2301      	movs	r3, #1
 800c400:	e7f0      	b.n	800c3e4 <_svfiprintf_r+0x194>
 800c402:	ab03      	add	r3, sp, #12
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	462a      	mov	r2, r5
 800c408:	4b0f      	ldr	r3, [pc, #60]	; (800c448 <_svfiprintf_r+0x1f8>)
 800c40a:	a904      	add	r1, sp, #16
 800c40c:	4638      	mov	r0, r7
 800c40e:	f7fd fc79 	bl	8009d04 <_printf_float>
 800c412:	1c42      	adds	r2, r0, #1
 800c414:	4606      	mov	r6, r0
 800c416:	d1d6      	bne.n	800c3c6 <_svfiprintf_r+0x176>
 800c418:	89ab      	ldrh	r3, [r5, #12]
 800c41a:	065b      	lsls	r3, r3, #25
 800c41c:	f53f af2c 	bmi.w	800c278 <_svfiprintf_r+0x28>
 800c420:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c422:	b01d      	add	sp, #116	; 0x74
 800c424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c428:	ab03      	add	r3, sp, #12
 800c42a:	9300      	str	r3, [sp, #0]
 800c42c:	462a      	mov	r2, r5
 800c42e:	4b06      	ldr	r3, [pc, #24]	; (800c448 <_svfiprintf_r+0x1f8>)
 800c430:	a904      	add	r1, sp, #16
 800c432:	4638      	mov	r0, r7
 800c434:	f7fd ff0a 	bl	800a24c <_printf_i>
 800c438:	e7eb      	b.n	800c412 <_svfiprintf_r+0x1c2>
 800c43a:	bf00      	nop
 800c43c:	0800ee04 	.word	0x0800ee04
 800c440:	0800ee0e 	.word	0x0800ee0e
 800c444:	08009d05 	.word	0x08009d05
 800c448:	0800c199 	.word	0x0800c199
 800c44c:	0800ee0a 	.word	0x0800ee0a

0800c450 <_sbrk_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4d06      	ldr	r5, [pc, #24]	; (800c46c <_sbrk_r+0x1c>)
 800c454:	2300      	movs	r3, #0
 800c456:	4604      	mov	r4, r0
 800c458:	4608      	mov	r0, r1
 800c45a:	602b      	str	r3, [r5, #0]
 800c45c:	f7fa fe34 	bl	80070c8 <_sbrk>
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	d102      	bne.n	800c46a <_sbrk_r+0x1a>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	b103      	cbz	r3, 800c46a <_sbrk_r+0x1a>
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	20000d20 	.word	0x20000d20

0800c470 <__sread>:
 800c470:	b510      	push	{r4, lr}
 800c472:	460c      	mov	r4, r1
 800c474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c478:	f000 fa6a 	bl	800c950 <_read_r>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	bfab      	itete	ge
 800c480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c482:	89a3      	ldrhlt	r3, [r4, #12]
 800c484:	181b      	addge	r3, r3, r0
 800c486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c48a:	bfac      	ite	ge
 800c48c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c48e:	81a3      	strhlt	r3, [r4, #12]
 800c490:	bd10      	pop	{r4, pc}

0800c492 <__swrite>:
 800c492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c496:	461f      	mov	r7, r3
 800c498:	898b      	ldrh	r3, [r1, #12]
 800c49a:	05db      	lsls	r3, r3, #23
 800c49c:	4605      	mov	r5, r0
 800c49e:	460c      	mov	r4, r1
 800c4a0:	4616      	mov	r6, r2
 800c4a2:	d505      	bpl.n	800c4b0 <__swrite+0x1e>
 800c4a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f000 f898 	bl	800c5e0 <_lseek_r>
 800c4b0:	89a3      	ldrh	r3, [r4, #12]
 800c4b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4ba:	81a3      	strh	r3, [r4, #12]
 800c4bc:	4632      	mov	r2, r6
 800c4be:	463b      	mov	r3, r7
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c6:	f000 b817 	b.w	800c4f8 <_write_r>

0800c4ca <__sseek>:
 800c4ca:	b510      	push	{r4, lr}
 800c4cc:	460c      	mov	r4, r1
 800c4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4d2:	f000 f885 	bl	800c5e0 <_lseek_r>
 800c4d6:	1c43      	adds	r3, r0, #1
 800c4d8:	89a3      	ldrh	r3, [r4, #12]
 800c4da:	bf15      	itete	ne
 800c4dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4e6:	81a3      	strheq	r3, [r4, #12]
 800c4e8:	bf18      	it	ne
 800c4ea:	81a3      	strhne	r3, [r4, #12]
 800c4ec:	bd10      	pop	{r4, pc}

0800c4ee <__sclose>:
 800c4ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4f2:	f000 b831 	b.w	800c558 <_close_r>
	...

0800c4f8 <_write_r>:
 800c4f8:	b538      	push	{r3, r4, r5, lr}
 800c4fa:	4d07      	ldr	r5, [pc, #28]	; (800c518 <_write_r+0x20>)
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	4608      	mov	r0, r1
 800c500:	4611      	mov	r1, r2
 800c502:	2200      	movs	r2, #0
 800c504:	602a      	str	r2, [r5, #0]
 800c506:	461a      	mov	r2, r3
 800c508:	f7fa fd8d 	bl	8007026 <_write>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d102      	bne.n	800c516 <_write_r+0x1e>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	b103      	cbz	r3, 800c516 <_write_r+0x1e>
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	bd38      	pop	{r3, r4, r5, pc}
 800c518:	20000d20 	.word	0x20000d20

0800c51c <__assert_func>:
 800c51c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c51e:	4614      	mov	r4, r2
 800c520:	461a      	mov	r2, r3
 800c522:	4b09      	ldr	r3, [pc, #36]	; (800c548 <__assert_func+0x2c>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4605      	mov	r5, r0
 800c528:	68d8      	ldr	r0, [r3, #12]
 800c52a:	b14c      	cbz	r4, 800c540 <__assert_func+0x24>
 800c52c:	4b07      	ldr	r3, [pc, #28]	; (800c54c <__assert_func+0x30>)
 800c52e:	9100      	str	r1, [sp, #0]
 800c530:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c534:	4906      	ldr	r1, [pc, #24]	; (800c550 <__assert_func+0x34>)
 800c536:	462b      	mov	r3, r5
 800c538:	f000 f81e 	bl	800c578 <fiprintf>
 800c53c:	f000 fa27 	bl	800c98e <abort>
 800c540:	4b04      	ldr	r3, [pc, #16]	; (800c554 <__assert_func+0x38>)
 800c542:	461c      	mov	r4, r3
 800c544:	e7f3      	b.n	800c52e <__assert_func+0x12>
 800c546:	bf00      	nop
 800c548:	200002ec 	.word	0x200002ec
 800c54c:	0800ee15 	.word	0x0800ee15
 800c550:	0800ee22 	.word	0x0800ee22
 800c554:	0800ee50 	.word	0x0800ee50

0800c558 <_close_r>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	4d06      	ldr	r5, [pc, #24]	; (800c574 <_close_r+0x1c>)
 800c55c:	2300      	movs	r3, #0
 800c55e:	4604      	mov	r4, r0
 800c560:	4608      	mov	r0, r1
 800c562:	602b      	str	r3, [r5, #0]
 800c564:	f7fa fd7b 	bl	800705e <_close>
 800c568:	1c43      	adds	r3, r0, #1
 800c56a:	d102      	bne.n	800c572 <_close_r+0x1a>
 800c56c:	682b      	ldr	r3, [r5, #0]
 800c56e:	b103      	cbz	r3, 800c572 <_close_r+0x1a>
 800c570:	6023      	str	r3, [r4, #0]
 800c572:	bd38      	pop	{r3, r4, r5, pc}
 800c574:	20000d20 	.word	0x20000d20

0800c578 <fiprintf>:
 800c578:	b40e      	push	{r1, r2, r3}
 800c57a:	b503      	push	{r0, r1, lr}
 800c57c:	4601      	mov	r1, r0
 800c57e:	ab03      	add	r3, sp, #12
 800c580:	4805      	ldr	r0, [pc, #20]	; (800c598 <fiprintf+0x20>)
 800c582:	f853 2b04 	ldr.w	r2, [r3], #4
 800c586:	6800      	ldr	r0, [r0, #0]
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	f000 f8b1 	bl	800c6f0 <_vfiprintf_r>
 800c58e:	b002      	add	sp, #8
 800c590:	f85d eb04 	ldr.w	lr, [sp], #4
 800c594:	b003      	add	sp, #12
 800c596:	4770      	bx	lr
 800c598:	200002ec 	.word	0x200002ec

0800c59c <_fstat_r>:
 800c59c:	b538      	push	{r3, r4, r5, lr}
 800c59e:	4d07      	ldr	r5, [pc, #28]	; (800c5bc <_fstat_r+0x20>)
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	4608      	mov	r0, r1
 800c5a6:	4611      	mov	r1, r2
 800c5a8:	602b      	str	r3, [r5, #0]
 800c5aa:	f7fa fd64 	bl	8007076 <_fstat>
 800c5ae:	1c43      	adds	r3, r0, #1
 800c5b0:	d102      	bne.n	800c5b8 <_fstat_r+0x1c>
 800c5b2:	682b      	ldr	r3, [r5, #0]
 800c5b4:	b103      	cbz	r3, 800c5b8 <_fstat_r+0x1c>
 800c5b6:	6023      	str	r3, [r4, #0]
 800c5b8:	bd38      	pop	{r3, r4, r5, pc}
 800c5ba:	bf00      	nop
 800c5bc:	20000d20 	.word	0x20000d20

0800c5c0 <_isatty_r>:
 800c5c0:	b538      	push	{r3, r4, r5, lr}
 800c5c2:	4d06      	ldr	r5, [pc, #24]	; (800c5dc <_isatty_r+0x1c>)
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	4608      	mov	r0, r1
 800c5ca:	602b      	str	r3, [r5, #0]
 800c5cc:	f7fa fd63 	bl	8007096 <_isatty>
 800c5d0:	1c43      	adds	r3, r0, #1
 800c5d2:	d102      	bne.n	800c5da <_isatty_r+0x1a>
 800c5d4:	682b      	ldr	r3, [r5, #0]
 800c5d6:	b103      	cbz	r3, 800c5da <_isatty_r+0x1a>
 800c5d8:	6023      	str	r3, [r4, #0]
 800c5da:	bd38      	pop	{r3, r4, r5, pc}
 800c5dc:	20000d20 	.word	0x20000d20

0800c5e0 <_lseek_r>:
 800c5e0:	b538      	push	{r3, r4, r5, lr}
 800c5e2:	4d07      	ldr	r5, [pc, #28]	; (800c600 <_lseek_r+0x20>)
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	4608      	mov	r0, r1
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	602a      	str	r2, [r5, #0]
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	f7fa fd5c 	bl	80070ac <_lseek>
 800c5f4:	1c43      	adds	r3, r0, #1
 800c5f6:	d102      	bne.n	800c5fe <_lseek_r+0x1e>
 800c5f8:	682b      	ldr	r3, [r5, #0]
 800c5fa:	b103      	cbz	r3, 800c5fe <_lseek_r+0x1e>
 800c5fc:	6023      	str	r3, [r4, #0]
 800c5fe:	bd38      	pop	{r3, r4, r5, pc}
 800c600:	20000d20 	.word	0x20000d20

0800c604 <__ascii_mbtowc>:
 800c604:	b082      	sub	sp, #8
 800c606:	b901      	cbnz	r1, 800c60a <__ascii_mbtowc+0x6>
 800c608:	a901      	add	r1, sp, #4
 800c60a:	b142      	cbz	r2, 800c61e <__ascii_mbtowc+0x1a>
 800c60c:	b14b      	cbz	r3, 800c622 <__ascii_mbtowc+0x1e>
 800c60e:	7813      	ldrb	r3, [r2, #0]
 800c610:	600b      	str	r3, [r1, #0]
 800c612:	7812      	ldrb	r2, [r2, #0]
 800c614:	1e10      	subs	r0, r2, #0
 800c616:	bf18      	it	ne
 800c618:	2001      	movne	r0, #1
 800c61a:	b002      	add	sp, #8
 800c61c:	4770      	bx	lr
 800c61e:	4610      	mov	r0, r2
 800c620:	e7fb      	b.n	800c61a <__ascii_mbtowc+0x16>
 800c622:	f06f 0001 	mvn.w	r0, #1
 800c626:	e7f8      	b.n	800c61a <__ascii_mbtowc+0x16>

0800c628 <__malloc_lock>:
 800c628:	4801      	ldr	r0, [pc, #4]	; (800c630 <__malloc_lock+0x8>)
 800c62a:	f7ff b8cc 	b.w	800b7c6 <__retarget_lock_acquire_recursive>
 800c62e:	bf00      	nop
 800c630:	20000d14 	.word	0x20000d14

0800c634 <__malloc_unlock>:
 800c634:	4801      	ldr	r0, [pc, #4]	; (800c63c <__malloc_unlock+0x8>)
 800c636:	f7ff b8c7 	b.w	800b7c8 <__retarget_lock_release_recursive>
 800c63a:	bf00      	nop
 800c63c:	20000d14 	.word	0x20000d14

0800c640 <_realloc_r>:
 800c640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c644:	4680      	mov	r8, r0
 800c646:	4614      	mov	r4, r2
 800c648:	460e      	mov	r6, r1
 800c64a:	b921      	cbnz	r1, 800c656 <_realloc_r+0x16>
 800c64c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c650:	4611      	mov	r1, r2
 800c652:	f7ff bd2d 	b.w	800c0b0 <_malloc_r>
 800c656:	b92a      	cbnz	r2, 800c664 <_realloc_r+0x24>
 800c658:	f7ff fcbe 	bl	800bfd8 <_free_r>
 800c65c:	4625      	mov	r5, r4
 800c65e:	4628      	mov	r0, r5
 800c660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c664:	f000 f99a 	bl	800c99c <_malloc_usable_size_r>
 800c668:	4284      	cmp	r4, r0
 800c66a:	4607      	mov	r7, r0
 800c66c:	d802      	bhi.n	800c674 <_realloc_r+0x34>
 800c66e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c672:	d812      	bhi.n	800c69a <_realloc_r+0x5a>
 800c674:	4621      	mov	r1, r4
 800c676:	4640      	mov	r0, r8
 800c678:	f7ff fd1a 	bl	800c0b0 <_malloc_r>
 800c67c:	4605      	mov	r5, r0
 800c67e:	2800      	cmp	r0, #0
 800c680:	d0ed      	beq.n	800c65e <_realloc_r+0x1e>
 800c682:	42bc      	cmp	r4, r7
 800c684:	4622      	mov	r2, r4
 800c686:	4631      	mov	r1, r6
 800c688:	bf28      	it	cs
 800c68a:	463a      	movcs	r2, r7
 800c68c:	f7fd fa6a 	bl	8009b64 <memcpy>
 800c690:	4631      	mov	r1, r6
 800c692:	4640      	mov	r0, r8
 800c694:	f7ff fca0 	bl	800bfd8 <_free_r>
 800c698:	e7e1      	b.n	800c65e <_realloc_r+0x1e>
 800c69a:	4635      	mov	r5, r6
 800c69c:	e7df      	b.n	800c65e <_realloc_r+0x1e>

0800c69e <__sfputc_r>:
 800c69e:	6893      	ldr	r3, [r2, #8]
 800c6a0:	3b01      	subs	r3, #1
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	b410      	push	{r4}
 800c6a6:	6093      	str	r3, [r2, #8]
 800c6a8:	da08      	bge.n	800c6bc <__sfputc_r+0x1e>
 800c6aa:	6994      	ldr	r4, [r2, #24]
 800c6ac:	42a3      	cmp	r3, r4
 800c6ae:	db01      	blt.n	800c6b4 <__sfputc_r+0x16>
 800c6b0:	290a      	cmp	r1, #10
 800c6b2:	d103      	bne.n	800c6bc <__sfputc_r+0x1e>
 800c6b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6b8:	f7fd bf8c 	b.w	800a5d4 <__swbuf_r>
 800c6bc:	6813      	ldr	r3, [r2, #0]
 800c6be:	1c58      	adds	r0, r3, #1
 800c6c0:	6010      	str	r0, [r2, #0]
 800c6c2:	7019      	strb	r1, [r3, #0]
 800c6c4:	4608      	mov	r0, r1
 800c6c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <__sfputs_r>:
 800c6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	460f      	mov	r7, r1
 800c6d2:	4614      	mov	r4, r2
 800c6d4:	18d5      	adds	r5, r2, r3
 800c6d6:	42ac      	cmp	r4, r5
 800c6d8:	d101      	bne.n	800c6de <__sfputs_r+0x12>
 800c6da:	2000      	movs	r0, #0
 800c6dc:	e007      	b.n	800c6ee <__sfputs_r+0x22>
 800c6de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6e2:	463a      	mov	r2, r7
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	f7ff ffda 	bl	800c69e <__sfputc_r>
 800c6ea:	1c43      	adds	r3, r0, #1
 800c6ec:	d1f3      	bne.n	800c6d6 <__sfputs_r+0xa>
 800c6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c6f0 <_vfiprintf_r>:
 800c6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f4:	460d      	mov	r5, r1
 800c6f6:	b09d      	sub	sp, #116	; 0x74
 800c6f8:	4614      	mov	r4, r2
 800c6fa:	4698      	mov	r8, r3
 800c6fc:	4606      	mov	r6, r0
 800c6fe:	b118      	cbz	r0, 800c708 <_vfiprintf_r+0x18>
 800c700:	6983      	ldr	r3, [r0, #24]
 800c702:	b90b      	cbnz	r3, 800c708 <_vfiprintf_r+0x18>
 800c704:	f7fe ffbc 	bl	800b680 <__sinit>
 800c708:	4b89      	ldr	r3, [pc, #548]	; (800c930 <_vfiprintf_r+0x240>)
 800c70a:	429d      	cmp	r5, r3
 800c70c:	d11b      	bne.n	800c746 <_vfiprintf_r+0x56>
 800c70e:	6875      	ldr	r5, [r6, #4]
 800c710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c712:	07d9      	lsls	r1, r3, #31
 800c714:	d405      	bmi.n	800c722 <_vfiprintf_r+0x32>
 800c716:	89ab      	ldrh	r3, [r5, #12]
 800c718:	059a      	lsls	r2, r3, #22
 800c71a:	d402      	bmi.n	800c722 <_vfiprintf_r+0x32>
 800c71c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c71e:	f7ff f852 	bl	800b7c6 <__retarget_lock_acquire_recursive>
 800c722:	89ab      	ldrh	r3, [r5, #12]
 800c724:	071b      	lsls	r3, r3, #28
 800c726:	d501      	bpl.n	800c72c <_vfiprintf_r+0x3c>
 800c728:	692b      	ldr	r3, [r5, #16]
 800c72a:	b9eb      	cbnz	r3, 800c768 <_vfiprintf_r+0x78>
 800c72c:	4629      	mov	r1, r5
 800c72e:	4630      	mov	r0, r6
 800c730:	f7fd ffa2 	bl	800a678 <__swsetup_r>
 800c734:	b1c0      	cbz	r0, 800c768 <_vfiprintf_r+0x78>
 800c736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c738:	07dc      	lsls	r4, r3, #31
 800c73a:	d50e      	bpl.n	800c75a <_vfiprintf_r+0x6a>
 800c73c:	f04f 30ff 	mov.w	r0, #4294967295
 800c740:	b01d      	add	sp, #116	; 0x74
 800c742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c746:	4b7b      	ldr	r3, [pc, #492]	; (800c934 <_vfiprintf_r+0x244>)
 800c748:	429d      	cmp	r5, r3
 800c74a:	d101      	bne.n	800c750 <_vfiprintf_r+0x60>
 800c74c:	68b5      	ldr	r5, [r6, #8]
 800c74e:	e7df      	b.n	800c710 <_vfiprintf_r+0x20>
 800c750:	4b79      	ldr	r3, [pc, #484]	; (800c938 <_vfiprintf_r+0x248>)
 800c752:	429d      	cmp	r5, r3
 800c754:	bf08      	it	eq
 800c756:	68f5      	ldreq	r5, [r6, #12]
 800c758:	e7da      	b.n	800c710 <_vfiprintf_r+0x20>
 800c75a:	89ab      	ldrh	r3, [r5, #12]
 800c75c:	0598      	lsls	r0, r3, #22
 800c75e:	d4ed      	bmi.n	800c73c <_vfiprintf_r+0x4c>
 800c760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c762:	f7ff f831 	bl	800b7c8 <__retarget_lock_release_recursive>
 800c766:	e7e9      	b.n	800c73c <_vfiprintf_r+0x4c>
 800c768:	2300      	movs	r3, #0
 800c76a:	9309      	str	r3, [sp, #36]	; 0x24
 800c76c:	2320      	movs	r3, #32
 800c76e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c772:	f8cd 800c 	str.w	r8, [sp, #12]
 800c776:	2330      	movs	r3, #48	; 0x30
 800c778:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c93c <_vfiprintf_r+0x24c>
 800c77c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c780:	f04f 0901 	mov.w	r9, #1
 800c784:	4623      	mov	r3, r4
 800c786:	469a      	mov	sl, r3
 800c788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c78c:	b10a      	cbz	r2, 800c792 <_vfiprintf_r+0xa2>
 800c78e:	2a25      	cmp	r2, #37	; 0x25
 800c790:	d1f9      	bne.n	800c786 <_vfiprintf_r+0x96>
 800c792:	ebba 0b04 	subs.w	fp, sl, r4
 800c796:	d00b      	beq.n	800c7b0 <_vfiprintf_r+0xc0>
 800c798:	465b      	mov	r3, fp
 800c79a:	4622      	mov	r2, r4
 800c79c:	4629      	mov	r1, r5
 800c79e:	4630      	mov	r0, r6
 800c7a0:	f7ff ff94 	bl	800c6cc <__sfputs_r>
 800c7a4:	3001      	adds	r0, #1
 800c7a6:	f000 80aa 	beq.w	800c8fe <_vfiprintf_r+0x20e>
 800c7aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7ac:	445a      	add	r2, fp
 800c7ae:	9209      	str	r2, [sp, #36]	; 0x24
 800c7b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f000 80a2 	beq.w	800c8fe <_vfiprintf_r+0x20e>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c7c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7c4:	f10a 0a01 	add.w	sl, sl, #1
 800c7c8:	9304      	str	r3, [sp, #16]
 800c7ca:	9307      	str	r3, [sp, #28]
 800c7cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7d0:	931a      	str	r3, [sp, #104]	; 0x68
 800c7d2:	4654      	mov	r4, sl
 800c7d4:	2205      	movs	r2, #5
 800c7d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7da:	4858      	ldr	r0, [pc, #352]	; (800c93c <_vfiprintf_r+0x24c>)
 800c7dc:	f7f3 fd08 	bl	80001f0 <memchr>
 800c7e0:	9a04      	ldr	r2, [sp, #16]
 800c7e2:	b9d8      	cbnz	r0, 800c81c <_vfiprintf_r+0x12c>
 800c7e4:	06d1      	lsls	r1, r2, #27
 800c7e6:	bf44      	itt	mi
 800c7e8:	2320      	movmi	r3, #32
 800c7ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ee:	0713      	lsls	r3, r2, #28
 800c7f0:	bf44      	itt	mi
 800c7f2:	232b      	movmi	r3, #43	; 0x2b
 800c7f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c7fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c7fe:	d015      	beq.n	800c82c <_vfiprintf_r+0x13c>
 800c800:	9a07      	ldr	r2, [sp, #28]
 800c802:	4654      	mov	r4, sl
 800c804:	2000      	movs	r0, #0
 800c806:	f04f 0c0a 	mov.w	ip, #10
 800c80a:	4621      	mov	r1, r4
 800c80c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c810:	3b30      	subs	r3, #48	; 0x30
 800c812:	2b09      	cmp	r3, #9
 800c814:	d94e      	bls.n	800c8b4 <_vfiprintf_r+0x1c4>
 800c816:	b1b0      	cbz	r0, 800c846 <_vfiprintf_r+0x156>
 800c818:	9207      	str	r2, [sp, #28]
 800c81a:	e014      	b.n	800c846 <_vfiprintf_r+0x156>
 800c81c:	eba0 0308 	sub.w	r3, r0, r8
 800c820:	fa09 f303 	lsl.w	r3, r9, r3
 800c824:	4313      	orrs	r3, r2
 800c826:	9304      	str	r3, [sp, #16]
 800c828:	46a2      	mov	sl, r4
 800c82a:	e7d2      	b.n	800c7d2 <_vfiprintf_r+0xe2>
 800c82c:	9b03      	ldr	r3, [sp, #12]
 800c82e:	1d19      	adds	r1, r3, #4
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	9103      	str	r1, [sp, #12]
 800c834:	2b00      	cmp	r3, #0
 800c836:	bfbb      	ittet	lt
 800c838:	425b      	neglt	r3, r3
 800c83a:	f042 0202 	orrlt.w	r2, r2, #2
 800c83e:	9307      	strge	r3, [sp, #28]
 800c840:	9307      	strlt	r3, [sp, #28]
 800c842:	bfb8      	it	lt
 800c844:	9204      	strlt	r2, [sp, #16]
 800c846:	7823      	ldrb	r3, [r4, #0]
 800c848:	2b2e      	cmp	r3, #46	; 0x2e
 800c84a:	d10c      	bne.n	800c866 <_vfiprintf_r+0x176>
 800c84c:	7863      	ldrb	r3, [r4, #1]
 800c84e:	2b2a      	cmp	r3, #42	; 0x2a
 800c850:	d135      	bne.n	800c8be <_vfiprintf_r+0x1ce>
 800c852:	9b03      	ldr	r3, [sp, #12]
 800c854:	1d1a      	adds	r2, r3, #4
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	9203      	str	r2, [sp, #12]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	bfb8      	it	lt
 800c85e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c862:	3402      	adds	r4, #2
 800c864:	9305      	str	r3, [sp, #20]
 800c866:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c94c <_vfiprintf_r+0x25c>
 800c86a:	7821      	ldrb	r1, [r4, #0]
 800c86c:	2203      	movs	r2, #3
 800c86e:	4650      	mov	r0, sl
 800c870:	f7f3 fcbe 	bl	80001f0 <memchr>
 800c874:	b140      	cbz	r0, 800c888 <_vfiprintf_r+0x198>
 800c876:	2340      	movs	r3, #64	; 0x40
 800c878:	eba0 000a 	sub.w	r0, r0, sl
 800c87c:	fa03 f000 	lsl.w	r0, r3, r0
 800c880:	9b04      	ldr	r3, [sp, #16]
 800c882:	4303      	orrs	r3, r0
 800c884:	3401      	adds	r4, #1
 800c886:	9304      	str	r3, [sp, #16]
 800c888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c88c:	482c      	ldr	r0, [pc, #176]	; (800c940 <_vfiprintf_r+0x250>)
 800c88e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c892:	2206      	movs	r2, #6
 800c894:	f7f3 fcac 	bl	80001f0 <memchr>
 800c898:	2800      	cmp	r0, #0
 800c89a:	d03f      	beq.n	800c91c <_vfiprintf_r+0x22c>
 800c89c:	4b29      	ldr	r3, [pc, #164]	; (800c944 <_vfiprintf_r+0x254>)
 800c89e:	bb1b      	cbnz	r3, 800c8e8 <_vfiprintf_r+0x1f8>
 800c8a0:	9b03      	ldr	r3, [sp, #12]
 800c8a2:	3307      	adds	r3, #7
 800c8a4:	f023 0307 	bic.w	r3, r3, #7
 800c8a8:	3308      	adds	r3, #8
 800c8aa:	9303      	str	r3, [sp, #12]
 800c8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ae:	443b      	add	r3, r7
 800c8b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c8b2:	e767      	b.n	800c784 <_vfiprintf_r+0x94>
 800c8b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8b8:	460c      	mov	r4, r1
 800c8ba:	2001      	movs	r0, #1
 800c8bc:	e7a5      	b.n	800c80a <_vfiprintf_r+0x11a>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	3401      	adds	r4, #1
 800c8c2:	9305      	str	r3, [sp, #20]
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	f04f 0c0a 	mov.w	ip, #10
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8d0:	3a30      	subs	r2, #48	; 0x30
 800c8d2:	2a09      	cmp	r2, #9
 800c8d4:	d903      	bls.n	800c8de <_vfiprintf_r+0x1ee>
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d0c5      	beq.n	800c866 <_vfiprintf_r+0x176>
 800c8da:	9105      	str	r1, [sp, #20]
 800c8dc:	e7c3      	b.n	800c866 <_vfiprintf_r+0x176>
 800c8de:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	e7f0      	b.n	800c8ca <_vfiprintf_r+0x1da>
 800c8e8:	ab03      	add	r3, sp, #12
 800c8ea:	9300      	str	r3, [sp, #0]
 800c8ec:	462a      	mov	r2, r5
 800c8ee:	4b16      	ldr	r3, [pc, #88]	; (800c948 <_vfiprintf_r+0x258>)
 800c8f0:	a904      	add	r1, sp, #16
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	f7fd fa06 	bl	8009d04 <_printf_float>
 800c8f8:	4607      	mov	r7, r0
 800c8fa:	1c78      	adds	r0, r7, #1
 800c8fc:	d1d6      	bne.n	800c8ac <_vfiprintf_r+0x1bc>
 800c8fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c900:	07d9      	lsls	r1, r3, #31
 800c902:	d405      	bmi.n	800c910 <_vfiprintf_r+0x220>
 800c904:	89ab      	ldrh	r3, [r5, #12]
 800c906:	059a      	lsls	r2, r3, #22
 800c908:	d402      	bmi.n	800c910 <_vfiprintf_r+0x220>
 800c90a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c90c:	f7fe ff5c 	bl	800b7c8 <__retarget_lock_release_recursive>
 800c910:	89ab      	ldrh	r3, [r5, #12]
 800c912:	065b      	lsls	r3, r3, #25
 800c914:	f53f af12 	bmi.w	800c73c <_vfiprintf_r+0x4c>
 800c918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c91a:	e711      	b.n	800c740 <_vfiprintf_r+0x50>
 800c91c:	ab03      	add	r3, sp, #12
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	462a      	mov	r2, r5
 800c922:	4b09      	ldr	r3, [pc, #36]	; (800c948 <_vfiprintf_r+0x258>)
 800c924:	a904      	add	r1, sp, #16
 800c926:	4630      	mov	r0, r6
 800c928:	f7fd fc90 	bl	800a24c <_printf_i>
 800c92c:	e7e4      	b.n	800c8f8 <_vfiprintf_r+0x208>
 800c92e:	bf00      	nop
 800c930:	0800ec68 	.word	0x0800ec68
 800c934:	0800ec88 	.word	0x0800ec88
 800c938:	0800ec48 	.word	0x0800ec48
 800c93c:	0800ee04 	.word	0x0800ee04
 800c940:	0800ee0e 	.word	0x0800ee0e
 800c944:	08009d05 	.word	0x08009d05
 800c948:	0800c6cd 	.word	0x0800c6cd
 800c94c:	0800ee0a 	.word	0x0800ee0a

0800c950 <_read_r>:
 800c950:	b538      	push	{r3, r4, r5, lr}
 800c952:	4d07      	ldr	r5, [pc, #28]	; (800c970 <_read_r+0x20>)
 800c954:	4604      	mov	r4, r0
 800c956:	4608      	mov	r0, r1
 800c958:	4611      	mov	r1, r2
 800c95a:	2200      	movs	r2, #0
 800c95c:	602a      	str	r2, [r5, #0]
 800c95e:	461a      	mov	r2, r3
 800c960:	f7fa fb44 	bl	8006fec <_read>
 800c964:	1c43      	adds	r3, r0, #1
 800c966:	d102      	bne.n	800c96e <_read_r+0x1e>
 800c968:	682b      	ldr	r3, [r5, #0]
 800c96a:	b103      	cbz	r3, 800c96e <_read_r+0x1e>
 800c96c:	6023      	str	r3, [r4, #0]
 800c96e:	bd38      	pop	{r3, r4, r5, pc}
 800c970:	20000d20 	.word	0x20000d20

0800c974 <__ascii_wctomb>:
 800c974:	b149      	cbz	r1, 800c98a <__ascii_wctomb+0x16>
 800c976:	2aff      	cmp	r2, #255	; 0xff
 800c978:	bf85      	ittet	hi
 800c97a:	238a      	movhi	r3, #138	; 0x8a
 800c97c:	6003      	strhi	r3, [r0, #0]
 800c97e:	700a      	strbls	r2, [r1, #0]
 800c980:	f04f 30ff 	movhi.w	r0, #4294967295
 800c984:	bf98      	it	ls
 800c986:	2001      	movls	r0, #1
 800c988:	4770      	bx	lr
 800c98a:	4608      	mov	r0, r1
 800c98c:	4770      	bx	lr

0800c98e <abort>:
 800c98e:	b508      	push	{r3, lr}
 800c990:	2006      	movs	r0, #6
 800c992:	f000 f833 	bl	800c9fc <raise>
 800c996:	2001      	movs	r0, #1
 800c998:	f7fa fb1e 	bl	8006fd8 <_exit>

0800c99c <_malloc_usable_size_r>:
 800c99c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9a0:	1f18      	subs	r0, r3, #4
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	bfbc      	itt	lt
 800c9a6:	580b      	ldrlt	r3, [r1, r0]
 800c9a8:	18c0      	addlt	r0, r0, r3
 800c9aa:	4770      	bx	lr

0800c9ac <_raise_r>:
 800c9ac:	291f      	cmp	r1, #31
 800c9ae:	b538      	push	{r3, r4, r5, lr}
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	460d      	mov	r5, r1
 800c9b4:	d904      	bls.n	800c9c0 <_raise_r+0x14>
 800c9b6:	2316      	movs	r3, #22
 800c9b8:	6003      	str	r3, [r0, #0]
 800c9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c9be:	bd38      	pop	{r3, r4, r5, pc}
 800c9c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c9c2:	b112      	cbz	r2, 800c9ca <_raise_r+0x1e>
 800c9c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c9c8:	b94b      	cbnz	r3, 800c9de <_raise_r+0x32>
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f000 f830 	bl	800ca30 <_getpid_r>
 800c9d0:	462a      	mov	r2, r5
 800c9d2:	4601      	mov	r1, r0
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9da:	f000 b817 	b.w	800ca0c <_kill_r>
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d00a      	beq.n	800c9f8 <_raise_r+0x4c>
 800c9e2:	1c59      	adds	r1, r3, #1
 800c9e4:	d103      	bne.n	800c9ee <_raise_r+0x42>
 800c9e6:	2316      	movs	r3, #22
 800c9e8:	6003      	str	r3, [r0, #0]
 800c9ea:	2001      	movs	r0, #1
 800c9ec:	e7e7      	b.n	800c9be <_raise_r+0x12>
 800c9ee:	2400      	movs	r4, #0
 800c9f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	4798      	blx	r3
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	e7e0      	b.n	800c9be <_raise_r+0x12>

0800c9fc <raise>:
 800c9fc:	4b02      	ldr	r3, [pc, #8]	; (800ca08 <raise+0xc>)
 800c9fe:	4601      	mov	r1, r0
 800ca00:	6818      	ldr	r0, [r3, #0]
 800ca02:	f7ff bfd3 	b.w	800c9ac <_raise_r>
 800ca06:	bf00      	nop
 800ca08:	200002ec 	.word	0x200002ec

0800ca0c <_kill_r>:
 800ca0c:	b538      	push	{r3, r4, r5, lr}
 800ca0e:	4d07      	ldr	r5, [pc, #28]	; (800ca2c <_kill_r+0x20>)
 800ca10:	2300      	movs	r3, #0
 800ca12:	4604      	mov	r4, r0
 800ca14:	4608      	mov	r0, r1
 800ca16:	4611      	mov	r1, r2
 800ca18:	602b      	str	r3, [r5, #0]
 800ca1a:	f7fa facd 	bl	8006fb8 <_kill>
 800ca1e:	1c43      	adds	r3, r0, #1
 800ca20:	d102      	bne.n	800ca28 <_kill_r+0x1c>
 800ca22:	682b      	ldr	r3, [r5, #0]
 800ca24:	b103      	cbz	r3, 800ca28 <_kill_r+0x1c>
 800ca26:	6023      	str	r3, [r4, #0]
 800ca28:	bd38      	pop	{r3, r4, r5, pc}
 800ca2a:	bf00      	nop
 800ca2c:	20000d20 	.word	0x20000d20

0800ca30 <_getpid_r>:
 800ca30:	f7fa baba 	b.w	8006fa8 <_getpid>

0800ca34 <_init>:
 800ca34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca36:	bf00      	nop
 800ca38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca3a:	bc08      	pop	{r3}
 800ca3c:	469e      	mov	lr, r3
 800ca3e:	4770      	bx	lr

0800ca40 <_fini>:
 800ca40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca42:	bf00      	nop
 800ca44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca46:	bc08      	pop	{r3}
 800ca48:	469e      	mov	lr, r3
 800ca4a:	4770      	bx	lr
